{"id": "TEST1-1", "output_field": "在添加边时，如果指定的值不包含在value_dict中，这些字段将被视为null。"}
{"id": "TEST1-2", "output_field": "Christopher Nolan, Corin Redgrave"}
{"id": "TEST1-3", "output_field": "使用GET方法访问`/role/`接口，并携带有效的管理员授权令牌，即可查询数据库中所有角色及其相关信息。请求示例：`GET http://localhost:7070/role`，响应中将包含所有角色的详细信息。"}
{"id": "TEST1-4", "output_field": "每个图项目可以存储最多2^(40)个点数据和2^(32)条边数据。每个点或边类型最多可以有1024个属性。"}
{"id": "TEST1-5", "output_field": "可能是在容器启动后没有进入正确的目录，请检查是否需要切换到包含 setup.sh 脚本的目录。可以使用 `ls` 命令查看当前目录内容，并用 `cd` 命令切换到正确目录。如果仍找不到，可能需要检查镜像是否正确或脚本是否存在于镜像中。"}
{"id": "TEST1-6", "output_field": "Yes, when starting TuGraph with the `lgraph_server -d start` command, a `.pid` file will be generated in the current working directory (pwd). There is no specific parameter to control the path of the `.pid` file in the command."}
{"id": "TEST1-7", "output_field": "如果在使用ARM机器（如M1芯片的Mac）编译TuGraph，应该在cmake命令中加入`-DENABLE_BUILD_ON_AARCH64=ON`参数。"}
{"id": "TEST1-8", "output_field": "cleanup_dir指定的目录用于在函数执行完成后进行清理操作。"}
{"id": "TEST1-9", "output_field": "启动 TuGraph 的命令是 `lgraph_server`。"}
{"id": "TEST1-10", "output_field": "TuGraph团队主要通过以下手段提高解析速度：1）优化数据结构和算法，提升图数据库性能；2）采用并行计算技术，加速数据处理；3）实施内存管理优化，减少资源消耗。"}
{"id": "TEST1-11", "output_field": "中止一个正在执行的任务时，应该使用 DELETE HTTP请求方法。"}
{"id": "TEST1-12", "output_field": "AllocVertexSubset函数用于分配一个ParallelBitset集合，这个集合用来表示图中所有点的状态是否激活。"}
{"id": "TEST1-13", "output_field": "请检查网络连接稳定性，确保服务器有足够存储空间，并验证数据格式是否符合导入要求。如问题依旧，建议查看错误日志获取详细信息。"}
{"id": "TEST1-14", "output_field": "TuGraph支持的导出格式包括csv和json。"}
{"id": "TEST1-15", "output_field": "除了在语句前加EXPLAIN和PROFILE，还可以通过优化查询语句、调整索引策略、配置系统参数等方式进行TuGraph的调优。"}
{"id": "TEST1-16", "output_field": "url、user、password"}
{"id": "TEST1-17", "output_field": "在Python中，通过`from cython.cimports.olap_base import *`的方式导入Olap相关模块，图数据库模块的导入方式未在文档中明确说明。"}
{"id": "TEST1-18", "output_field": "'unique'参数指定索引是否唯一，即该字段的值在整个图中不能重复；'pair_unique'参数指定索引是否为组合唯一，即该字段与其他字段组合的值在整个图中不能重复。"}
{"id": "TEST1-19", "output_field": "图数据库相比于关系型数据库的优势主要体现在性能、兼容性和直观性三个方面。性能上，图数据库处理关联关系的效率远高于关系型数据库，因为它避免了频繁的JOIN操作；兼容性方面，图数据库能更灵活地适应数据结构和内容的变化，而无需像关系型数据库那样修改表结构；直观性上，图数据库以图的结构直接表达现实世界的关系，更符合人类的直观理解，便于分析和查询。"}
{"id": "TEST1-20", "output_field": "是的，报错信息表明属性值 [xxx] 过长，超过了顶点唯一索引的限制长度。需要缩短该属性值或调整索引长度限制。"}
{"id": "TEST1-21", "output_field": "如果使用 GET 方法获取具体边属性时边不存在该属性，会返回错误代码 400。"}
{"id": "TEST1-22", "output_field": "TuGraph提供了编译环境、运行环境和精简运行环境三种类型的系统环境。"}
{"id": "TEST1-23", "output_field": "TuGraph-DB新增支持的空间数据类型包括Point、Linestring和Polygon。"}
{"id": "TEST1-24", "output_field": "extra"}
{"id": "TEST1-25", "output_field": "leader"}
{"id": "TEST1-26", "output_field": "WriteNotAllowed"}
{"id": "TEST1-27", "output_field": "GetVertexIndexIterator函数在liblgraph_python_api.Transaction中用于获取索引迭代器，它指向具有指定索引值的顶点。"}
{"id": "TEST1-28", "output_field": "可以指定错误继续执行和线程数。通过设置相关参数，如`ignore_errors=True`和`threads=n`，来控制数据导入过程中的错误处理和并发线程数。具体参数设置需参考函数文档。"}
{"id": "TEST1-29", "output_field": "get_vertex()"}
{"id": "TEST1-30", "output_field": "WriteNotAllowed"}
{"id": "TEST1-31", "output_field": "当节点的出度大于0时，pagerank值的计算方式为将1除以节点数，然后除以节点的出度。"}
{"id": "TEST1-32", "output_field": "TuGraph支持将数据导出为csv或json格式。"}
{"id": "TEST1-33", "output_field": "数组越界错误，读取所需大小为4，实际大小为2。请检查数据文件完整性或调整读取逻辑。"}
{"id": "TEST1-34", "output_field": "只读"}
{"id": "TEST1-35", "output_field": "CSV文件中的栏位名称应与配置文件中的columns字段中的名称相匹配，以确保数据正确导入。通常，配置文件中的columns会列出预期的栏位名称及其顺序。若CSV文件中的栏位顺序或名称不一致，需调整配置文件或CSV文件以保持一致。"}
{"id": "TEST1-36", "output_field": "顶点标签、文件头行数、列映射（包括字段名称、数据类型、是否为ID或可选）"}
{"id": "TEST1-37", "output_field": "TuGraph Browser 的默认端口号是 7070。"}
{"id": "TEST1-38", "output_field": "计算图表中显示的值的方法是配置中指定的算法或公式。这通常涉及对数据进行聚合、计算平均值、求和等操作。具体方法取决于配置文件中的设定。"}
{"id": "TEST1-39", "output_field": "TuGraph是由蚂蚁集团与清华大学联合研发的。"}
{"id": "TEST1-40", "output_field": "图学习系统是解决图学习问题的。"}
{"id": "TEST1-41", "output_field": "VertexIterator GetVertexByUniqueCompositeIndex函数需要以下参数：\n\n1. label_name：标签的名称。\n2. field_name：一个字符串向量，包含字段名称。\n3. field_value_string：一个字符串向量，包含字段值。"}
{"id": "TEST1-42", "output_field": "在配置文件或命令行中设置 `rpc_port` 参数的值。例如，在配置文件中添加 `\"rpc_port\": 9090`，或在命令行中使用 `--rpc_port 9090`。默认端口为 9090。"}
{"id": "TEST1-43", "output_field": "图数据库在处理关联关系时相比关系型数据库有显著的优势，主要体现在性能、兼容性和直观性三个方面。性能方面，图数据库通过直接访问类指针而非表的JOIN操作，能够提高2到4个数量级的效率。兼容性方面，图数据库能够灵活地添加新的点、边和属性，适应数据格式的变化，而无需像关系型数据库那样进行大规模的表结构修改。直观性方面，图数据库以图的结构直接表达现实世界的关系，更符合人类的直观理解，便于分析和查询。"}
{"id": "TEST1-44", "output_field": "默认密码是：73@TuGraph。"}
{"id": "TEST1-45", "output_field": "field_value_strings参数的数据类型是`std::vector<std::string>`。"}
{"id": "TEST1-46", "output_field": "是独立的。TuGraph-DB 是图数据库，负责图数据的存储和管理；TuGraph Analytics 是流式图计算引擎，负责图数据的分析和计算。两者可以协同工作，但运行上是独立的系统。"}
{"id": "TEST1-47", "output_field": "urls, user, password"}
{"id": "TEST1-48", "output_field": "使用`lgraph_cypher`工具在命令行中以单命令模式提交Cypher查询并保存结果的步骤如下：\n\n1. 使用`-s`参数指定单行Cypher查询命令。\n2. 使用`-f`参数指定保存结果的文件路径。\n3. 运行`lgraph_cypher.py`脚本并附加必要的认证信息。\n\n例如，运行以下命令来提交查询并保存结果：\n\n```powershell\n$ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" -f /home/usr/query_results.txt\n```"}
{"id": "TEST1-49", "output_field": "数据目录和日志目录被挂载到宿主机的`/root/tugraph/`上进行持久化。"}
{"id": "TEST1-50", "output_field": "1. 通过点 ID 直接指定单个起始点（`SetFrontier(size_t root_vid)`）。\n2. 通过点 ID 数组直接指定多个起始点（`SetFrontier(ParallelVector & root_vids)`）。\n3. 使用过滤函数指定满足条件的起始点集（`SetFrontier(std::function root_vertex_filter)`）。"}
{"id": "TEST1-51", "output_field": "设置字段值。"}
{"id": "TEST1-52", "output_field": "TuGraph-DB图数据库是由蚂蚁集团开发的。"}
{"id": "TEST1-53", "output_field": "精简运行环境不需要任何系统库。"}
{"id": "TEST1-54", "output_field": "函数 `SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)` 通过参数 `root_vertex_filter` 设置初始前沿。该参数是一个过滤器函数，对每个顶点进行判断，若 `root_vertex_filter` 返回 `true`，则将该顶点加入初始前沿集合。"}
{"id": "TEST1-55", "output_field": "包含。rpm包通常会包含软件的所有必要组件，包括新版前端页面资源。具体内容可通过查看rpm包的文件列表确认。"}
{"id": "TEST1-56", "output_field": "根据提供的文档，镜像 `tugraph-runtime-centos7` 启动所需的资源建议配置为：CPU Xeon E5 2670 v4，内存 256GB，硬盘 1TB NVMe SSD。实际资源消耗可能因具体使用场景而异。"}
{"id": "TEST1-57", "output_field": "属性个数、属性长度之和、索引类型（唯一或非唯一）"}
{"id": "TEST1-58", "output_field": "InvalidTxn"}
{"id": "TEST1-59", "output_field": "TuGraphClient是TuGraph数据库的Python客户端库，用于通过RESTful或RPC方式与TuGraph服务器进行交互，支持调用Cypher查询和存储过程。"}
{"id": "TEST1-60", "output_field": "TuGraph 支持 X86_64 和 ARM64 架构的硬件平台。"}
{"id": "TEST1-61", "output_field": "是的，前两个参数`personDesc`和`person`的格式与执行导入脚本时的格式相同。`personDesc`是数据格式描述，`person`是要导入的数据内容。"}
{"id": "TEST1-62", "output_field": "类中的集合映射为边，类的属性映射为图对象的属性。"}
{"id": "TEST1-63", "output_field": "如果在对 DateTime 对象使用 operator+= 或 operator-= 运算时发生溢出，当前 DateTime 对象不会被修改。"}
{"id": "TEST1-64", "output_field": "标签存在且添加的字段不重复，默认值类型兼容。"}
{"id": "TEST1-65", "output_field": "EdgeData类型的数值"}
{"id": "TEST1-66", "output_field": "RPC（远程过程调用）是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-67", "output_field": "TuGraph中的主键是用户自定义的点数据主键，默认为唯一索引，在对应的点类型中唯一，用于标识和区分不同的点数据。"}
{"id": "TEST1-68", "output_field": "RpcException是TuGraph RPC API中用于表示初始化通道失败等RPC相关错误的异常类型。"}
{"id": "TEST1-69", "output_field": "不支持。match语句通常用于精确匹配单个属性值。若需匹配多个属性，需使用多个match语句或组合查询条件。"}
{"id": "TEST1-70", "output_field": "很抱歉，根据提供的文档内容，没有关于TuGraph DB对Antlr4性能改进的具体信息。如果您需要这方面的详细资料，建议查阅TuGraph的官方文档或相关技术博客。"}
{"id": "TEST1-71", "output_field": "TuGraph要求每个节点或关系有且只有一个标签，如果没有标签会报错，如果有多个标签则取第一个作为标签。OpenCypher允许一个节点或关系有0个到多个标签。"}
{"id": "TEST1-72", "output_field": "true"}
{"id": "TEST1-73", "output_field": "目前Tugraph Analytics不支持窗口函数。"}
{"id": "TEST1-74", "output_field": "字符串格式"}
{"id": "TEST1-75", "output_field": "在 PathTraversal 类中，通过调用 `SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)` 函数来通过传入的过滤器设置初始边界。"}
{"id": "TEST1-76", "output_field": "很抱歉，当前上下文中没有提供关于GeaBase主要部署方式所需时间的具体信息。"}
{"id": "TEST1-77", "output_field": "点和边"}
{"id": "TEST1-78", "output_field": "TuGraph 支持多种编程语言，包括 C++、Java、Python 和 Rust。这些语言可以用于编写存储过程、客户端 SDK 以及其他与 TuGraph 交互的应用程序。"}
{"id": "TEST1-79", "output_field": "可以通过发送 GET 请求到 `/db/{graph_name}/cpp_plugin|python_plugin` 来获取存储过程响应的列表。"}
{"id": "TEST1-80", "output_field": "RPC接口是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-81", "output_field": "acted_in, directed, TYPE WITH SPACE"}
{"id": "TEST1-82", "output_field": "启动 TuGraph 服务器的命令是 `lgraph_server -d start -c lgraph_daemon.json`。"}
{"id": "TEST1-83", "output_field": "将会抛出异常。"}
{"id": "TEST1-84", "output_field": "TuGraph 支持 X86_64 和 ARM64 架构的硬件平台。"}
{"id": "TEST1-85", "output_field": "TuGraph-OGM通过将JAVA对象（POJO）映射到TuGraph中，使得JAVA中的类可以映射为图中的节点、类中的集合映射为边、类的属性映射为图对象的属性，并提供了一系列函数来操作图数据库，从而让JAVA开发人员能够在熟悉的生态中轻松使用TuGraph数据库。"}
{"id": "TEST1-86", "output_field": "`OPTIONAL MATCH`在GQL中用于在图中搜索可能不存在的匹配模式，允许查询结果中包含部分缺失的数据，而不影响整个查询的执行。当某些关系或节点不存在时，`OPTIONAL MATCH`会返回`null`而不是导致整个查询失败。"}
{"id": "TEST1-87", "output_field": "在`loadProcedure`方法中，通过`readOnly`参数控制存储过程是否为只读。"}
{"id": "TEST1-88", "output_field": "RpcStatusException"}
{"id": "TEST1-89", "output_field": "swap_id函数在Transform操作中用于交换两个元素的ID，常用于数据重组或调整元素位置。它能够改变元素的标识符，从而影响数据处理流程。具体应用取决于数据结构和处理需求。"}
{"id": "TEST1-90", "output_field": "```cypher\nMATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person)\nRETURN a.name, r.role\n```"}
{"id": "TEST1-91", "output_field": "TuGraph-DB图数据库社区版内置了6种基础算法。"}
{"id": "TEST1-92", "output_field": "TuGraph-DB支持的三种空间数据类型是：点（Point）、折线（Linestring）和多边形（Polygon）。"}
{"id": "TEST1-93", "output_field": "'产品是否支持麒麟操作系统？只有企业版支持么？': '是的，产品支持麒麟操作系统，但仅限企业版支持。'"}
{"id": "TEST1-94", "output_field": "TuGraph-DB中存储Point类型数据的格式是EWKB格式。"}
{"id": "TEST1-95", "output_field": "TuGraph嵌入模式的API允许用户打开或创建数据库，然后查询或修改数据库。"}
{"id": "TEST1-96", "output_field": "1970/1/1"}
{"id": "TEST1-97", "output_field": "如果给定的vertex_label或field不存在，函数将抛出InputError异常。"}
{"id": "TEST1-98", "output_field": "在单命令模式下，可以使用 `-s` 参数来指定单行 Cypher 查询命令，并通过 `-format` 参数将结果显示为表格格式。例如：\n\n```powershell\n$ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" -format table\n```"}
{"id": "TEST1-99", "output_field": "reduce_plus函数将两个参数相加。"}
{"id": "TEST1-100", "output_field": "不支持无向边，但可以通过创建两个方向相反的有向边来模拟无向边。"}
{"id": "TEST1-101", "output_field": "FieldData类提供了多种构造函数来初始化不同类型的数据，包括默认构造函数、接受单个值的构造函数、接受数组或列表的构造函数以及复制构造函数等。具体构造函数的类型和参数取决于类的具体实现和设计。需要查看FieldData类的定义文档或源代码以获取详细信息。"}
{"id": "TEST1-102", "output_field": "TuGraph-DB通过基于公开历史航班数据，帮助用户设计多个城市的最优航班规划，返回满足特定间隔时间和费用、飞行时间最短的路径规划，从而解决旅行路线选择的烦恼。"}
{"id": "TEST1-103", "output_field": "判断顶点或边是否具有某个字段。"}
{"id": "TEST1-104", "output_field": "最低配置是4个核心，建议配置是64个核心。"}
{"id": "TEST1-105", "output_field": "MappedVid 函数用于将视频数据映射到特定的处理或显示格式。它通常用于视频处理库或框架中，以优化视频数据的处理和显示效率。具体功能可能因不同库或应用而异。"}
{"id": "TEST1-106", "output_field": "会抛出异常。"}
{"id": "TEST1-107", "output_field": "不是。批量在线导入通常使用`LOAD CSV`或`UNWIND`等Cypher语句。`CREATE (n), (m)`仅创建两个独立的节点，不适用于批量导入。"}
{"id": "TEST1-108", "output_field": "`lgraph_backup` 工具的主要功能是备份 TuGraph 数据库中的数据到另一个目录下。"}
{"id": "TEST1-109", "output_field": "GET /db/{graph_name}/node/{vertex_id}/property"}
{"id": "TEST1-110", "output_field": "点、边、属性"}
{"id": "TEST1-111", "output_field": "TuGraph-DB支持存储过程，支持C++、Python和Rust语言编写存储过程。在性能上，C++语言支持的最为完整，性能最优。"}
{"id": "TEST1-112", "output_field": "获取边缘属性信息"}
{"id": "TEST1-113", "output_field": "TuGraph-DB 是一个高性能的图数据库，主要功能包括支持属性图模型、实时增删查改、多重图和子图、ACID 事务处理、点边索引、混合事务和分析处理（HTAP）、图查询语言（如 OpenCypher）、OLAP API 和图分析算法、C++/Python 存储过程、图可视化工具等。它还支持高吞吐率、大容量、高可用性、高性能批量导入和备份恢复。"}
{"id": "TEST1-114", "output_field": "RpcStatusException"}
{"id": "TEST1-115", "output_field": "预计2024年度功能更新将在年中推出HA支持Witness角色和管理工具。具体时间可能根据开发进度有所调整。请关注官方公告获取最新信息。"}
{"id": "TEST1-116", "output_field": "C++17"}
{"id": "TEST1-117", "output_field": "`Cython.cimports.libcpp.unordered_map` 是在Cython中用于导入C++标准库中的`unordered_map`容器的语句，允许在Cython代码中使用C++的哈希表实现。它主要用于提高数据结构的访问效率。需要确保Cython编译时链接了C++标准库。"}
{"id": "TEST1-118", "output_field": "TuGraph 数据预热命令需要指定 `-d {db_dir}` 和 `-g {graph_list}` 两个选项。"}
{"id": "TEST1-119", "output_field": "支持GQL语句，但TuGraph目前并未完全支持所有GQL语法，未来会逐步完善。"}
{"id": "TEST1-120", "output_field": "“log4j-core”的版本号是2.14.1，“guava”的版本号是31.0.1-jre。"}
{"id": "TEST1-121", "output_field": "SetUserGraphAccess方法用于设置指定用户在图上的访问级别。"}
{"id": "TEST1-122", "output_field": "在 TuGraph-DB 运行单元测试的过程中，可以通过设置环境变量 `LG_LOG_LEVEL` 来控制日志的输出等级。例如，设置为 `LG_LOG_LEVEL=DEBUG` 将输出所有等级的日志信息，包括 DEBUG 级别的详细日志。"}
{"id": "TEST1-123", "output_field": "使用 \"Nav\" 语句在 GeaBase 查询中的一种情况是进行数据库导航，定位到特定记录或相关数据集。例如，通过 \"Nav\" 语句可以从一个实体跳转到与其关联的另一个实体。这在处理复杂关系型数据时尤为有用。"}
{"id": "TEST1-124", "output_field": "TuGraph提供了通过pair unique索引查找关系边的接口。可以使用`db.findEdgeByIndex`接口根据pair unique索引的值快速定位到特定边，然后通过`db.updateEdge`接口更新对应的边数据。具体操作如下：\n\n```bash\nCALL db.findEdgeByIndex('edge_label', 'index_name', 'index_value')\nCALL db.updateEdge('edge_label', 'edge_id', {new_properties})\n```\n\n其中`edge_label`是边的标签，`index_name`是pair unique索引的名称，`index_value`是索引的值，`edge_id`是通过索引查找得到的边ID，`new_properties`是要更新的新属性值。"}
{"id": "TEST1-125", "output_field": "TuGraph Explorer 的功能已经合并到 TuGraph Browser 中，可以在 TuGraph Browser 的用户指南中找到相关功能。"}
{"id": "TEST1-126", "output_field": "SybilRank算法在执行过程中主要采用基于信任传播（Trust Propagation）的方式来进行计算，通过迭代更新节点的信任值，最终识别出正常用户和恶意用户。该方法利用网络结构中的信任关系，有效区分不同节点的可信度。计算过程中涉及信任值的初始化、传播和收敛等步骤。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中用于存储实体的具体信息和关系特征，增强图谱的表达能力，支持更精确的查询和分析，如员工的工号、雇佣时间等，使图谱能更细致地描述现实世界复杂关系。"}
{"id": "TEST1-128", "output_field": "在TuGraph项目中，提交代码前先提交一个issue的好处包括：避免与其他开发者的计划冲突，产生重复工作；让维护人员对提出的问题或新增功能进行讨论，确定修改的必要性及提升空间；在达成一致后再开发，减少沟通成本，降低pull request被拒绝的情况。"}
{"id": "TEST1-129", "output_field": "社区版适用于单实例部署，提供图数据库基础功能和成熟设计，支持TB级数据；企业版提供分布式集群架构，全生命周期图平台，支持流式大数据和多地部署，含专家支持服务，更适合商业化解决方案。"}
{"id": "TEST1-130", "output_field": "bfs_standalone程序的输出结果包括准备时间、核心计算时间、找到的顶点数、输出时间以及总时间，并以\"DONE.\"结尾。"}
{"id": "TEST1-131", "output_field": "当key_start和key_end等于v时，VertexIndexIterator会返回一个指向所有具有字段值为v的顶点的迭代器。"}
{"id": "TEST1-132", "output_field": "首先，在配置文件中指定顶点数据文件的路径、顶点标签和文件头行数。然后，定义列映射，将数据文件中的每一列映射到相应的顶点属性，并指定数据类型及是否为ID或可选字段。最后，使用导入工具根据配置文件将数据写入图数据库。"}
{"id": "TEST1-133", "output_field": "lgraph_api::Transaction 用于执行图数据库上的事务操作，确保操作的原子性，并提供 ACID 保证。"}
{"id": "TEST1-134", "output_field": "`ProcessVertexActive`函数执行时出现错误会引发`RuntimeError`异常。具体异常类型可能取决于函数内部实现和错误性质。如需详细信息，请参考函数文档或源代码。"}
{"id": "TEST1-135", "output_field": "字符串格式"}
{"id": "TEST1-136", "output_field": "localhost:9111"}
{"id": "TEST1-137", "output_field": "TuGraph的图分析引擎主要面向全图/全量数据分析类的任务。"}
{"id": "TEST1-138", "output_field": "若XML配置中表内属性字段名为id，应将node_id字段重命名为与id不冲突的名称，或使用别名区分，以避免报错。可在查询时使用AS关键字为node_id指定新名称。例如：SELECT node_id AS unique_node_id FROM table_name。"}
{"id": "TEST1-139", "output_field": "session.query(\"CALL db.createEdgeLabel('DIRECT', '[]')\", emptyMap());"}
{"id": "TEST1-140", "output_field": "可以统一返回结构，通过封装成对象或字典，例如返回 `{'name': p.name, 'age': p.age}`，使前端可视化页面处理一致的数据格式。这样，无论返回单个值 `n` 还是多个值 `p.name, p.age`，都能以统一的格式呈现。需确保后端逻辑适配这种封装方式。"}
{"id": "TEST1-141", "output_field": "在ARM机器（如Mac M1）上编译TuGraph时，需要在CMake命令中添加`-DENABLE_BUILD_ON_AARCH64=ON`参数。"}
{"id": "TEST1-142", "output_field": "CPU：Intel Core i7 或 AMD Ryzen 7\n内存：16GB RAM\n显卡：NVIDIA GeForce RTX 3060 或 AMD Radeon RX 6600 XT"}
{"id": "TEST1-143", "output_field": "可以使用图论中的搜索算法，如深度优先搜索（DFS）或广度优先搜索（BFS），来查询两点间的通路。在具体实现时，需构建图的邻接表或邻接矩阵，并从起点开始遍历直到找到终点。此外，也可以使用A*算法等启发式搜索方法提高效率。"}
{"id": "TEST1-144", "output_field": "TuGraph 支持通过 Cypher 语句修改 schema，例如创建标签、定义属性和索引等。目前不支持直接通过 Python 修改 schema。"}
{"id": "TEST1-145", "output_field": "TuGraph-Restful-Server 使用 brpc 框架支持其 HTTP 协议，并提供了文件上传、数据导入、导入进度查询、Cypher 查询和文件删除等主要功能。"}
{"id": "TEST1-146", "output_field": "禁用角色后，具有该角色的用户将不再从该角色中获得任何权限。"}
{"id": "TEST1-147", "output_field": "您应保证您依法有权授予上述许可，并保证下文附表A（该附表可通过书面方式进行后续更改）所指定的任意公司员工均有权以公司名义提交贡献内容。"}
{"id": "TEST1-148", "output_field": "使用命令 `CALL db.dropAllVertex()` 可以只删除所有点边数据，保留图schema。"}
{"id": "TEST1-149", "output_field": "OGM和MyBatis都用于简化数据库操作，提供对象关系映射功能，并支持动态SQL查询。它们都旨在减少手动编写JDBC代码的工作量，提高开发效率。此外，两者都允许开发者以更面向对象的方式操作数据库。"}
{"id": "TEST1-150", "output_field": "BROWSER 可以使用 Docker 进行部署。具体可以通过 Docker Hub 查找相关镜像或者使用 Dockerfile 自定义构建。需要确保系统已安装 Docker 并正确配置。"}
{"id": "TEST1-151", "output_field": "TuGraph-DB 提供了数据导入工具 `lgraph_import`。相关代码和工具的使用说明在提供的文档中有详细描述。"}
{"id": "TEST1-152", "output_field": "图数据库相较于关系型数据库具有以下独特优势：1. 性能：图数据库在处理关联关系时，可以直接访问关联数据，无需像关系型数据库那样进行表的JOIN操作，从而大大提高了查询效率。2. 兼容性：图数据库能够灵活地适应数据内容和格式的变化，只需添加新的点、边和属性，而无需像关系型数据库那样修改表结构或建立新表。3. 直观性：图数据库以图形方式表达现实世界的关系，使得数据查询和分析更加直观和自然，降低了理解和使用门槛。"}
{"id": "TEST1-153", "output_field": "TuGraph 产品架构中，客户端 SDK 支持 Java、Python、C++ 等多种语言。"}
{"id": "TEST1-154", "output_field": "WKT和WKB格式"}
{"id": "TEST1-155", "output_field": "导入点或边数据。"}
{"id": "TEST1-156", "output_field": "TuGraph企业版是TuGraph图数据库的商业化版本，它提供了比社区版更完善的商业化功能，包括分布式集群架构、覆盖探索、研发、服务、运维管理全生命周期的一站式图平台、在线、近线、离线的图计算引擎、支持流式、大数据类数据源、多地多中心的部署形态，以及专家支持服务等。企业版是针对需要商业支持的大型项目和企业的理想选择。"}
{"id": "TEST1-157", "output_field": "GET, /db/{graph_name}/cpp_plugin|python_plugin"}
{"id": "TEST1-158", "output_field": "TuGraph的基础算法包包含广度优先搜索、网页排序、单源最短路径、弱连通分量、平均集聚系数和标签传播算法。"}
{"id": "TEST1-159", "output_field": "REST 服务器的默认端口号是 7070。"}
{"id": "TEST1-160", "output_field": "调用 `POST /role/{role_name}/disable` 函数，当操作成功时返回 true。"}
{"id": "TEST1-161", "output_field": "不会丢失。TuGraph提供了数据迁移方案，包括兼容迁移、升级迁移和在线迁移，确保数据在更新过程中得到妥善处理和迁移。"}
{"id": "TEST1-162", "output_field": "如果节点中未包含属性\"belt\"，应该返回`null`。"}
{"id": "TEST1-163", "output_field": "磁盘IO警报通常在磁盘读写操作延迟过高、IOPS（每秒输入输出操作数）超过阈值或磁盘故障时触发。这些情况可能影响系统性能和数据完整性。具体触发条件取决于系统设置和监控工具的配置。"}
{"id": "TEST1-164", "output_field": "调用 Close() 函数后，InEdgeIterator 变为无效状态。"}
{"id": "TEST1-165", "output_field": "DUAL_DIRECTION表示输入文件为非对称图，加载后图也是非对称的。"}
{"id": "TEST1-166", "output_field": "当指定的顶点ID不存在，并且nearest参数为true时，Goto函数将尝试获取在指定顶点ID之后排序的下一个边。如果不存在这样的边，迭代器将变为无效。"}
{"id": "TEST1-167", "output_field": "found_vertices = 3829"}
{"id": "TEST1-168", "output_field": "24小时"}
{"id": "TEST1-169", "output_field": "在GetEdgeProp命令中，要查找特定时间戳的边属性，可以使用`timestamp`参数并指定相应的时间戳值。例如，`GetEdgeProp -e edge_type -v vertex_id -timestamp \"2023-01-01T00:00:00Z\"`。确保时间戳格式符合系统要求。"}
{"id": "TEST1-170", "output_field": "TuGraph Browser 默认的端口号是 7070。"}
{"id": "TEST1-171", "output_field": "TuGraph-DB支持运行图算法。它内置了多种图算法，如BFS、PageRank、LPA和WCC等，用户可以通过TuGraph的C++图分析引擎API或Python插件来执行这些算法。例如，用户可以通过编写C++代码或Python脚本，使用TuGraph提供的API来运行BFS算法，从而实现图数据的广度优先搜索。"}
{"id": "TEST1-172", "output_field": "Python存储过程接口包含以下重要组件和功能：\n\n1. **AccessLevel**：定义用户对图数据的访问级别，包括无访问(NONE)、读取(READ)、写入(WRITE)和完全访问(FULL)。\n\n2. **EdgeUid**：边标识符，包含边的源顶点ID(src)、目标顶点ID(dst)、边ID(eid)、边的标签ID(lid)和时间ID(tid)。\n\n3. **FieldData**：字段数据类型，提供了一系列方法来获取字段的值，如AsBlob、AsBool、AsDate等，这些方法会根据字段的数据类型返回相应的值。\n\n4. **存储过程加载**：支持加载用Python编写的存储过程，可以通过`LoadProcedure`函数实现。\n\n5. **存储过程列举**：可以通过`ListProcedures`函数获取已加载的存储过程列表。\n\n6. **存储过程调用**：在HA模式下，可以通过`callProcedureToLeader`函数向leader节点调用存储过程。\n\n7. **存储过程删除**：可以通过`deleteProcedure`函数删除已加载的存储过程。\n\n8. **Schema字节流中导入schema**：可以通过`importSchemaFromContent`函数从字节流中导入schema。"}
{"id": "TEST1-173", "output_field": "成功返回True，失败返回False。"}
{"id": "TEST1-174", "output_field": "TuGraph 中复杂图分析操作需要先导出图数据的快照，然后在该快照上执行。这些操作通常是全图的多轮数据迭代操作，如 PageRank 和 Louvain 算法。"}
{"id": "TEST1-175", "output_field": "filter_output_default函数的主要作用是过滤并返回默认输出值，确保输出符合预期格式或标准，避免无效或错误数据的返回。"}
{"id": "TEST1-176", "output_field": "在Java运行时，配置MyBatis Generator的XML文件中的`targetProject`属性时，应指定生成文件的输出目录，通常为项目的源代码目录，例如`src/main/java`。确保路径是相对于当前工作目录的相对路径或绝对路径。此外，`targetProject`的值应与项目的实际结构相匹配。"}
{"id": "TEST1-177", "output_field": "`@Property(\"class\")`注解指定了数据库中的字段名为\"class\"。"}
{"id": "TEST1-178", "output_field": "在TuGraph中，目前不支持直接通过Cypher语句删除图中的重复关系。需要使用其他方法，例如编写自定义脚本或使用图数据库提供的API进行处理。建议查阅TuGraph官方文档获取更详细的解决方案。"}
{"id": "TEST1-179", "output_field": "在默认情况下，第一次快照的时间设置为在0到ha_snapshot_interval_s内的任一时刻随机打第一次snapshot。"}
{"id": "TEST1-180", "output_field": "需要标注作品来源的完整细节、您个人所知悉的任何许可或其他限制（包括相关专利、商标和许可协议），并以显著方式标明“以第三方名义提交：【填写姓名】”。"}
{"id": "TEST1-181", "output_field": "web端导入点数据后，查询方式不同可能导致数据筛选、排序或处理逻辑有差异，从而结果不同。检查查询条件和数据处理流程，确保一致性。如问题依旧，需详细排查系统或代码逻辑。"}
{"id": "TEST1-182", "output_field": "对象图映射（OGM）支持将JAVA对象（POJO）映射到TuGraph中，其中JAVA中的类映射为图中的节点、类中的集合映射为边、类的属性映射为图对象的属性，并提供了对应的函数操作图数据库。"}
{"id": "TEST1-183", "output_field": "```python\nclient = liblgraph_client_python.client(\"127.0.0.1:19099\", \"admin\", \"73@TuGraph\")\n```"}
{"id": "TEST1-184", "output_field": "非法角色名会导致 `GetRoleInfo` 函数抛出 \"ArgumentException\"。"}
{"id": "TEST1-185", "output_field": "TuGraph目前提供云部署、Docker部署以及安装包部署三种部署方式。"}
{"id": "TEST1-186", "output_field": "Corin Redgrave"}
{"id": "TEST1-187", "output_field": "可以继续导入。如果设置了`continueOnError`为true，遇到错误时会跳过错误数据并继续导入。如果导入失败，可以通过修改数据并使用`--skip_packages N`选项跳过已导入的包重新导入。"}
{"id": "TEST1-188", "output_field": "使用[ResetHeader]方法为表设置表头。"}
{"id": "TEST1-189", "output_field": "蚂蚁集团的个人贡献者许可协议主要目的是明确个人贡献者向蚂蚁集团项目提交文档和软件代码时所授予的知识产权许可，确保贡献者同意相关许可条款，并保留其对贡献内容的权利。"}
{"id": "TEST1-190", "output_field": "不包含Java、Python相关功能，无C++ plugin编译运行，仅支持so上传。"}
{"id": "TEST1-191", "output_field": "OlapOnDB API文档中介绍的Procedure及Embed主要使用了以下辅助函数：获取数据快照、使用BSP计算模型进行并行计算、PageRank算法主流程等。"}
{"id": "TEST1-192", "output_field": "'密码太短'、'密码强度不足'、'密码已存在'异常可能会被抛出。"}
{"id": "TEST1-193", "output_field": "使用 `liblgraph_python_api.Galaxy` 类的 `CreateUser` 方法创建一个新的用户账户。需要提供用户名、密码和描述信息。"}
{"id": "TEST1-194", "output_field": "调用 `DeleteVertexLabel(self: liblgraph_python_api.GraphDB, label_name: str) → int` 方法可以删除一个顶点标签。"}
{"id": "TEST1-195", "output_field": "无任何权限。"}
{"id": "TEST1-196", "output_field": "TuGraph的可视化监控主要使用了TuGraph Monitor、Prometheus和Grafana这三个软件。"}
{"id": "TEST1-197", "output_field": "TuGraph 服务从配置文件中读取其配置，该配置文件通常位于项目的根目录下，名为 `config.yaml`。"}
{"id": "TEST1-198", "output_field": "`selectVertex`方法的超时设置是5000毫秒。"}
{"id": "TEST1-199", "output_field": "PathTraversal 类中展开当前前沿的操作可以使用以下类型的过滤函数：\n\n1. `out_edge_filter`：针对出边的过滤函数，参数包括出边迭代器、路径和迭代器辅助工具。\n2. `in_edge_filter`：针对入边的过滤函数，参数包括入边迭代器、路径和迭代器辅助工具。\n3. `out_neighbour_filter`：针对出边邻居点的过滤函数，参数包括邻居点迭代器、路径和迭代器辅助工具。\n4. `in_neighbour_filter`：针对入边邻居点的过滤函数，参数包括邻居点迭代器、路径和迭代器辅助工具。"}
{"id": "TEST1-200", "output_field": "WriteNotAllowed"}
{"id": "TEST1-201", "output_field": "Python编写的UDF模块通常放在Spark的`/usr/lib/spark/python/lib/pyspark.zip`目录中，或者根据具体配置放置在相应的Python库路径下。这样可以确保Spark能够正确加载和执行这些自定义函数。具体路径可能因系统配置而异。"}
{"id": "TEST1-202", "output_field": "在文本中，资源名称“重要通知”对应的颜色设置为固定的“light-orange”。"}
{"id": "TEST1-203", "output_field": "在大多数系统中，删除导入图库的数据通常需要进入图库管理界面，选择要删除的图片或数据，然后执行删除操作。具体步骤可能因软件或平台不同而有所差异。建议查阅相关软件的帮助文档或联系技术支持获取详细指导。"}
{"id": "TEST1-204", "output_field": "当使用 TuGraph 批量创建边时，如果请求成功，响应中将返回新建立的边的 euid 列表。"}
{"id": "TEST1-205", "output_field": "TuGraph选择使用B+树作为其底层存储数据结构，主要是因为B+树具有较好的顺序读写性能，能够均衡处理硬盘的顺序操作和随机操作，适合读操作频繁的场景。相比之下，LSM树虽然在随机写方面占优，但其后台合并方式导致性能波动难以预期，增加了设计成本。TuGraph注重读性能，因此选用B+树以优化整体性能表现。"}
{"id": "TEST1-206", "output_field": "接口 \"CallProcedureToLeader\" 支持通过设置参数 \"json_format\" 来改变返回结果的格式。"}
{"id": "TEST1-207", "output_field": "优化查询语句，使用索引和缓存，减少数据冗余。"}
{"id": "TEST1-208", "output_field": "当FieldData的类型不是INT8、INT16、INT32或INT64时，integer()方法会抛出std::bad_cast异常。"}
{"id": "TEST1-209", "output_field": "TuGraph-DB 使用了 KV 数据库作为存储引擎，基于 LMDB 构建。"}
{"id": "TEST1-210", "output_field": "新版browser-resource可能尚未发布或未更新到你的系统中。检查更新或联系技术支持获取最新版本。若需切换新旧版本，可在浏览器设置或开发者工具中查找版本切换选项。"}
{"id": "TEST1-211", "output_field": "在提供的上下文中，没有明确提及TuGraph在进行大规模数据查询时是否对图数据进行了压缩。因此，无法确定TuGraph是否采用了数据压缩技术。"}
{"id": "TEST1-212", "output_field": "TuGraph选择使用B+树作为其存储数据结构。主要原因在于B+树具有较好的顺序读写性能，且读性能在整体性能中占比更高，适合TuGraph读性能优先的设计需求。相比之下，LSM树虽然随机写性能占优，但性能波动难以预期，增加了设计成本。"}
{"id": "TEST1-213", "output_field": "很抱歉，根据提供的文档内容，无法确定TuGraph-DB使用的boost库的具体版本。建议查阅相关安装文档或源码配置文件以获取详细信息。"}
{"id": "TEST1-214", "output_field": "TuGraph适合新手、系统开发者、生产运维人员、研究人员等不同需求的用户。"}
{"id": "TEST1-215", "output_field": "POST请求主要用于创建实体、提交Cypher查询以及加载和调用存储过程。"}
{"id": "TEST1-216", "output_field": "外存配置的最低要求是100GB，建议配置是2TB NVMe SSD。"}
{"id": "TEST1-217", "output_field": "自动创建目录。"}
{"id": "TEST1-218", "output_field": "VertexIterator 的 GetNumOutEdges 方法默认的 n_limit 参数值是 18446744073709551615。"}
{"id": "TEST1-219", "output_field": "10"}
{"id": "TEST1-220", "output_field": "在生成Mapper接口时，XMLMAPPER类型通过XML配置文件来实现接口方法。具体来说，XML文件中定义了SQL语句及其映射关系，MyBatis框架会根据这些配置在运行时动态生成接口的实现。这种方式无需手动编写接口实现类，简化了开发过程。"}
{"id": "TEST1-221", "output_field": "图卷积网络（GCN）的主要组成部分包括图卷积层、激活函数和池化层。图卷积层用于提取图结构特征，激活函数引入非线性，池化层用于降低维度并聚合信息。这些组件共同作用，实现对图数据的有效处理。"}
{"id": "TEST1-222", "output_field": "gtest框架"}
{"id": "TEST1-223", "output_field": "TuGraph 支持使用 Cypher 查询语言来查找子图，并可以在该子图上运行图分析算法，如 PageRank 和 KCore 等。"}
{"id": "TEST1-224", "output_field": "文档中未提及HA集群的snapshot删除时间。"}
{"id": "TEST1-225", "output_field": "TuGraph-DB 目前支持 OpenCypher 查询语言，并计划在将来支持 ISO GQL 国际标准查询语言。"}
{"id": "TEST1-226", "output_field": "没有开启事务和结束事务的关键字。"}
{"id": "TEST1-227", "output_field": "使用POST方法访问`/role`接口，在请求体中提供角色名和描述信息。例如，发送以下请求创建名为`new_role`的角色，描述为`This is a new role.`：\n\n```\nPOST http://localhost:7070/role\nAccept: application/json; charset=UTF-8\nContent-Type: application/json; charset=UTF-8\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\nInput:\n{\n    \"role\": \"new_role\",\n    \"description\": \"This is a new role.\"\n}\n```"}
{"id": "TEST1-228", "output_field": "不支持"}
{"id": "TEST1-229", "output_field": "在Java运行时，若需配置`targetProject`，应在xml配置文件的相应标签内添加`targetProject`属性，并指定其值为目标项目的路径。例如：`<configuration><targetProject>/path/to/project</targetProject></configuration>`。确保路径正确且符合项目结构。"}
{"id": "TEST1-230", "output_field": "HA支持Witness角色和管理工具"}
{"id": "TEST1-231", "output_field": "在调用 \"CallGql\" 接口时，通常在请求参数中指定图的名称，具体参数名称可能因接口设计而异，常见的参数名为 \"graphName\" 或 \"graph_id\"。请参考接口文档确认具体参数名。例如，请求参数中可能包含 \"graphName\": \"exampleGraph\"。"}
{"id": "TEST1-232", "output_field": "是的，图分析中选中一个点数据或边数据后，会在右边栏展示对应的属性信息。"}
{"id": "TEST1-233", "output_field": "TuGraph-DB兼容Neo4j的通讯协议，因此可以使用Neo4j的驱动连接TuGraph-DB的server。"}
{"id": "TEST1-234", "output_field": "在导入数据后，如果查询不到设置了属性的边数据，可能是因为数据映射设置不正确，导致属性没有被正确地导入到对应的边中。请检查数据映射配置，确保数据文件中的列正确地映射到了边的属性上。"}
{"id": "TEST1-235", "output_field": "在 \"TuGraph-DataX\" 项目中，通过创建一个 DataX 的 job 配置文件，比如 `job_actors.json`，其中指定读取 `actors.csv` 文件的路径、编码方式、字段分隔符等，并设置 TuGraph 的连接信息、图名称、标签类型、属性等，然后使用 `python3 datax/bin/datax.py job_actors.json` 命令执行导入操作。"}
{"id": "TEST1-236", "output_field": "创建新子图时通常需要以下参数：子图数量、子图排列方式（如行数和列数）、当前子图索引。此外，还可以指定子图之间的间距和子图的大小。具体参数可能因使用的绘图库（如Matplotlib）而有所不同。"}
{"id": "TEST1-237", "output_field": "通过比较原始数据库和重新导入后的数据库中的数据内容，验证一致性。具体步骤包括：1. 导出原始数据库数据；2. 将导出的数据导入新的数据库；3. 分别从原始数据库和新数据库中查询相同的数据，对比查询结果是否相同。"}
{"id": "TEST1-238", "output_field": "Work函数在处理节点vi时，返回值代表节点vi的出度，即节点vi的所有出度邻居的数量。"}
{"id": "TEST1-239", "output_field": "TuGraph Explorer 的功能现在可以在 TuGraph Browser 中找到。"}
{"id": "TEST1-240", "output_field": "新增加的点的 vid 列表"}
{"id": "TEST1-241", "output_field": "TuGraph能够支持混合检索，可以同时使用向量数据库和图数据库进行查询。"}
{"id": "TEST1-242", "output_field": "TuGraph 数据预热的主要目的是通过预先加载数据到内存中，以减少服务器启动后由于频繁的IO操作导致的性能下降问题。"}
{"id": "TEST1-243", "output_field": "源顶点的ID"}
{"id": "TEST1-244", "output_field": "`OPTIONAL MATCH`子句用于在图中进行可选匹配，允许查询结果中包含不满足匹配条件的部分，避免因部分数据缺失而导致整个查询失败。它常用于处理图中可能不存在的边或节点的情况，确保查询结果的完整性。"}
{"id": "TEST1-245", "output_field": "GraphDB实例无法使用的情况可能包括：服务器或数据库服务未启动、网络连接问题、配置文件错误、资源耗尽（如内存或磁盘空间不足）、软件版本不兼容或数据损坏。需要检查系统日志和配置以确定具体原因。有时，重启服务或更新配置可解决问题。"}
{"id": "TEST1-246", "output_field": "TuGraph 运行需要保证库文件 liblgraph.so 的文件位置在环境变量 LD_LIBRARY_PATH 中。"}
{"id": "TEST1-247", "output_field": "当GetNumOutEdges函数达到指定的n_limit限制时，它会返回n_limit的值，并将more_to_go参数设置为true，以指示还有更多的出边未计数。"}
{"id": "TEST1-248", "output_field": "在每次迭代中，BFS算法通过将当前层的顶点标记为已访问，并将其邻接且未访问的顶点加入下一层，从而更新活跃顶点数量。活跃顶点数量即为当前层中未处理的顶点数。随着迭代的进行，活跃顶点数量会动态变化，直到所有顶点都被访问。"}
{"id": "TEST1-249", "output_field": "64"}
{"id": "TEST1-250", "output_field": "PUT 用于修改角色，POST 用于启用角色。"}
