{"id": "TEST1-1", "output_field": "如果指定的值不包含在value_dict中，这些字段将被视为null。"}
{"id": "TEST1-2", "output_field": "Christopher Nolan, Corin Redgrave"}
{"id": "TEST1-3", "output_field": "使用GET方法访问`/role/`接口，并携带有效的管理员授权令牌，即可查询数据库中所有角色及其相关信息。请求示例：`GET http://localhost:7070/role`，响应中将包含所有角色的详细信息。"}
{"id": "TEST1-4", "output_field": "每个图项目存储最多2^(40)个点数据和2^(32)条边数据。每个点或边类型的属性数量最多为1024。"}
{"id": "TEST1-5", "output_field": "可能是在容器启动后没有进入正确的目录。请检查是否需要使用 `cd` 命令切换到包含 `setup.sh` 脚本的目录。如果不确定，可以查看容器启动日志或镜像文档确认正确路径。"}
{"id": "TEST1-6", "output_field": "在启动 TuGraph 服务器时，使用 `lgraph_server -d start` 的方式会在当前工作目录（pwd）下生成一个 `.pid` 文件，该文件包含了启动的服务进程的进程ID。目前没有参数可以控制 `.pid` 文件的生成路径。"}
{"id": "TEST1-7", "output_field": "如果在ARM机器（如M1芯片的Mac）编译TuGraph，应该在cmake命令中加上 `-DENABLE_BUILD_ON_AARCH64=ON` 参数。"}
{"id": "TEST1-8", "output_field": "启动参数中cleanup_dir指定的目录用于在函数执行完成后进行清理操作。"}
{"id": "TEST1-9", "output_field": "启动 TuGraph 的命令是 `lgraph_server -d start -c lgraph_daemon.json`。"}
{"id": "TEST1-10", "output_field": "TuGraph团队通过改变关键数据的ownership来解除对锁的依赖，并通过“只调用一次”（`call_once`）手段将成本均摊，从而降低了时间成本。"}
{"id": "TEST1-11", "output_field": "中止一个正在执行的任务时，应该使用 DELETE HTTP请求方法。"}
{"id": "TEST1-12", "output_field": "AllocVertexSubset函数用于分配一个用ParallelBitset表示的顶点子集，其大小与图中顶点数相同。"}
{"id": "TEST1-13", "output_field": "检查网络连接和数据格式，确保数据未损坏且符合导入要求；增加服务器资源或分批次导入以减轻负载；查看错误日志，联系技术支持获取具体解决方案。"}
{"id": "TEST1-14", "output_field": "TuGraph支持CSV和JSON两种导出格式。"}
{"id": "TEST1-15", "output_field": "TuGraph调优还可以通过优化查询语句的逻辑结构、调整数据库配置参数、使用索引和分区等手段进行。此外，合理管理内存和并发控制也是提高性能的关键。定期进行系统维护和数据清理也有助于提升运行效率。"}
{"id": "TEST1-16", "output_field": "url、user、password"}
{"id": "TEST1-17", "output_field": "在Python中，通过`from cython.cimports.olap_base import *`导入Olap相关模块，图数据库模块的导入方式未在文档中明确说明。"}
{"id": "TEST1-18", "output_field": "'unique'参数指定索引是否唯一，即该字段值在所有边中不能重复；'pair_unique'参数指定索引是否为对唯一，即对于每对起点和终点，该字段值不能重复。"}
{"id": "TEST1-19", "output_field": "图数据库在处理关联关系上比关系型数据库有显著优势，它能够直接访问关联数据，性能高出2到4个数量级。此外，图数据库在数据模型变化时更为灵活，仅需添加新的点、边和属性，而无需像关系型数据库那样修改表结构。图数据库的表达方式也更直观，通过点边连接的拓扑结构即可找到所需数据，无需专业知识。"}
{"id": "TEST1-20", "output_field": "是的，报错信息表明属性值 [xxx] 过长，超出了唯一索引的限制。需要缩短该属性值以满足索引长度要求。"}
{"id": "TEST1-21", "output_field": "400"}
{"id": "TEST1-22", "output_field": "TuGraph为不同需求的用户提供了编译环境、运行环境和精简运行环境三种类型的系统环境。"}
{"id": "TEST1-23", "output_field": "TuGraph-DB新增支持的空间数据类型包括：POINT、LINESTRING、POLYGON。"}
{"id": "TEST1-24", "output_field": "extra"}
{"id": "TEST1-25", "output_field": "leader"}
{"id": "TEST1-26", "output_field": "WriteNotAllowed"}
{"id": "TEST1-27", "output_field": "GetVertexIndexIterator函数在liblgraph_python_api.Transaction中用于获取索引迭代器。"}
{"id": "TEST1-28", "output_field": "是的，db.importor.dataImportor 函数可以指定错误继续执行和线程数。通过设置相关参数，如 `ignoreErrors` 和 `threadCount`，可以控制错误处理和并行导入的线程数量。具体参数配置需参考函数文档。"}
{"id": "TEST1-29", "output_field": "get_vertex"}
{"id": "TEST1-30", "output_field": "WriteNotAllowed"}
{"id": "TEST1-31", "output_field": "当节点的出度大于0时，pagerank值初始化为1除以节点总数，然后除以该节点的出度。"}
{"id": "TEST1-32", "output_field": "TuGraph支持将数据导出为csv和json格式。"}
{"id": "TEST1-33", "output_field": "数组越界错误，读取所需大小为4，实际大小为2。请检查数据文件或导入工具的配置，确保数据格式和大小匹配。"}
{"id": "TEST1-34", "output_field": "只读的"}
{"id": "TEST1-35", "output_field": "CSV文件中的栏位名称需与配置文件中的columns字段中的名称相匹配，确保数据正确导入。通常，配置文件会列出预期的栏位顺序或名称。若不匹配，可能需要调整CSV文件或配置文件以确保对应关系。"}
{"id": "TEST1-36", "output_field": "顶点标签、文件头行数、列映射（包括字段名称、数据类型及是否为ID或可选）"}
{"id": "TEST1-37", "output_field": "TuGraph Browser 的默认端口号是 7070。"}
{"id": "TEST1-38", "output_field": "计算图表中显示的值的方法通常取决于具体的配置设置，可能包括聚合函数（如求和、平均值等）或自定义的计算公式。具体方法需参考配置文件或相关文档。如果未提供详细配置信息，无法确定具体计算方法。"}
{"id": "TEST1-39", "output_field": "TuGraph是由蚂蚁集团与清华大学联合研发的。"}
{"id": "TEST1-40", "output_field": "图学习系统是解决图学习问题的，比如TuGraph Learn、DGL等。"}
{"id": "TEST1-41", "output_field": "`GetVertexByUniqueCompositeIndex` 函数需要的参数有：标签名（`label_name`），字段名列表（`field_name`），以及字段值列表（`field_value_string`）。"}
{"id": "TEST1-42", "output_field": "在TuGraph中，可以通过配置文件或命令行设置`rpc_port`参数来配置RPC端口。在配置文件中，添加或修改`\"rpc_port\": <端口号>`；在命令行中，使用`--rpc_port <端口号>`选项。默认端口为9090。"}
{"id": "TEST1-43", "output_field": "图数据库在处理关联关系时相比关系型数据库的优势主要体现在性能、兼容性和直观性三个方面。性能上，图数据库通过直接访问类指针，避免了关系型数据库中的JOIN操作，从而在处理关联关系时效率更高，性能提升可达2到4个数量级。兼容性方面，图数据库能够灵活地适应数据内容和格式的变化，只需添加新的点、边和属性，而不需要像关系型数据库那样修改表结构。直观性上，图数据库通过点和边的连接，直观地表达了现实世界中的关系，使得分析和查询更为直接和自然。"}
{"id": "TEST1-44", "output_field": "默认的登录密码是：73@TuGraph。"}
{"id": "TEST1-45", "output_field": "field_value_strings参数的数据类型是`std::vector<std::string>`。"}
{"id": "TEST1-46", "output_field": "TuGraph-DB和TuGraph Analytics可以独立运行，但它们也可以协同工作以提高图数据处理和分析的能力。"}
{"id": "TEST1-47", "output_field": "\"urls\", \"user\", \"password\""}
{"id": "TEST1-48", "output_field": "使用 lgraph_cypher 工具在命令行中以单命令模式提交一条 Cypher 查询并保存结果，可以通过以下步骤完成：\n\n1. 首先，确保已经安装了 lgraph_cypher 工具。\n2. 打开命令行终端。\n3. 使用 `-s` 参数指定单行 Cypher 查询命令，使用 `-f` 参数指定保存结果的文件路径。例如：\n\n```powershell\n$ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" -f /home/usr/query_results.txt\n```\n\n在这个例子中，`-c` 参数指定了数据库的配置文件路径，`-u` 和 `-P` 参数分别指定了数据库的用户名和密码，`-s` 参数后跟的是要执行的 Cypher 查询命令，`-f` 参数后跟的是查询结果要保存的文件路径。\n\n执行上述命令后，Cypher 查询的结果将会被保存到指定的文件中。"}
{"id": "TEST1-49", "output_field": "数据和日志目录的持久化位置在宿主机的`/root/tugraph/`目录下。"}
{"id": "TEST1-50", "output_field": "1. 通过点 ID 直接指定单个起始点（`SetFrontier(size_t root_vid)`）。\n2. 通过点 ID 列表直接指定多个起始点（`SetFrontier(ParallelVector & root_vids)`）。\n3. 通过用户自定义的过滤函数指定起始点集，类似于 `FindVertices` 方法（`SetFrontier(std::function root_vertex_filter)`）。"}
{"id": "TEST1-51", "output_field": "设置对象字段的值。"}
{"id": "TEST1-52", "output_field": "蚂蚁集团图计算团队"}
{"id": "TEST1-53", "output_field": "精简运行环境不需要任何系统库。"}
{"id": "TEST1-54", "output_field": "函数 `SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)` 通过参数 `root_vertex_filter` 设置初始前沿。该参数是一个过滤函数，对每个顶点进行判断，若返回 `true` 则将该顶点加入初始前沿集合。"}
{"id": "TEST1-55", "output_field": "包含。rpm包通常包含软件的所有必需文件，包括新版前端页面资源。具体内容需查看rpm包的文件列表确认。"}
{"id": "TEST1-56", "output_field": "启动镜像 tugraph-runtime-centos7 大约需要 4GB 内存和 100GB 硬盘空间。具体资源消耗可能因实际使用情况而有所不同。建议配置更高资源以获得最佳性能。"}
{"id": "TEST1-57", "output_field": "创建组合索引时，需要提供以下参数：\n1. 索引类型（唯一索引或非唯一索引）\n2. 属性个数（2到16个之间）\n3. 各属性名称及其长度，确保总长度符合唯一索引或非唯一索引的长度限制"}
{"id": "TEST1-58", "output_field": "InvalidTxn"}
{"id": "TEST1-59", "output_field": "TuGraphClient是TuGraph数据库的Python客户端库，用于通过RESTful或RPC方式与TuGraph服务器进行交互，支持调用Cypher查询和存储过程。"}
{"id": "TEST1-60", "output_field": "TuGraph 支持X86_64和ARM64架构的硬件平台。"}
{"id": "TEST1-61", "output_field": "是的，前两个参数`personDesc`和`person`的格式与执行导入脚本时的格式相同。`personDesc`是数据格式描述，`person`是要导入的数据内容。"}
{"id": "TEST1-62", "output_field": "类中的集合映射为边类型，类的属性映射为边的属性。"}
{"id": "TEST1-63", "output_field": "当前 DateTime 对象不会被修改，并会抛出 OutOfRange 异常。"}
{"id": "TEST1-64", "output_field": "1. GraphDB有效。\n2. 具有写权限。\n3. 添加的字段不存在且默认值类型兼容。"}
{"id": "TEST1-65", "output_field": "EdgeData类型的数值。"}
{"id": "TEST1-66", "output_field": "RPC（远程过程调用）是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-67", "output_field": "在TuGraph中，主键是用户自定义的点数据唯一标识，用于确保在对应点类型中的唯一性，默认作为唯一索引。"}
{"id": "TEST1-68", "output_field": "RpcException是用于处理RPC相关错误的异常类型。"}
{"id": "TEST1-69", "output_field": "不支持。match语句通常用于模式匹配，一次只能设置一个属性。如需设置多个属性，需使用多个match语句或结合其他语法结构。"}
{"id": "TEST1-70", "output_field": "TuGraph团队针对Antlr4的C++ target进行了并发性能优化，通过改变关键数据的所有权来减少对锁的依赖，从而解决了数据竞争问题。这一优化使得Antlr4 C++ target的并发性能提升了超过10倍，显著提高了图数据库查询语言的处理能力。"}
{"id": "TEST1-71", "output_field": "TuGraph要求每个节点或关系有且只有一个标签，如果没有标签会报错，如果有多个标签则取第一个作为标签。OpenCypher允许一个节点或关系有0到多个标签。"}
{"id": "TEST1-72", "output_field": "True"}
{"id": "TEST1-73", "output_field": "TuGraph Analytics 支持窗口函数。通过高阶API中的Window抽象，统一了流处理（无界Window）和批处理（有界Window），提供了相应的窗口函数支持。"}
{"id": "TEST1-74", "output_field": "字符串格式"}
{"id": "TEST1-75", "output_field": "SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)"}
{"id": "TEST1-76", "output_field": "无法确定GeaBase的主要部署方式所需时间，因未提供具体部署环境和配置信息。"}
{"id": "TEST1-77", "output_field": "点和边"}
{"id": "TEST1-78", "output_field": "TuGraph 支持多种编程语言的 SDK，包括 Java、Python 和 C++。此外，TuGraph 还提供了 OGM（Object Graph Mapping）工具，用于将 Java 对象映射到图数据库中。"}
{"id": "TEST1-79", "output_field": "通过 `res.mutable_plugin_response()->mutable_list_plugin_response()->reply()` 获取存储过程响应的列表。"}
{"id": "TEST1-80", "output_field": "RPC接口是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-81", "output_field": "acted_in, directed, TYPE WITH SPACE"}
{"id": "TEST1-82", "output_field": "启动 TuGraph 服务器的命令是 `./lgraph_server -d start -c lgraph.json`。"}
{"id": "TEST1-83", "output_field": "抛出异常"}
{"id": "TEST1-84", "output_field": "TuGraph 支持 X86_64 和 ARM64 架构的硬件平台。"}
{"id": "TEST1-85", "output_field": "TuGraph-OGM通过将JAVA对象（POJO）映射到TuGraph中，支持JAVA开发人员进行图对象映射。JAVA中的类映射为图中的节点、类中的集合映射为边、类的属性映射为图对象的属性，并提供了对应的函数操作图数据库，使得JAVA开发人员可以在熟悉的生态中轻松地使用TuGraph数据库。"}
{"id": "TEST1-86", "output_field": "`OPTIONAL MATCH`在GQL中用于搜索可能不存在的匹配模式，允许查询结果中包含缺失的部分，而不影响整个查询的执行。它常用于处理图中不完整或不一致的数据。"}
{"id": "TEST1-87", "output_field": "通过`loadProcedure`方法中的`readOnly`参数控制存储过程是否为只读。"}
{"id": "TEST1-88", "output_field": "RpcStatusException"}
{"id": "TEST1-89", "output_field": "swap_id函数在Transform操作中用于交换两个元素的ID。它常用于数据处理中调整元素位置。具体实现取决于所使用的编程语言或库。"}
{"id": "TEST1-90", "output_field": "查询影片 'Forrest Gump' 的所有演员以及他们扮演的角色，可以使用以下Cypher查询语句：\n\n```\nMATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name, r.role\n```"}
{"id": "TEST1-91", "output_field": "TuGraph-DB图数据库社区版内置了6种基础算法。"}
{"id": "TEST1-92", "output_field": "TuGraph-DB支持的三种空间数据类型是Point（点）、Linestring（折线）和Polygon（多边形）。"}
{"id": "TEST1-93", "output_field": "支持麒麟操作系统，但具体支持版本（如是否仅限企业版）需查看产品官方说明。"}
{"id": "TEST1-94", "output_field": "TuGraph-DB中存储Point类型数据使用EWKB格式。"}
{"id": "TEST1-95", "output_field": "TuGraph嵌入模式的API允许用户打开或创建数据库，然后查询或修改数据库。"}
{"id": "TEST1-96", "output_field": "1970/1/1"}
{"id": "TEST1-97", "output_field": "如果给定的 vertex_label 或 field 不存在，函数会抛出 InputError 异常。"}
{"id": "TEST1-98", "output_field": "在单命令模式下，使用 lgraph_cypher 执行 Cypher 查询并显示结果为表格格式，可以通过以下命令行参数组合来完成：\n\n```powershell\n$ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" -format table\n```\n\n这里 `-s` 参数后跟具体的 Cypher 查询语句，而 `-format` 参数设置为 `table` 以指定结果以表格格式显示。"}
{"id": "TEST1-99", "output_field": "`reduce_plus`函数对两个参数进行累加操作。"}
{"id": "TEST1-100", "output_field": "不支持无向边，但可以通过创建两个方向相反的有向边来模拟无向边。"}
{"id": "TEST1-101", "output_field": "FieldData类提供了多个构造函数来初始化不同类型的数据，具体包括初始化基本数据类型的构造函数、初始化复合数据类型的构造函数以及从其他数据源进行数据拷贝的构造函数。每个构造函数根据参数类型和数量来区分，以满足不同数据初始化的需求。具体构造函数列表需参考FieldData类的官方文档。"}
{"id": "TEST1-102", "output_field": "TuGraph-DB通过基于\"80天环游世界\"虚拟背景和历史航班数据，设计了一个自定义网站服务，帮助用户选择不超过8个城市，返回满足航班间隔要求下的费用最低和飞行时间最短的10条路径规划，从而解决旅行路线选择的烦恼。"}
{"id": "TEST1-103", "output_field": "判断一个顶点或边是否具有某个字段。"}
{"id": "TEST1-104", "output_field": "最低配置是4核CPU，建议配置是64核CPU。"}
{"id": "TEST1-105", "output_field": "MappedVid 函数用于将视频文件映射到内存中，以便快速访问和处理视频数据。它常用于视频处理和视频分析应用中，提高数据读取效率。具体功能可能因不同编程库或框架而有所差异。"}
{"id": "TEST1-106", "output_field": "抛出异常"}
{"id": "TEST1-107", "output_field": "不是，批量在线导入通常使用`LOAD CSV`语句或其他专门的批量导入工具，而不是简单的`CREATE (n), (m)`语句。`CREATE (n), (m)`用于创建单个或少量节点，不适合大规模数据导入。批量导入需要更高效的处理方式。"}
{"id": "TEST1-108", "output_field": "`lgraph_backup` 工具的主要功能是将一个 TuGraph 数据库中的数据备份到另一个目录下。"}
{"id": "TEST1-109", "output_field": "通过GET方法和URI `/db/{graph_name}/node/{vertex_id}/property` 可以实现获取某个节点的所有属性。"}
{"id": "TEST1-110", "output_field": "点、边、属性"}
{"id": "TEST1-111", "output_field": "TuGraph-DB支持存储过程，支持C++、Python和Rust语言编写存储过程。"}
{"id": "TEST1-112", "output_field": "GetEdgeProp操作的目的是获取图中边的属性信息。"}
{"id": "TEST1-113", "output_field": "TuGraph-DB的主要功能包括属性图模型、实时增删查改、多重图、多图、ACID事务处理、点边索引、混合事务和分析处理（HTAP）、主流图查询语言、支持OLAP API、内置多种图分析算法、基于C++/Python的存储过程、提供图可视化工具等。"}
{"id": "TEST1-114", "output_field": "RpcStatusException"}
{"id": "TEST1-115", "output_field": "预计2024年度功能更新将在年中推出HA支持Witness角色和管理工具。具体时间可能根据开发进度有所调整。请关注官方公告获取最新信息。"}
{"id": "TEST1-116", "output_field": "TuGraph-DB使用CMake作为编译工具，支持的C++标准为C++17。"}
{"id": "TEST1-117", "output_field": "Cython.cimports.libcpp.unordered_map是Cython中用于导入C++标准库中unordered_map的模块，它允许在Cython代码中使用C++的哈希表容器。这有助于提高数据结构的访问效率。"}
{"id": "TEST1-118", "output_field": "TuGraph 数据预热命令需要指定 `-d {db_dir}` 选项和 `-g {graph_list}` 选项。"}
{"id": "TEST1-119", "output_field": "支持GQL语句，但TuGraph目前并未完全支持所有GQL语法，未来会逐步完善。"}
{"id": "TEST1-120", "output_field": "“log4j-core”的版本号是2.14.1，“guava”的版本号是30.1-jre。"}
{"id": "TEST1-121", "output_field": "SetUserGraphAccess方法用于设置指定用户在图上的访问级别。"}
{"id": "TEST1-122", "output_field": "在运行单元测试的过程中，TuGraph-DB可以通过在代码中使用日志宏来输出日志。开发者需要在代码中包含 \"tools/lgraph_log.h\" 头文件，并使用如 LOG_DEBUG()、LOG_INFO()、LOG_WARN()、LOG_ERROR() 和 LOG_FATAL() 等宏来输出不同级别的日志信息。这些日志信息将被记录到与服务器日志相同的日志文件中，或者根据配置输出到控制台。"}
{"id": "TEST1-123", "output_field": "在GeaBase查询中，使用\"Nav\"语句的一种情况是用于导航至特定记录或相关联的记录，以便进行进一步的数据检索或操作。例如，通过\"Nav\"语句可以从一个实体跳转到与其关联的另一个实体。这种方法常用于复杂关系的查询和数据处理。"}
{"id": "TEST1-124", "output_field": "TuGraph提供了通过pair unique索引查找关系边的接口。可以使用`db.getEdgeByIndex`方法根据pair unique索引的值定位到具体的边，然后通过`db.upsertEdge`方法更新对应的边数据。具体操作如下：\n\n1. 使用`db.getEdgeByIndex`根据pair unique索引查找边。\n2. 使用`db.upsertEdge`根据查找到的边的信息进行更新。\n\n示例代码：\n```bash\nCALL db.getEdgeByIndex('edge1', 'score', '特定值')\nCALL db.upsertEdge('edge1', {type:'node1', key:'node1_id'}, {type:'node2', key:'node2_id'}, [{node1_id:1, node2_id:2, score:新值}], 'score')\n```"}
{"id": "TEST1-125", "output_field": "TuGraph Explorer 的功能现在可以在 TuGraph Browser 中找到。"}
{"id": "TEST1-126", "output_field": "SybilRank算法在执行过程中主要采用基于信任传播的图算法进行计算，通过迭代更新节点的信任值，最终识别出可信节点和恶意节点。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中用于存储实体的详细信息及其关系的特征，增强图谱的表达能力，支持更精确的数据查询和分析，例如员工的工号、雇佣时间等属性有助于构建更丰富的实体关系模型。"}
{"id": "TEST1-128", "output_field": "在提交代码前先提交一个issue，可以避免与其他开发者产生冲突和重复工作，维护人员可以讨论确定修改的必要性和提升空间，达成一致后再开发，减少沟通成本和pull request被拒绝的情况。"}
{"id": "TEST1-129", "output_field": "社区版适用于单实例部署，提供图数据库基础功能和成熟产品设计，支持TB级数据规模；企业版则提供分布式集群架构、全生命周期一站式图平台、多种图计算引擎、支持大数据源及多地多中心部署，并有专家支持服务，更适合商业化解决方案。"}
{"id": "TEST1-130", "output_field": "bfs_standalone程序的输出结果是：prepare_cost = 0.10(s), core_cost = 0.02(s), found_vertices = 3829, output_cost = 0.00(s), total_cost = 0.11(s), DONE."}
{"id": "TEST1-131", "output_field": "当`key_start`和`key_end`相等且都等于`v`时，`VertexIndexIterator`会返回一个指向所有字段值为`v`的顶点的迭代器。该迭代器遍历的顶点按`(索引值, 顶点ID)`的顺序排序，因此可以高效地定位和访问具有特定字段值的顶点。"}
{"id": "TEST1-132", "output_field": "使用配置文件描述顶点数据文件路径、顶点标签、文件头行数及列映射。例如，配置文件中写入`[actors.csv]`、`LABEL=actor, HEADER=2`、`aid:STRING:ID, name:STRING`来定义顶点数据。通过`lgraph_import`工具导入配置文件，将数据写入图数据库。"}
{"id": "TEST1-133", "output_field": "lgraph_api::Transaction用于在TuGraph图数据库中执行一系列原子操作，提供完整的ACID保证。它可以创建读事务和写事务，读事务只能执行读操作，写事务可执行读写操作。每个事务只能在单个线程中使用，读事务可以分叉以并行执行特定操作。"}
{"id": "TEST1-134", "output_field": "无法从提供的上下文中找到关于`ProcessVertexActive`函数运行时错误引发的具体异常信息。请提供更多相关代码或文档以便准确回答。"}
{"id": "TEST1-135", "output_field": "字符串格式"}
{"id": "TEST1-136", "output_field": "localhost:9111"}
{"id": "TEST1-137", "output_field": "TuGraph图分析引擎主要面向全图/全量数据分析类的任务。"}
{"id": "TEST1-138", "output_field": "在XML配置中，若表内属性字段名为id，应将node_id字段重命名为其他不冲突的名称，或者使用命名空间区分，以避免命名冲突导致的报错。"}
{"id": "TEST1-139", "output_field": "session.query(\"CALL db.createEdgeLabel('DIRECT', '[]')\", emptyMap());"}
{"id": "TEST1-140", "output_field": "可以统一返回字典或对象形式，例如：`return {'name': p.name, 'age': p.age}`，然后在可视化页面根据键值对展示数据。这样无论返回单个值还是多个值，结构都一致，便于前端处理。"}
{"id": "TEST1-141", "output_field": "在编译TuGraph时，如果是在基于ARM的机器上（例如Mac M1），需要在执行CMake命令时添加 `-DENABLE_BUILD_ON_AARCH64=ON` 参数。"}
{"id": "TEST1-142", "output_field": "CPU: Intel i7 或 AMD Ryzen 7，内存: 16GB，显卡: NVIDIA GTX 1660 或 AMD Radeon RX 5600 XT，存储: 512GB SSD。"}
{"id": "TEST1-143", "output_field": "使用图论中的搜索算法，如深度优先搜索（DFS）或广度优先搜索（BFS），可以在图中找到两点间的通路。具体步骤包括初始化起点、遍历相邻节点，并记录路径。对于加权图，可使用Dijkstra算法或A*算法优化路径选择。"}
{"id": "TEST1-144", "output_field": "TuGraph支持通过Cypher语句修改schema。"}
{"id": "TEST1-145", "output_field": "TuGraph Restful Server 使用 brpc 框架支持其 HTTP 协议，提供文件上传、数据导入、导入进度查询、Cypher 查询、文件删除等功能。"}
{"id": "TEST1-146", "output_field": "禁用角色后，具有该角色的用户将不再从该角色中获得任何权限。"}
{"id": "TEST1-147", "output_field": "作为公司员工提交贡献内容时，您需要保证您依法有权授予上述许可，并确保附表A中所指定的公司员工有权代表公司提交贡献内容。"}
{"id": "TEST1-148", "output_field": "使用命令 `CALL db.dropAllVertex()` 可以只删除所有点边数据，保留图schema。"}
{"id": "TEST1-149", "output_field": "OGM在对象关系映射（ORM）和数据库操作抽象方面类似于MyBatis，都提供了将对象映射到数据库表的功能，且都允许通过XML或注解配置SQL语句。此外，它们都支持动态SQL生成和结果映射。"}
{"id": "TEST1-150", "output_field": "BROWSER 可以使用 Docker 进行部署。具体部署方法需要参考官方文档或相关教程。如果需要详细步骤，请查阅相关资源。"}
{"id": "TEST1-151", "output_field": "TuGraph-DB有数据导入工具，名为`lgraph_import`。相关代码在TuGraph的实用工具部分。"}
{"id": "TEST1-152", "output_field": "图数据库在性能、兼容性和直观性方面具有独特优势。在处理关联关系时，图数据库的效率比关系型数据库高2到4个数量级。它能够灵活地适应数据内容和格式的变化，而无需像关系型数据库那样进行大规模的表结构更改。此外，图数据库以直观的方式表达现实世界的关系，使得分析和查询数据变得更加直接和自然。"}
{"id": "TEST1-153", "output_field": "TuGraph 客户端 SDK 支持Java、Python、C++等多种语言。"}
{"id": "TEST1-154", "output_field": "WKT和WKB格式"}
{"id": "TEST1-155", "output_field": "导入点或边数据"}
{"id": "TEST1-156", "output_field": "TuGraph企业版是TuGraph图数据库的商业化版本，它提供了更加完善的商业化功能支持，包括分布式集群架构、覆盖探索、研发、服务、运维管理全生命周期的一站式图平台、在线、近线、离线的图计算引擎、支持流式、大数据类数据源、多地多中心的部署形态以及专家支持服务等。"}
{"id": "TEST1-157", "output_field": "请求存储过程列表时，应该使用GET方法，URI为`/db/{graph_name}/cpp_plugin|python_plugin`。"}
{"id": "TEST1-158", "output_field": "TuGraph基础算法包包含广度优先搜索、网页排序、单源最短路径、弱连通分量、平均集聚系数和标签传播算法。"}
{"id": "TEST1-159", "output_field": "REST 服务器的默认端口号是 7070。"}
{"id": "TEST1-160", "output_field": "调用`POST /role/{role_name}/disable`函数，当操作成功时返回true。"}
{"id": "TEST1-161", "output_field": "不会丢失。通过兼容迁移、升级迁移或在线迁移方案，原库数据可以被有效迁移到新环境中，确保数据完整性。"}
{"id": "TEST1-162", "output_field": "如果节点中未包含属性\"belt\"，应该返回null。"}
{"id": "TEST1-163", "output_field": "磁盘IO警报通常在磁盘读写操作延迟过高、IOPS（每秒输入输出操作数）超过阈值或磁盘故障时触发。这些情况可能影响系统性能和数据完整性。具体触发条件取决于系统设置和监控策略。"}
{"id": "TEST1-164", "output_field": "调用 Close() 函数后，InEdgeIterator 的状态变为无效。"}
{"id": "TEST1-165", "output_field": "DUAL_DIRECTION表示输入文件为非对称图，加载的图也为非对称图。"}
{"id": "TEST1-166", "output_field": "当指定的顶点ID不存在，并且nearest参数为true时，Goto函数将尝试获取在排序中紧随指定边的下一个边。如果从euid.src出发没有排序在其后的出边，迭代器将变为无效。"}
{"id": "TEST1-167", "output_field": "found_vertices = 3829"}
{"id": "TEST1-168", "output_field": "24小时"}
{"id": "TEST1-169", "output_field": "在GetEdgeProp命令中，要查找特定时间戳的边属性，可以通过在WHERE子句中指定timestamp字段条件来实现，例如：WHERE timestamp = '指定的时间戳值'。这样即可筛选出符合该时间戳的边属性。注意时间戳格式需与数据存储格式一致。"}
{"id": "TEST1-170", "output_field": "TuGraph Browser默认的端口号是7070。"}
{"id": "TEST1-171", "output_field": "TuGraph-DB支持运行图算法。TuGraph的图分析引擎，面向的场景主要是全图/全量数据分析类的任务。借助TuGraph的 C++ / Python 图分析引擎 API ，用户可以对不同数据来源的图数据快速导出一个待处理的复杂子图，然后在该子图上运行诸如PageRank、LPA、WCC等迭代式图算法，最后根据运行结果做出相应的对策。"}
{"id": "TEST1-172", "output_field": "Python存储过程接口包含以下重要组件和功能：AccessLevel类用于定义用户在图上的访问级别；EdgeUid类用于表示边的唯一标识符；FieldData类用于表示字段值的数据类型，并提供了多种类型转换方法；此外，接口还支持加载、列举、调用和删除存储过程等功能。"}
{"id": "TEST1-173", "output_field": "成功返回True，失败返回False。"}
{"id": "TEST1-174", "output_field": "在TuGraph中，复杂图分析操作需要先导出图数据的快照，然后在快照上进行执行。这些操作通常涉及全图的多轮数据迭代，如PageRank和Louvain算法。导出的快照数据结构紧凑，能够提高读效率，但需要串行执行，每个操作会占用全部CPU资源。"}
{"id": "TEST1-175", "output_field": "`filter_output_default`函数主要用于处理输出数据，确保其符合默认格式或标准，同时对不符合要求的数据进行过滤或修正。"}
{"id": "TEST1-176", "output_field": "在Java运行时，配置MyBatis Generator的XML文件中的`targetProject`属性，应指向生成文件的目录路径，通常是项目的源代码目录或资源目录，例如`targetProject=\"src/main/java\"`。确保路径正确且项目结构匹配。如果使用Maven或Gradle，路径应与构建工具的配置一致。"}
{"id": "TEST1-177", "output_field": "`@Property(\"class\")`注解指定了数据库中的字段名为\"class\"。"}
{"id": "TEST1-178", "output_field": "在TuGraph中，目前不支持直接通过Cypher语句删除图中的重复关系。需要通过其他方法，如编写自定义脚本或使用图数据库的API来处理重复关系。建议查阅TuGraph官方文档获取更详细的解决方案。"}
{"id": "TEST1-179", "output_field": "默认情况下，第一次快照的时间在0到ha_snapshot_interval_s秒内的任一时刻随机设置。"}
{"id": "TEST1-180", "output_field": "来源完整信息、个人所知许可或限制（包括专利、商标、许可协议）、显著标明“以第三方名义提交：【姓名】”。"}
{"id": "TEST1-181", "output_field": "可能是由于查询逻辑或数据处理方式不同导致结果差异，建议检查查询条件和数据处理流程，确保一致性。"}
{"id": "TEST1-182", "output_field": "对象图映射（OGM）支持将JAVA对象（POJO）映射到TuGraph中，JAVA中的类映射为图中的节点、类中的集合映射为边、类的属性映射为图对象的属性，并提供了对应的函数操作图数据库。"}
{"id": "TEST1-183", "output_field": "在单节点模式下，可以通过以下代码实例化`liblgraph_client_python.client`对象：\n\n```python\nclient = liblgraph_client_python.client(\"127.0.0.1:19099\", \"admin\", \"73@TuGraph\")\n```"}
{"id": "TEST1-184", "output_field": "角色名非法时，`GetRoleInfo` 函数会抛出 `IllegalArgumentException` 异常。"}
{"id": "TEST1-185", "output_field": "TuGraph提供了三种部署方式：云部署、Docker部署和本地部署。云部署适用于新手，提供了一键部署的免费试用服务；Docker部署适合对硬件有特定要求的用户，例如进行性能测试；本地部署则适合需要在现有系统上紧密耦合部署的生产环境。"}
{"id": "TEST1-186", "output_field": "Corin Redgrave"}
{"id": "TEST1-187", "output_field": "可以，如果设置了`continueOnError`为true，遇到错误时会跳过错误数据并继续导入。"}
{"id": "TEST1-188", "output_field": "使用[ResetHeader]方法为表设置表头。"}
{"id": "TEST1-189", "output_field": "厘清个人贡献者向蚂蚁集团项目提交文档和软件代码时的知识产权许可，确保贡献者同意相关许可条款，并保留其对贡献内容的权利。"}
{"id": "TEST1-190", "output_field": "TuGraph Mini Runtime Image不包含Java、Python相关功能，无C++ plugin编译运行，仅支持so上传。"}
{"id": "TEST1-191", "output_field": "Procedure及Embed主要使用了OlapOnDB类中的辅助函数。"}
{"id": "TEST1-192", "output_field": "密码太短、密码不符合复杂性要求、密码与旧密码相同、数据库连接失败。"}
{"id": "TEST1-193", "output_field": "使用 `liblgraph_python_api.Galaxy` 类的 `CreateUser` 方法可以创建一个新的用户账户。这个方法需要提供用户名、密码和描述作为参数。"}
{"id": "TEST1-194", "output_field": "DeleteVertexLabel"}
{"id": "TEST1-195", "output_field": "无任何权限。"}
{"id": "TEST1-196", "output_field": "TuGraph Monitor、Prometheus和Grafana。"}
{"id": "TEST1-197", "output_field": "TuGraph 服务在名为 lgraph.json 的配置文件中读取其配置。"}
{"id": "TEST1-198", "output_field": "5000毫秒"}
{"id": "TEST1-199", "output_field": "出边过滤函数、入边过滤函数、出邻居过滤函数、入邻居过滤函数，均接受边迭代器、路径和迭代器辅助类作为参数。"}
{"id": "TEST1-200", "output_field": "WriteNotAllowed"}
{"id": "TEST1-201", "output_field": "Python编写的UDF模块通常放在Spark的`/usr/lib/spark/python/lib/pyspark.zip`目录下。也可以配置环境变量或指定路径来加载自定义模块。具体位置可能因Spark安装方式或版本有所不同。"}
{"id": "TEST1-202", "output_field": "资源名称“警告”对应的颜色设置为固定的“light-orange”。"}
{"id": "TEST1-203", "output_field": "删除导入图库的数据，通常需进入图库管理界面，选择要删除的数据，然后执行删除操作。具体步骤可能因图库软件或平台不同而有所差异。建议查阅相关软件或平台的使用说明。"}
{"id": "TEST1-204", "output_field": "如果请求成功，响应中将返回新建立的边的 euid 列表。"}
{"id": "TEST1-205", "output_field": "TuGraph选择使用B+树作为其底层存储数据结构，主要是因为B+树具有较好的顺序读写性能，能够有效支持实时增删查改事务。相比于LSM树，B+树在读操作频繁的场景下表现更优，且性能波动较小，更符合TuGraph读性能优先的设计需求。此外，B+树的结构特点有助于解决硬盘顺序操作和随机操作性能差异问题，提供较均衡的读写性能。"}
{"id": "TEST1-206", "output_field": "接口 \"CallProcedureToLeader\" 支持通过设置参数 \"json_format\" 来改变返回结果的格式。当 \"json_format\" 设置为 true 时，返回结果为 JSON 格式；当设置为 false 时，返回结果为字符串格式。"}
{"id": "TEST1-207", "output_field": "优化查询语句，使用索引，减少数据返回量。"}
{"id": "TEST1-208", "output_field": "当 FieldData 的类型不是 INT8、INT16、INT32 或 INT64 时，integer() 方法会抛出 std::bad_cast 异常。"}
{"id": "TEST1-209", "output_field": "TuGraph-DB的存储引擎使用了KV数据库，基于LMDB构建。"}
{"id": "TEST1-210", "output_field": "未找到新版browser-resource可能是因为未更新或路径设置错误。新旧版本Web切换通常通过配置文件或环境变量来控制。请检查相关设置或咨询技术支持。"}
{"id": "TEST1-211", "output_field": "根据提供的资料，TuGraph主要关注大数据量存储和计算、高吞吐率以及灵活的API，但未明确提及对图数据进行压缩的具体信息。因此，无法确定TuGraph在进行大规模数据查询时是否对图数据进行了压缩。"}
{"id": "TEST1-212", "output_field": "TuGraph选择使用B+树作为其存储数据结构。主要原因在于B+树具有较好的顺序读写性能，且读性能在整体性能中占比更高，适合TuGraph读性能优先的需求。相比之下，LSM树虽然随机写性能占优，但性能波动难以预期，增加了设计成本。"}
{"id": "TEST1-213", "output_field": "无法从提供的文档中找到TuGraph-DB使用的boost库版本信息。"}
{"id": "TEST1-214", "output_field": "TuGraph适合新手、系统开发者、生产运维人员、研究人员等不同需求的用户。"}
{"id": "TEST1-215", "output_field": "POST请求主要用于创建实体、提交Cypher查询以及加载和调用存储过程。"}
{"id": "TEST1-216", "output_field": "外存的最低配置是100GB，建议配置是2TB NVMe SSD。"}
{"id": "TEST1-217", "output_field": "自动创建该目录。"}
{"id": "TEST1-218", "output_field": "VertexIterator 的 GetNumOutEdges 方法默认的 n_limit 参数值是 18446744073709551615。"}
{"id": "TEST1-219", "output_field": "10"}
{"id": "TEST1-220", "output_field": "在生成Mapper接口时，XMLMAPPER类型通过XML配置文件实现接口方法。具体来说，XML文件中定义了SQL语句和映射规则，MyBatis框架会根据这些配置来执行SQL并映射结果到Java对象。这样，接口方法无需手动编写实现代码，由MyBatis自动完成。"}
{"id": "TEST1-221", "output_field": "GCN模型的主要组成部分包括图卷积层、激活函数和池化层。图卷积层用于提取图结构特征，激活函数引入非线性，池化层用于降维和特征聚合。此外，还包括输入层和输出层，用于数据的输入和最终结果的输出。"}
{"id": "TEST1-222", "output_field": "gtest框架"}
{"id": "TEST1-223", "output_field": "可以。TuGraph 支持先使用 Cypher 查询语言找到一个子图，然后在这个子图上运行图分析算法，如 PageRank、KCore 等。"}
{"id": "TEST1-224", "output_field": "文档中未提及HA集群的snapshot删除时间。通常，snapshot的删除策略由系统管理员根据存储需求和备份策略决定。"}
{"id": "TEST1-225", "output_field": "TuGraph-DB目前支持OpenCypher查询语言，并计划在将来支持ISO GQL查询语言。"}
{"id": "TEST1-226", "output_field": "没有明确提到开启事务和结束事务的关键字。"}
{"id": "TEST1-227", "output_field": "使用POST方法访问`/role`接口，在请求体中提供角色名和描述信息。例如：\n\n```\nPOST http://localhost:7070/role\nAccept: application/json; charset=UTF-8\nContent-Type: application/json; charset=UTF-8\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\nInput:\n{\n    \"role\": \"new_role\",\n    \"description\": \"This is a new role.\"\n}\n```"}
{"id": "TEST1-228", "output_field": "TuGraph的Cypher查询语言目前不支持任意长度路径的查询。"}
{"id": "TEST1-229", "output_field": "在Java运行时，若要在xml配置文件中配置targetProject，通常需要在相应的配置节点中添加一个属性，例如 `<configuration><targetProject>path/to/your/project</targetProject></configuration>`，确保路径正确指向目标项目。具体节点名称和位置可能因使用的框架或工具而异，请参考相关文档。"}
{"id": "TEST1-230", "output_field": "HA支持Witness角色和管理工具"}
{"id": "TEST1-231", "output_field": "在调用 \"CallGql\" 接口时，通常在请求参数中指定图的名称，具体可以通过设置 \"graphName\" 参数来实现。例如，请求体中可能包含字段 \"graphName\": \"your_graph_name\"。请参考接口文档确认具体参数名称和传递方式。"}
{"id": "TEST1-232", "output_field": "可以。在图分析中，通过配置点样式或边样式，可以设置显示文本为属性值，默认显示为id，但可自定义显示其他属性内容。"}
{"id": "TEST1-233", "output_field": "TuGraph-DB兼容Neo4j的通讯协议，因此可以使用Neo4j的驱动连接TuGraph-DB的server。"}
{"id": "TEST1-234", "output_field": "可能是因为在数据导入过程中，数据映射设置不正确，导致属性信息未能正确关联到对应的边上。请检查数据映射步骤，确保数据文件中的列正确映射到边的属性上。"}
{"id": "TEST1-235", "output_field": "在\"TuGraph-DataX\"项目中，通过创建一个DataX的job配置文件（如`job_actors.json`），该文件定义了读取`actors.csv`的`txtfilereader`和写入TuGraph的`tugraphwriter`。配置中指定了csv文件的路径、编码、字段分隔符以及TuGraph的连接信息，包括URL、用户名、密码和图名称。执行DataX时，使用`python3 datax/bin/datax.py job_actors.json`命令来启动导入过程。"}
{"id": "TEST1-236", "output_field": "创建新子图时通常需要以下参数：子图数量、子图排列方式（如行数和列数）、当前子图的索引。有些情况下，还需指定子图的大小和间距。具体参数取决于使用的绘图库，如Matplotlib中的`subplot`函数。"}
{"id": "TEST1-237", "output_field": "在`test_export_default`函数中，通过比较原始数据库和重新导入数据库的数据内容来验证一致性。具体步骤包括：先从原始数据库导出数据，然后将导出的数据导入到新的数据库中，最后使用Cypher查询语句分别从两个数据库中检索数据并进行对比，确保数据内容和结构完全相同。"}
{"id": "TEST1-238", "output_field": "Work函数在处理节点vi时，返回值代表节点vi的出度（即节点vi的所有出度邻居的数量）。"}
{"id": "TEST1-239", "output_field": "TuGraph Explorer 的功能现在可以在 TuGraph Browser 中找到。"}
{"id": "TEST1-240", "output_field": "在批量创建点的操作中，如果请求成功，TuGraph 会返回新增加的点的 vid 列表。"}
{"id": "TEST1-241", "output_field": "TuGraph支持混合检索vector和知识图谱。通过其图数据库和图分析引擎，可以高效处理大规模图数据，并结合向量数据库进行复杂查询和分析。"}
{"id": "TEST1-242", "output_field": "TuGraph 数据预热的主要目的是通过预先加载数据到内存中来减少服务器刚启动时的 IO 操作，从而改善系统性能。"}
{"id": "TEST1-243", "output_field": "源顶点的ID"}
{"id": "TEST1-244", "output_field": "`OPTIONAL MATCH`子句用于在查询中寻找可能不存在的匹配模式，允许查询结果中包含部分缺失的数据，而不影响整个查询的执行。当主匹配（MATCH）未能找到相关数据时，`OPTIONAL MATCH`可以避免查询失败，并返回其他可用的信息。"}
{"id": "TEST1-245", "output_field": "GraphDB 实例无法使用的情况可能包括：服务器宕机、数据库配置错误、网络连接问题、资源耗尽或软件版本不兼容等。需要检查系统日志和配置文件以确定具体原因。及时更新和维护是预防此类问题的有效方法。"}
{"id": "TEST1-246", "output_field": "TuGraph 运行需要保证库文件 liblgraph.so 的文件位置在环境变量 LD_LIBRARY_PATH 中。"}
{"id": "TEST1-247", "output_field": "当GetNumOutEdges函数达到限制时，它会返回n_limit参数的值，并将more_to_go参数设置为true，以指示超出限制。"}
{"id": "TEST1-248", "output_field": "在每次迭代中，BFS算法通过将当前层的顶点标记为已访问，并将其邻接的未访问顶点加入下一层队列，从而更新活跃顶点数量。活跃顶点数量即为当前层队列中的顶点数。随着迭代的进行，活跃顶点数量会动态变化，直到队列为空。"}
{"id": "TEST1-249", "output_field": "64"}
{"id": "TEST1-250", "output_field": "PUT 用于修改角色，POST 用于启用角色。"}
