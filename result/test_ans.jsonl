{"id": "VAL-1", "output_field": "3"}
{"id": "VAL-2", "output_field": "磁盘IO监控配置中，当`resources_report`的值大于10000时会触发危急颜色模式。"}
{"id": "VAL-3", "output_field": "`IsReal()` 函数用于查询 `FieldData` 类中数据是否为实数类型。"}
{"id": "VAL-4", "output_field": "200"}
{"id": "VAL-5", "output_field": "不一定。边关联的两个点的字段可以是点的主键，也可以是其他属性字段，具体取决于业务需求和边的定义。在创建边时，可以通过指定起点和终点的类型及字段来关联两个点。"}
{"id": "VAL-6", "output_field": "删除当前边，并将迭代器指向下一条按（标签、tid、目标顶点、eid）排序的出边，若无更多出边则迭代器失效。"}
{"id": "VAL-7", "output_field": "服务器日志的详细程度可通过verbose配置项指定，分为0, 1, 2三个等级，默认等级为1。"}
{"id": "VAL-8", "output_field": "\"memory\"指的是机器性能指标中的内存使用情况，包括内存容量、内存占用率和内存访问速度等，反映系统处理数据和运行程序的能力。"}
{"id": "VAL-9", "output_field": "如果不选择清空画布数据按钮，每次执行查询的结果会追加至画布区域。"}
{"id": "VAL-10", "output_field": "请发送邮件至官方提供的邮箱地址，具体邮箱信息可在联系方式图片（![contacts](../../images/contact-zh.png)）中查看。在邮件中详细描述您的建议和意见。"}
{"id": "VAL-11", "output_field": "不支持。边索引主要用于图数据库中边的快速检索，但不直接用于查询加速。查询加速通常依赖其他优化技术如索引优化、查询缓存等。"}
{"id": "VAL-12", "output_field": "TuGraph Monitor的主要功能是与TuGraph服务进行通信，通过Procedure查询接口查询TuGraph服务所在机器的性能指标，并将TuGraph返回的结果包装成Prometheus需要的数据模型，等待Prometheus获取。"}
{"id": "VAL-13", "output_field": "TuGraph HA 集群的管理工具是 `lgraph_peer`。"}
{"id": "VAL-14", "output_field": "通过POST方法修改Token的有效期为无限期，需要向`/update_token_time`接口发送请求，并在请求体中包含`Authorization`字段以校验用户身份，同时设置`refresh_time`和`expire_time`字段的值为0。"}
{"id": "VAL-15", "output_field": "TuGraph图数据库是由蚂蚁集团与清华大学联合研发的。"}
{"id": "VAL-16", "output_field": "TuGraph图学习模块依赖于TuGraph图数据库系统。"}
{"id": "VAL-17", "output_field": "构造FieldSpec时需要三个参数：字段名（n）、字段类型（t）、是否可选（nu）。"}
{"id": "VAL-18", "output_field": "很抱歉，提供的上下文中没有关于TuGraph DB并发性能优化最初面临的主要问题的信息。"}
{"id": "VAL-19", "output_field": "C++客户端中实例化单节点client对象需要以下三个参数：服务器地址（形如ip:port），用户名和密码。"}
{"id": "VAL-20", "output_field": "TuGraph-DB查询引擎目前支持使用Cypher查询语言，并计划在未来支持ISO GQL查询语言。"}
{"id": "VAL-21", "output_field": "DeleteProcedure 函数接受两个参数，分别是整型参数 'id' 和字符串参数 'name'。"}
{"id": "VAL-22", "output_field": "为了在 FrontierTraversal 中并行执行遍历，事务必须是只读模式。"}
{"id": "VAL-23", "output_field": "url, user, password"}
{"id": "VAL-24", "output_field": "24小时"}
{"id": "VAL-25", "output_field": "TuGraph图学习模块中包括的四种采样算子是：Neighbor Sampling（邻居采样）、Edge Sampling（边采样）、Random Walk Sampling（随机游走采样）和Negative Sampling（负采样）。"}
{"id": "VAL-26", "output_field": "若src和dst对应的边不存在，则返回True表示插入新边；若已存在，则返回False表示更新边属性。若存在但标签不符，则抛出异常。第四种情况返回0表示因索引冲突无操作，1表示插入，2表示更新。"}
{"id": "VAL-27", "output_field": "ANTLR4支持生成Java、C#、Python、JavaScript等目标语言的解析器。"}
{"id": "VAL-28", "output_field": "如果对DateTime对象添加超出其范围的微秒数，会抛出`OutOfRange`异常。"}
{"id": "VAL-29", "output_field": "VertexLockGuard是一个自动在构造时获取锁，在析构时释放锁的类，用于确保图的顶点在并发更新时的正确性。"}
{"id": "VAL-30", "output_field": "\"Value pack时的null array\"通常指在特定数据包或配置中，某个预期应包含元素的数组为空，即没有任何元素。这可能表示该数组未被正确初始化或数据缺失。具体含义需结合上下文进一步分析。"}
{"id": "VAL-31", "output_field": "TuGraph支持边属性匹配。"}
{"id": "VAL-32", "output_field": "在TuGraph中，点类型和边类型是通过JSON格式的定义来创建的。对于点类型，你需要定义一个JSON对象，其中包含标签（label）、主键（primary）、类型（type）、属性（properties）等信息。每个属性又包括名称（name）、类型（type）、是否可选（optional）等。对于边类型，你需要定义一个字符串三元组，格式为（源节点类型, 边类型, 目标节点类型）。"}
{"id": "VAL-33", "output_field": "是的，如果log_dir不设置，日志将不会保存到文件，而是输出到控制台。在daemon模式下，若log_dir为空，则不会向控制台输出任何日志。"}
{"id": "VAL-34", "output_field": "在图数据库中，`algo.shortestPath` 用于查找两个顶点之间的最短路径。例如，在一个社交网络图中，可以用来查找两个用户之间的最短联系路径，或者在一个交通网络图中，查找两个地点之间的最短路线。通过指定起始节点、终止节点和配置参数（如最大跳数和关系查询），可以获取路径的节点数量和总成本。"}
{"id": "VAL-35", "output_field": "字符串"}
{"id": "VAL-36", "output_field": "Rust 存储过程目前仅支持v1版本。"}
{"id": "VAL-37", "output_field": "gtest框架"}
{"id": "VAL-38", "output_field": "需要指定。在创建 Label 的请求中，必须通过 `is_vertex` 字段明确指定该 Label 是点（vertex）还是边（relationship）。如果是点，还需设置 `primary` 字段作为主键属性；如果是边，可以设置 `edge_constraints` 字段来限制边的起点和终点。"}
{"id": "VAL-39", "output_field": "TuGraph中使用的两种主要图分析操作是简单图分析操作和复杂图分析操作。简单图分析操作通常也是局部的图分析操作，比如两点间最短路算法SPSP、Jaccard算法。复杂分析操作通常涉及全图的多轮数据迭代操作，比如网页排序算法PageRank、社区发现算法Louvain。"}
{"id": "VAL-40", "output_field": "在TuGraph-DB中，开发者可以通过包含`tools/lgraph_log.h`头文件并使用提供的日志宏来增加日志输出埋点。例如，使用`LOG_DEBUG() << \"日志信息\";`来输出调试级别的日志。具体使用方式可参考示例代码。"}
{"id": "VAL-41", "output_field": "InputError"}
{"id": "VAL-42", "output_field": "Grafana主要用于将时序数据库中的数据转换为精美图形和可视化效果，帮助用户进行数据分析和展示。"}
{"id": "VAL-43", "output_field": "DeleteProcedure 函数用于删除数据库中的存储过程。它通常接收存储过程的名称作为参数，并执行相应的删除操作。具体实现可能因数据库系统而异。"}
{"id": "VAL-44", "output_field": "PairUniqueIndex的钥匙生成形式是将两个字段的值组合成一个唯一的键，通常采用“字段1值_字段2值”的格式，以确保每个键在数据集中是唯一的。"}
{"id": "VAL-45", "output_field": "类FieldData用于表示字段数据，具体包括文本、数字和日期等类型的数据。"}
{"id": "VAL-46", "output_field": "如果在线全量导入TuGraph时发生数据包错误，默认行为是停止导入，并打印出已导入的包数。"}
{"id": "VAL-47", "output_field": "`ORDER BY`在GQL中用于对查询结果进行排序。"}
{"id": "VAL-48", "output_field": "TuGraph-DB 提供了 RESTful API 接口，可以通过 HTTP 请求进行操作。接口代码包含在 TuGraph-DB 项目中，具体位置取决于项目的结构和版本。通常，API 的实现会包含在项目的主要代码库中，例如在 `src` 或 `api` 目录下。"}
{"id": "VAL-49", "output_field": "lgraph_peer工具并非只有编译方式部署后才有，它也可以通过其他方式如容器化部署获得。具体部署方式取决于项目需求和环境配置。建议查阅官方文档以获取详细部署指南。"}
{"id": "VAL-50", "output_field": "25"}
