{"id": "TEST1-1", "output_field": "无法添加边，需先更新value_dict包含指定值。"}
{"id": "TEST1-2", "output_field": "Alice, Bob"}
{"id": "TEST1-3", "output_field": "使用 OpenCypher 查询语言，可以通过以下命令查询数据库中现有角色及其相关信息：`MATCH (r:Role) RETURN r`。此命令会返回所有标记为 \"Role\" 的节点及其属性。也可以通过 REST API 或 TuGraph 可视化工具执行此查询。"}
{"id": "TEST1-4", "output_field": "4096个点边类型，每个点或边类型最多1024个属性"}
{"id": "TEST1-5", "output_field": "容器中没有`setup.sh`脚本，可能是因为镜像构建时未包含该脚本或路径已更改。请检查镜像构建说明或容器内文件结构。"}
{"id": "TEST1-6", "output_field": "可以通过配置文件中的`pid_file`参数来控制pid文件的路径。"}
{"id": "TEST1-7", "output_field": "在ARM机器（如M1芯片的Mac）编译TuGraph时，应在cmake命令中添加`-DENABLE_BUILD_ON_AARCH64=ON`，例如：`cmake .. -DOURSYSTEM=centos -DENABLE_BUILD_ON_AARCH64=ON`。"}
{"id": "TEST1-8", "output_field": "执行完成后需要清理的目录。"}
{"id": "TEST1-9", "output_field": "`lgraph_server -c lgraph_standalone.json --log_dir \"\"`"}
{"id": "TEST1-10", "output_field": "TuGraph团队通过优化查询语句结构、使用更高效的索引策略、改进查询执行计划等手段提高解析速度。"}
{"id": "TEST1-11", "output_field": "DELETE"}
{"id": "TEST1-12", "output_field": "分配一个ParallelBitset集合，用于表示所有点的状态是否激活。"}
{"id": "TEST1-13", "output_field": "请检查配置文件路径和权限，确保参数正确且无数据完整性错误。使用`--continue_on_error true`忽略错误或修改数据后重试。"}
{"id": "TEST1-14", "output_field": "TuGraph支持将数据导出为csv和json格式。"}
{"id": "TEST1-15", "output_field": "TuGraph的调优还可以通过优化数据模型、使用索引、调整存储参数、利用插件API进行定制化优化等方式进行。"}
{"id": "TEST1-16", "output_field": "url, user, password"}
{"id": "TEST1-17", "output_field": "在TuGraph中，Cython通过`from cython.cimports.olap_base import *`的方式导入与Olap相关的模块，并使用Cython编译py文件后才能运行。图数据库模块则通过Cython将py文件翻译为C/C++代码后编译为Python拓展类，在Python中通过import调用。"}
{"id": "TEST1-18", "output_field": "'unique'参数指定索引是否唯一，而'pair_unique'参数指定索引是否为成对唯一。"}
{"id": "TEST1-19", "output_field": "图数据库在关联关系处理上效率更高，比关系型数据库提高2到4个数量级的性能；图数据库更灵活，可以方便地添加新的点、边和属性，而无需修改表结构；图数据库更直观，可以直接表达现实世界的关系，无需高度抽象思维。"}
{"id": "TEST1-20", "output_field": "是属性值太长导致报错。该错误提示索引值超过了允许的最大长度。需要缩短属性值或调整索引长度限制。"}
{"id": "TEST1-21", "output_field": "400"}
{"id": "TEST1-22", "output_field": "TuGraph提供了编译环境、运行环境和精简运行环境三种类型的系统环境。"}
{"id": "TEST1-23", "output_field": "TuGraph-DB新增支持的空间数据类型包括：POINT、LINESTRING、POLYGON。"}
{"id": "TEST1-24", "output_field": "label_name"}
{"id": "TEST1-25", "output_field": "在HA模式下，client只能向leader发送导入点边数据请求。"}
{"id": "TEST1-26", "output_field": "NotSupportedException"}
{"id": "TEST1-27", "output_field": "VertexIndexIterator"}
{"id": "TEST1-28", "output_field": "否"}
{"id": "TEST1-29", "output_field": "get_vertex"}
{"id": "TEST1-30", "output_field": "UnauthorizedAccessException"}
{"id": "TEST1-31", "output_field": "当节点的出度大于0时，节点的pagerank值初始化为 `1/num_vertices` 再除以该节点的出度。"}
{"id": "TEST1-32", "output_field": "TuGraph 支持将数据导出为 `csv` 或 `json` 格式。"}
{"id": "TEST1-33", "output_field": "This error indicates that TuGraph attempted to read beyond the bounds of an array, requiring 4 bytes but only having 2 available. It suggests a buffer overflow or incorrect size calculation in the binary buffer handling. Check the data input or buffer management code around the specified file and line for potential issues."}
{"id": "TEST1-34", "output_field": "read-only"}
{"id": "TEST1-35", "output_field": "CSV文件中的栏位与配置文件中的columns通过索引位置进行对应。"}
{"id": "TEST1-36", "output_field": "LABEL, HEADER, 列映射"}
{"id": "TEST1-37", "output_field": "7070"}
{"id": "TEST1-38", "output_field": "平均值计算法"}
{"id": "TEST1-39", "output_field": "TuGraph是由蚂蚁集团图计算团队开发的。"}
{"id": "TEST1-40", "output_field": "图学习系统是解决图学习问题的，比如TuGraph Learn、DGL等。"}
{"id": "TEST1-41", "output_field": "`label_name`, `field_name` (vector of strings), `field_value_string` (vector of strings)"}
{"id": "TEST1-42", "output_field": "TuGraph 的 RPC 端口默认为 9090。如果需要修改端口，请在配置文件中自行修改。基于 docker 方式部署的服务，配置文件在容器内 /usr/local/etc/lgraph.json 文件中；如果是用 rpm 包部署的服务，配置文件在服务器的 /usr/local/etc/lgraph.json。修改端口后为了使端口生效，需要重启服务。"}
{"id": "TEST1-43", "output_field": "图数据库在处理关联关系时相比关系型数据库的优势主要表现在性能、兼容性和直观性三个方面。具体来说，图数据库在关联关系处理上操作效率更高，比关系型数据库提高2到4个数量级的性能；在项目进程中，图数据库可以更灵活地适应数据内容和格式的变化；此外，使用图的方式表达现实世界的关系更直接和自然，在万物互联的时代尤为突出。"}
{"id": "TEST1-44", "output_field": "默认的登录密码是 73@TuGraph。"}
{"id": "TEST1-45", "output_field": "std::vector<std::string>"}
{"id": "TEST1-46", "output_field": "是独立运行的。TuGraph-DB 是图数据库，负责数据存储和管理；TuGraph Analytics 是流式图计算引擎，负责图数据的分析和计算。两者可以协同工作，但功能上相互独立。"}
{"id": "TEST1-47", "output_field": "用户名和密码"}
{"id": "TEST1-48", "output_field": "使用lgraph_cypher工具在命令行中以单命令模式提交一条Cypher查询并保存结果的方法如下：\n\n1. 首先，确保已经安装了lgraph_cypher工具。\n2. 然后，使用以下命令格式提交Cypher查询并保存结果到指定文件：\n   ```\n   ./lgraph_cypher.py -c /path/to/config.json -u username -P password -s \"MATCH (n) RETURN n\" -f /path/to/output_file.txt\n   ```\n   其中，`/path/to/config.json`是数据库配置文件的路径，`username`是数据库登录用户名，`password`是数据库登录密码，`MATCH (n) RETURN n`是要执行的Cypher查询，`/path/to/output_file.txt`是查询结果要保存的文件路径。\n\n3. 执行该命令后，Cypher查询的结果将会保存到指定的文件中。"}
{"id": "TEST1-49", "output_field": "数据和日志目录的持久化位置分别在宿主机的`/root/tugraph/data`和`/root/tugraph/log`。"}
{"id": "TEST1-50", "output_field": "通过点 ID 直接指定单个起始点、通过点 ID 列表指定多个起始点、通过类似 FindVertices 的过滤函数指定起始点集合。"}
{"id": "TEST1-51", "output_field": "设置字段的值。"}
{"id": "TEST1-52", "output_field": "TuGraph-DB图数据库是由蚂蚁集团图计算团队开发的。"}
{"id": "TEST1-53", "output_field": "精简运行环境不需要额外的系统库。"}
{"id": "TEST1-54", "output_field": "函数 `SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)` 通过参数 `root_vertex_filter` 设置初始遍历点集，该参数是一个过滤函数，对每个顶点进行判断，若返回 `true` 则将该顶点加入初始点集。"}
{"id": "TEST1-55", "output_field": "包含。"}
{"id": "TEST1-56", "output_field": "建议配置：CPU为Xeon E5 2670 v4，内存256GB，硬盘1TB NVMe SSD。实际资源需求可能因具体使用场景而异。"}
{"id": "TEST1-57", "output_field": "创建组合索引时，需要提供以下参数：\n1. 建立组合索引的属性个数，范围在2到16个之间（含）。\n2. 唯一组合索引的属性长度之和不能超过480-2*(属性个数-1)字节，非唯一组合索引的属性长度之和不能超过475-2*(属性个数-1)字节。"}
{"id": "TEST1-58", "output_field": "`SetField` 函数抛出的异常之一是 `ValueError`。"}
{"id": "TEST1-59", "output_field": "TuGraphClient是TuGraph Python SDK中的一个模块，用于通过RESTful或RPC方式与TuGraph服务器进行交互，支持调用Cypher查询和存储过程。"}
{"id": "TEST1-60", "output_field": "TuGraph 支持X86_64和ARM64架构的硬件平台。"}
{"id": "TEST1-61", "output_field": "是的，前两个参数`personDesc`和`person`的格式与执行导入脚本时使用的格式相同。`personDesc`通常描述数据结构，`person`则是具体的数据内容，两者需匹配脚本中的定义。使用时需确保格式一致以保证数据正确导入。"}
{"id": "TEST1-62", "output_field": "类中的集合映射为边类型，类的属性映射为图对象的属性。"}
{"id": "TEST1-63", "output_field": "当前 DateTime 对象不会被修改。"}
{"id": "TEST1-64", "output_field": "label存在, add_fields中的字段不存在且default_values类型兼容, GraphDB有效且非只读。"}
{"id": "TEST1-65", "output_field": "EdgeData"}
{"id": "TEST1-66", "output_field": "RPC（远程过程调用）是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。相比REST，RPC面向方法，主要用于函数方法的调用，适合更复杂通信需求的场景，且性能更高。"}
{"id": "TEST1-67", "output_field": "主键是用户自定义的点数据唯一标识，默认作为唯一索引，确保在对应点类型中唯一。"}
{"id": "TEST1-68", "output_field": "RpcException是TuGraph RPC API中用于处理RPC相关错误的异常类型。"}
{"id": "TEST1-69", "output_field": "支持"}
{"id": "TEST1-70", "output_field": "文档中未提及TuGraph DB关于Antlr4的具体性能改进内容。"}
{"id": "TEST1-71", "output_field": "TuGraph要求每个节点或关系有且只有一个标签，如果没有标签会报错，如果有多个标签则取第一个。OpenCypher允许节点或关系有0个或多个标签。"}
{"id": "TEST1-72", "output_field": "true"}
{"id": "TEST1-73", "output_field": "不支持"}
{"id": "TEST1-74", "output_field": "当调用CallProcedure函数时，如果设置json_format参数为false，返回的结果格式是字符串格式。"}
{"id": "TEST1-75", "output_field": "SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)"}
{"id": "TEST1-76", "output_field": "很抱歉，但提供的上下文中没有包含关于GeaBase主要部署方式所需时间的具体信息。如果您能提供更多相关细节，我将能更准确地回答您的问题。目前，我无法给出确切的部署时间。"}
{"id": "TEST1-77", "output_field": "点、边"}
{"id": "TEST1-78", "output_field": "TuGraph支持多种编程语言的SDK，包括JAVA、C++、Python等。"}
{"id": "TEST1-79", "output_field": "存储过程响应列表可以通过 REST API 或 RPC 来获取。在 REST API 中，可以使用 POST 请求到 `/db/{graph_name}/cpp_plugin` 或 `/db/{graph_name}/python_plugin`，其中 `{graph_name}` 是图数据库的名称。请求的正文应该包含 JSON 格式的数据，包括存储过程的名称、代码（base64 编码）、描述和只读标志。如果请求成功，将返回状态码 200。"}
{"id": "TEST1-80", "output_field": "RPC接口是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-81", "output_field": "在文本中，The Matrix参与了电影类型、文化影响、技术革新等多种类型的关系。"}
{"id": "TEST1-82", "output_field": "```shell\n$ ./lgraph_server -d run -c lgraph.json --log_dir \"\"\n```"}
{"id": "TEST1-83", "output_field": "'如果存在相同的unique_id，可能会导致数据冲突或覆盖，系统可能拒绝添加或更新现有顶点信息。具体行为取决于系统处理重复ID的策略。建议检查系统文档以了解详细处理机制。'"}
{"id": "TEST1-84", "output_field": "TuGraph 支持X86_64和ARM64架构的硬件平台。"}
{"id": "TEST1-85", "output_field": "TuGraph-OGM通过将JAVA对象（POJO）映射到TuGraph中，使JAVA中的类映射为图中的节点、类中的集合映射为边、类的属性映射为图对象的属性，并提供相应函数操作图数据库，让JAVA开发人员在熟悉生态中轻松使用TuGraph数据库。同时兼容Neo4j-OGM，方便Neo4j用户迁移。"}
{"id": "TEST1-86", "output_field": "`OPTIONAL MATCH`在GQL中用于执行可选的图模式匹配，允许查询结果中包含不满足匹配条件的部分，使得查询更加灵活，避免因部分数据缺失而导致整个查询失败。"}
{"id": "TEST1-87", "output_field": "通过`read_only`参数控制存储过程是否为只读。"}
{"id": "TEST1-88", "output_field": "RpcStatusException"}
{"id": "TEST1-89", "output_field": "交换两个元素的ID。"}
{"id": "TEST1-90", "output_field": "```\nMATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name, r.role\n```"}
{"id": "TEST1-91", "output_field": "TuGraph-DB图数据库社区版内置了6种基础算法。"}
{"id": "TEST1-92", "output_field": "Point, Linestring, Polygon"}
{"id": "TEST1-93", "output_field": "TuGraph支持麒麟操作系统，包括银河麒麟和中标麒麟，不仅限于企业版。"}
{"id": "TEST1-94", "output_field": "EWKB格式数据，表示点"}
{"id": "TEST1-95", "output_field": "TuGraph嵌入模式的API允许用户打开或创建数据库，以及执行查询和修改数据库的操作。"}
{"id": "TEST1-96", "output_field": "1970-01-01"}
{"id": "TEST1-97", "output_field": "抛出 InputError"}
{"id": "TEST1-98", "output_field": "在单命令模式下，使用 lgraph_cypher 执行 Cypher 查询并将结果显示为表格格式的命令行参数是 `-format table`。"}
{"id": "TEST1-99", "output_field": "`reduce_plus`函数将其两个参数进行累加操作，返回它们的和。"}
{"id": "TEST1-100", "output_field": "TuGraph的边默认是有向边。如果需要模拟无向边，可以通过创建两个方向相反的边来实现。"}
{"id": "TEST1-101", "output_field": "FieldData类提供的构造函数可能包括用于初始化基本数据类型、复杂数据结构以及特定格式数据的多种构造函数，具体取决于类的定义和设计意图。通常包括默认构造函数、带参数的构造函数以及拷贝构造函数等。若需确切信息，需查阅FieldData类的具体实现文档。"}
{"id": "TEST1-102", "output_field": "TuGraph-DB通过基于历史航班数据设计最优航班规划，帮助用户在满足航班间隔要求下选择费用最低和飞行时间最短的路径，从而解决旅行路线选择的烦恼。"}
{"id": "TEST1-103", "output_field": "检查对象是否存在。"}
{"id": "TEST1-104", "output_field": "最低配置为4核，建议配置为64核。"}
{"id": "TEST1-105", "output_field": "视频映射处理"}
{"id": "TEST1-106", "output_field": "当尝试更新一个存在的边但标签与指定的不符时，更新操作可能会失败或产生错误，具体取决于系统的处理机制。某些系统可能拒绝更新并返回错误信息，而其他系统可能允许更改标签或创建新的边。需要参考具体系统的文档以了解确切行为。"}
{"id": "TEST1-107", "output_field": "不是。批量在线导入是通过向TuGraph实例发送导入请求，使用离线导入方式将数据导入临时db，再迁移到新子图中完成的。"}
{"id": "TEST1-108", "output_field": "lgraph_backup工具的主要功能是备份TuGraph数据库中的数据到另一个目录下。"}
{"id": "TEST1-109", "output_field": "GET /db/{graph_name}/node/{vertex_id}/property"}
{"id": "TEST1-110", "output_field": "实体、关系、属性"}
{"id": "TEST1-111", "output_field": "TuGraph-DB支持存储过程，支持C++、Python和Rust语言编写存储过程。"}
{"id": "TEST1-112", "output_field": "获取边属性信息"}
{"id": "TEST1-113", "output_field": "TuGraph-DB的主要功能是提供高效、易用、可靠的图数据库平台，支持管理和分析复杂关联数据。它支持属性图模型、实时增删查改、多重图、多图、ACID事务处理、点边索引、混合事务和分析处理（HTAP）、主流图查询语言（OpenCypher、ISO GQL等）、OLAP API、基于C++/Python的存储过程、图可视化工具等。"}
{"id": "TEST1-114", "output_field": "RpcStatusException(res.error())"}
{"id": "TEST1-115", "output_field": "2024.3"}
{"id": "TEST1-116", "output_field": "TuGraph-DB使用CMake作为编译工具，支持的C++标准为C++17。"}
{"id": "TEST1-117", "output_field": "Cython.cimports.libcpp.unordered_map是Cython库中的一个模块，用于在Python中导入和使用C++的std::unordered_map容器，以实现高性能的哈希表操作。"}
{"id": "TEST1-118", "output_field": "-d {db_dir}, -g {graph_list}"}
{"id": "TEST1-119", "output_field": "TuGraph目前基于ISO GQL (ISO/IEC 39075) Antlr4 语法文件实现了GQL，并做了一些扩展与改造。"}
{"id": "TEST1-120", "output_field": "1.2.17, 30.1-jre"}
{"id": "TEST1-121", "output_field": "设置指定用户对特定图的访问权限。"}
{"id": "TEST1-122", "output_field": "在 TuGraph-DB 运行单元测试的过程中，日志可以通过以下方式输出：\n\n1. 使用 `LOG_DEBUG()`, `LOG_INFO()`, `LOG_WARN()`, `LOG_ERROR()`, `LOG_FATAL()` 等宏来输出不同级别的日志信息。\n2. 将日志输出到控制台，通过 `--log_dir \"\"` 配置项将日志输出到终端。\n3. 将日志输出到文件，通过 `log_dir` 配置项指定日志文件的输出路径。"}
{"id": "TEST1-123", "output_field": "在GeaBase查询中，使用\"Nav\"语句的一种情况是为了导航到特定实体或关系的属性，以便进一步检索或操作数据。例如，使用\"Nav\"可以从一个实体跳转到其关联的另一个实体。这常用于复杂查询中，以简化数据访问路径。"}
{"id": "TEST1-124", "output_field": "有接口支持通过pair unique索引查找关系边，并可根据pair unique的值更新对应的边数据。可以使用`db.upsertEdge`接口，结合pair unique索引实现这一需求。具体操作是先为边添加pair unique索引，然后使用`db.upsertEdge`根据索引值进行查找和更新。"}
{"id": "TEST1-125", "output_field": "TuGraph Explorer 的功能现在可以在 TuGraph Browser 中找到。"}
{"id": "TEST1-126", "output_field": "SybilRank算法主要通过计算节点的信任值来进行计算，利用网络中的信任传播机制，对节点进行排名以识别恶意节点。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中提供了丰富的语义信息，使得实体之间的关系更加明确和具体。属性可以用于实体识别、关系抽取、链接预测等任务，有助于提高知识图谱的质量和实用性。"}
{"id": "TEST1-128", "output_field": "在TuGraph项目中，提交代码前先提交一个issue是为了避免与其他开发者或项目计划冲突，确保修改的必要性和提升空间，并通过讨论达成一致，减少沟通成本和PR被拒绝的情况。"}
{"id": "TEST1-129", "output_field": "社区版提供了基础的图数据库功能和成熟的产品设计，适用于单实例部署，支持TB级别的数据规模，适合学习和实现小型项目。企业版则在社区版的基础上增加了分布式集群架构、覆盖全生命周期的图平台、多种图计算引擎、流式和大数据类数据源支持、多地多中心部署形态以及专家支持服务等，是商业化解决方案的理想选择。"}
{"id": "TEST1-130", "output_field": "bfs_standalone程序的输出结果如下：\n\n```text\nprepare_cost = 0.10(s)\ncore_cost = 0.02(s)\nfound_vertices = 3829\noutput_cost = 0.00(s)\ntotal_cost = 0.11(s)\nDONE.\n```"}
{"id": "TEST1-131", "output_field": "当key_start和key_end相等且等于v时，VertexIndexIterator返回一个指向所有字段值为v的顶点的迭代器。"}
{"id": "TEST1-132", "output_field": "使用`lgraph_import`工具，通过配置文件指定顶点数据的路径和格式，然后选择在线或离线模式将数据导入TuGraph图数据库。配置文件中需定义schema和files部分，确保顶点数据的label和格式正确。导入时，可使用命令行参数如`--delimiter`指定CSV文件分隔符，确保数据正确解析。"}
{"id": "TEST1-133", "output_field": "lgraph_api::Transaction用于在图数据库中创建和管理读写事务，支持对图数据进行查询、修改等操作。"}
{"id": "TEST1-134", "output_field": "std::runtime_error"}
{"id": "TEST1-135", "output_field": "字符串格式"}
{"id": "TEST1-136", "output_field": "localhost:9111"}
{"id": "TEST1-137", "output_field": "TuGraph的图分析引擎主要面向全图/全量数据分析类的任务。"}
{"id": "TEST1-138", "output_field": "node_id字段应重命名为其他不与id冲突的名称，例如node_uuid或vertex_id。"}
{"id": "TEST1-139", "output_field": "session.save(relationship);"}
{"id": "TEST1-140", "output_field": "可以通过调整查询语句或使用插件API来统一返回数据结构，使其符合可视化页面的需求。例如，使用RETURN {name: p.name, age: p.age}来构造统一的结构。"}
{"id": "TEST1-141", "output_field": "在基于ARM的机器（如Mac M1）上编译TuGraph时，配置CMake需要添加`-DENABLE_BUILD_ON_AARCH64=ON`参数，例如：`cmake .. -DOURSYSTEM=ubuntu -DENABLE_BUILD_ON_AARCH64=ON`。"}
{"id": "TEST1-142", "output_field": "最低配置为4核CPU、4GB内存、100GB外存，建议配置为64核CPU、512GB内存、2TB NVMe SSD，操作系统推荐使用CentOS 7.3。"}
{"id": "TEST1-143", "output_field": "使用GQL的MATCH子句，指定起点和终点的标签及属性，通过路径匹配模式查询两点间的通路。例如：`MATCH (n:Start)-[e*]->(m:End) RETURN e`。"}
{"id": "TEST1-144", "output_field": "TuGraph 目前不支持通过 Cypher 或 Python 直接修改 Schema，Schema 修改通常需要通过特定的管理工具或 API 进行。"}
{"id": "TEST1-145", "output_field": "TuGraph-Restful-Server 使用 brpc 框架支持其 HTTP 协议，提供了文件上传、数据导入、导入进度查询、Cypher 查询和文件删除等功能。"}
{"id": "TEST1-146", "output_field": "用户将不再从该角色中获得任何权限。"}
{"id": "TEST1-147", "output_field": "您应确保公司已授权您提交贡献内容，并遵守公司贡献者许可协议的条款，同时公司应在附表A中指定您为有权提交贡献内容的员工。"}
{"id": "TEST1-148", "output_field": "使用DataX工具导入数据时，通过配置清空数据的选项而不影响schema。具体操作为在DataX的配置文件中设置仅清空数据的相关参数。详细步骤需参考DataX文档。"}
{"id": "TEST1-149", "output_field": "OGM 类似于 MyBatis 在于它提供了对象-关系映射功能，支持将 Java 对象映射到数据库结构，简化了数据库操作，并允许通过面向对象的方式操作数据库。"}
{"id": "TEST1-150", "output_field": "TuGraph Browser可以通过Docker进行部署。具体步骤如下：\n\n1. 下载TuGraph Browser的Docker镜像：`docker pull tugraph/tugraph-browser`\n2. 创建容器并运行：`docker run -d -p 8080:8080 tugraph/tugraph-browser`\n3. 访问TuGraph Browser：在浏览器中输入`http://localhost:8080`，使用默认用户名`admin`和密码`73@TuGraph`登录。\n\n以上步骤即可完成TuGraph Browser的Docker部署。"}
{"id": "TEST1-151", "output_field": "TuGraph-DB有数据导入工具，名为lgraph_import。相关代码可以在TuGraph的GitHub仓库中找到。"}
{"id": "TEST1-152", "output_field": "图数据库在性能、兼容性和直观性方面具有独特优势。"}
{"id": "TEST1-153", "output_field": "Java、Python、C++"}
{"id": "TEST1-154", "output_field": "WKT与WKB格式"}
{"id": "TEST1-155", "output_field": "导入数据到数据库。"}
{"id": "TEST1-156", "output_field": "TuGraph企业版是TuGraph的商业化版本，它提供了更完善的商业化功能，包括分布式集群架构、覆盖探索、研发、服务、运维管理全生命周期的一站式图平台、在线、近线、离线的图计算引擎、支持流式、大数据类数据源、多地多中心的部署形态，以及专家支持服务等。企业版是商业化解决方案的理想选择。"}
{"id": "TEST1-157", "output_field": "POST /db/{graph_name}/cpp_plugin/list"}
{"id": "TEST1-158", "output_field": "广度优先搜索、网页排序、单源最短路径、弱连通分量、平均集聚系数、标签传播"}
{"id": "TEST1-159", "output_field": "7070"}
{"id": "TEST1-160", "output_field": "POST /role/{role_name}/disable\n当操作成功时返回true。"}
{"id": "TEST1-161", "output_field": "不会丢失。TuGraph的更新过程不影响原库数据，但建议在更新前进行数据备份以确保安全。使用`lgraph_backup`工具可以备份原库数据，以便在需要时恢复。"}
{"id": "TEST1-162", "output_field": "false"}
{"id": "TEST1-163", "output_field": "磁盘IO警报通常在磁盘读写操作延迟过高、IOPS（每秒输入输出操作数）超出阈值或磁盘故障等情况下触发。这些情况可能影响系统性能和数据完整性。具体触发条件取决于系统设置和监控策略。"}
{"id": "TEST1-164", "output_field": "invalid"}
{"id": "TEST1-165", "output_field": "DUAL_DIRECTION表示输入文件为非对称图，加载的图也为非对称图。"}
{"id": "TEST1-166", "output_field": "Goto函数将寻找最近的顶点作为目标。如果找不到指定ID的顶点，它会根据nearest参数为true的设置，定位到距离最近的顶点。最终，函数会导航至该最近顶点。"}
{"id": "TEST1-167", "output_field": "在BFS算法中，最终返回的结果包括：\n- core_cost: 算法运行时间\n- found_vertices: 查找到的点的个数\n- num_edges: 图数据的边数量\n- num_vertices: 图数据的点数量\n- output_cost: 结果写回数据库的时间\n- prepare_cost: 预处理阶段时间\n- total_cost: 算法整体运行时间"}
{"id": "TEST1-168", "output_field": "24小时"}
{"id": "TEST1-169", "output_field": "在GetEdgeProp命令中，使用`-t`或`--timestamp`选项来指定时间戳字段。例如：`GetEdgeProp -t \"2023-01-01T00:00:00Z\"`。"}
{"id": "TEST1-170", "output_field": "默认的端口号是7070。"}
{"id": "TEST1-171", "output_field": "TuGraph-DB支持运行图算法，社区版内置6个算法，商业版内置了25种算法。可以通过C++/Python图分析引擎API对图数据进行快速导出和并行计算，运行诸如PageRank、LPA、WCC等迭代式图算法。"}
{"id": "TEST1-172", "output_field": "Python存储过程接口包含的重要组件和功能有：`liblgraph_python_api.AccessLevel`类，用于表示用户在图上的访问级别；`liblgraph_python_api.EdgeUid`类，用于表示边的标识符；`liblgraph_python_api.FieldData`类，用于表示字段值的数据类型，并提供了多种方法来获取不同类型的数据。此外，Python存储过程接口还支持编写和加载Python存储过程，以便在服务器端执行复杂的查询和更新逻辑。"}
{"id": "TEST1-173", "output_field": "True, False"}
{"id": "TEST1-174", "output_field": "在TuGraph中，复杂图分析操作（如PageRank、Louvain算法）需要先将图数据导出成内存中的快照，该快照用于快速访问，不涉及ACID写支持，采用CSR排布以提高读效率。然后通过OLAP API进行串行执行，每个操作使用全部CPU资源。快照可以从外部存储或图存储创建，并可能需要ID映射。"}
{"id": "TEST1-175", "output_field": "对输出数据进行默认过滤处理。"}
{"id": "TEST1-176", "output_field": "在Java运行时，MyBatis Generator的XML配置文件中，`targetProject`应配置为生成文件的绝对路径或相对于当前工作目录的相对路径，确保路径正确且具有写权限。例如，`<targetProject>/path/to/generated-sources</targetProject>`。此外，确保`targetProject`指向的目录已存在，否则生成过程会失败。"}
{"id": "TEST1-177", "output_field": "class"}
{"id": "TEST1-178", "output_field": "在TuGraph中，目前不支持直接使用Cypher语句删除图中的重复关系。需要通过其他方法，如编写自定义脚本或使用TuGraph提供的API来处理重复关系。建议查阅TuGraph官方文档获取更详细的解决方案。"}
{"id": "TEST1-179", "output_field": "在默认情况下，第一次快照的时间是在0到ha_snapshot_interval_s秒内的任一时刻随机设置。"}
{"id": "TEST1-180", "output_field": "来源的完整信息、您所知悉的任何许可或其他限制（包括相关专利、商标和许可协议）、显著标明“以第三方名义提交：【填写姓名】”。"}
{"id": "TEST1-181", "output_field": "可能是查询条件设置不一致或数据处理逻辑不同导致的差异。需要检查导入数据的一致性和查询逻辑的具体实现。确认是否存在数据过滤或排序规则的差异。"}
{"id": "TEST1-182", "output_field": "TuGraph-OGM 支持将 JAVA 对象（POJO）映射到 TuGraph 中，其中 JAVA 中的类映射为图中的节点、类中的集合映射为边、类的属性映射为图对象的属性，并提供了对应的函数操作图数据库。"}
{"id": "TEST1-183", "output_field": "在单节点模式下，liblgraph_client_python.client对象可以通过以下格式实例化：\n\n```python\nclient = liblgraph_client_python.client(\"127.0.0.1:19099\", \"admin\", \"73@TuGraph\")\n```\n\n其中，\"127.0.0.1:19099\"是服务器地址和端口，\"admin\"是登录用户名，\"73@TuGraph\"是登录密码。"}
{"id": "TEST1-184", "output_field": "`ValueError`"}
{"id": "TEST1-185", "output_field": "TuGraph 支持多种部署方式，包括本地包部署、Docker部署和云部署。"}
{"id": "TEST1-186", "output_field": "Corin Redgrave"}
{"id": "TEST1-187", "output_field": "如果指定了`--continue_on_error true`，则忽略数据完整性错误，并忽略违规行，可以继续导入。"}
{"id": "TEST1-188", "output_field": "使用 `Result.add_header()` 方法为表设置表头。"}
{"id": "TEST1-189", "output_field": "蚂蚁集团的个人贡献者许可协议（CLA）的主要目的是明确个人贡献者向蚂蚁集团或其关联方管理的项目提交文档和软件代码时所授予的知识产权许可。通过签署CLA，贡献者同意授予蚂蚁集团及其软件接收方永久性、全球范围、非排他、免许可费、免版权费和不可撤销的著作权和专利许可，以便复制、衍生、公开展示、公开执行、转授权和发布贡献内容及其衍生作品。"}
{"id": "TEST1-190", "output_field": "不包含TuGraph中Java、Python相关的功能，无C++ plugin编译运行，仅支持so上传。"}
{"id": "TEST1-191", "output_field": "Procedure及Embed主要使用了OlapOnDB类中的辅助函数。"}
{"id": "TEST1-192", "output_field": "AuthenticationError, InvalidPasswordError, UserNotFoundError"}
{"id": "TEST1-193", "output_field": "`Galaxy.CreateUser(name, password, desc)`"}
{"id": "TEST1-194", "output_field": "DeleteVertexLabel"}
{"id": "TEST1-195", "output_field": "用户将从该角色中获得无权限。"}
{"id": "TEST1-196", "output_field": "TuGraph Monitor、Prometheus、Grafana。"}
{"id": "TEST1-197", "output_field": "TuGraph 服务从配置文件 `lgraph.json` 中读取其配置。"}
{"id": "TEST1-198", "output_field": "10000"}
{"id": "TEST1-199", "output_field": "std::function<bool(OutEdgeIterator &, Path &, IteratorHelper &)>、std::function<bool(InEdgeIterator &, Path &, IteratorHelper &)>、std::function<bool(VertexIterator &, Path &, IteratorHelper &)>"}
{"id": "TEST1-200", "output_field": "Read-only transaction error or similar exception indicating write operations are not allowed."}
{"id": "TEST1-201", "output_field": "UDF的Python模块通常放在项目的特定目录下，如`/path/to/tugraph-db/udf/python`，具体路径可能因项目配置而异。"}
{"id": "TEST1-202", "output_field": "light-orange"}
{"id": "TEST1-203", "output_field": "目前文档中未提供删除图库数据的直接方法。通常，删除图库数据可能需要通过 TuGraph 提供的 API 或管理工具来实现。建议查阅 TuGraph 的官方文档或联系技术支持以获取正确的删除数据的方法。"}
{"id": "TEST1-204", "output_field": "success: 00, data: 包含查询结果"}
{"id": "TEST1-205", "output_field": "TuGraph选择使用B+树作为其底层存储数据结构，因为B+树具有较好的顺序读写性能，适合读性能优先的场景。而LSM树虽然随机写性能占优，但性能波动难以预期且增加设计成本。综合考虑，B+树更符合TuGraph的性能需求。"}
{"id": "TEST1-206", "output_field": "json_format"}
{"id": "TEST1-207", "output_field": "To improve query efficiency in TuGraph, consider the following approaches: optimizing Cypher query statements, using appropriate indexes, leveraging the compact data encoding for better read performance, and employing the B+ tree data structure for balanced read and write operations."}
{"id": "TEST1-208", "output_field": "当 FieldData 不是 INT8, INT16, INT32, 或 INT64 类型时，integer() 方法会抛出 std::bad_cast 异常。"}
{"id": "TEST1-209", "output_field": "TuGraph-DB的存储引擎使用了KV数据库，基于LMDB构建的。"}
{"id": "TEST1-210", "output_field": "在容器内，通过修改配置文件`/usr/local/etc/lgraph.json`中的`web`参数来切换新旧版本前端。若找不到`browser-resource`，确保镜像版本正确且文件路径无误。修改后执行`docker restart tugraph`使更改生效。"}
{"id": "TEST1-211", "output_field": "未提及图数据压缩相关信息。"}
{"id": "TEST1-212", "output_field": "B+树；TuGraph选择B+树主要是因为它具有较好的顺序读写性能，能够平衡读写操作，适合读性能优先的场景，并且避免了LSM树在读取和空间放大方面的缺点，简化了系统设计。"}
{"id": "TEST1-213", "output_field": "该文档未提供TuGraph-DB使用的boost库版本信息。"}
{"id": "TEST1-214", "output_field": "TuGraph适合新手、系统开发者、生产运维人员、研究人员等不同类型的用户。"}
{"id": "TEST1-215", "output_field": "创建实体，提交 Cypher，以及加载和调用存储过程。"}
{"id": "TEST1-216", "output_field": "100GB, 2TB NVMe SSD"}
{"id": "TEST1-217", "output_field": "自动创建该目录。"}
{"id": "TEST1-218", "output_field": "18446744073709551615"}
{"id": "TEST1-219", "output_field": "10"}
{"id": "TEST1-220", "output_field": "XMLMAPPER类型通过XML配置文件定义SQL语句和映射规则，接口方法在调用时由MyBatis框架解析XML文件生成对应的SQL命令并执行，返回结果映射到接口方法的返回类型。"}
{"id": "TEST1-221", "output_field": "图卷积层、激活函数、池化层、全连接层"}
{"id": "TEST1-222", "output_field": "gtest"}
{"id": "TEST1-223", "output_field": "TuGraph-db 支持先使用 Cypher 查询语言找到一个子图，然后在这个子图上运行图分析算法，例如 PageRank、KCore 等。"}
{"id": "TEST1-224", "output_field": "文档中未提及HA集群的snapshot删除时机。"}
{"id": "TEST1-225", "output_field": "TuGraph-DB目前支持Cypher图查询语言，并计划在将来支持ISO GQL查询语言。"}
{"id": "TEST1-226", "output_field": "没有"}
{"id": "TEST1-227", "output_field": "POST http://localhost:7070/role\nAccept: application/json; charset=UTF-8\nContent-Type: application/json; charset=UTF-8\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\nInput:\n{\"role\": \"new_role\", \"description\": \"This is a new role.\"}"}
{"id": "TEST1-228", "output_field": "不支持任意长度路径查询。"}
{"id": "TEST1-229", "output_field": "在Java运行时，`targetProject`在xml配置文件中通常配置在相应的标签内，例如 `<generatorConfiguration>` 或 `<context>` 标签下，具体格式为 `<property name=\"targetProject\" value=\"项目路径\"/>`。这样配置后，代码生成器会根据指定的路径生成相应的代码文件。"}
{"id": "TEST1-230", "output_field": "HA支持Witness角色和管理工具"}
{"id": "TEST1-231", "output_field": "在调用 \"CallGql\" 接口时，通常在请求参数中通过指定 \"graphName\" 或类似字段来设置要查询的图的名称。具体参数名称和传递方式可能因接口实现而异，需参考接口文档。例如，请求体中可能包含 `\"graphName\": \"yourGraphName\"`。"}
{"id": "TEST1-232", "output_field": "不能直接展示属性值，需通过查询语句获取。"}
{"id": "TEST1-233", "output_field": "tugraph-db兼容neo4j的通讯协议，因此可以使用neo4j的驱动连接tugraph-db的server。"}
{"id": "TEST1-234", "output_field": "可能原因：导入数据时未正确设置边属性索引，导致查询时无法找到相关边数据。解决方法：确保在导入数据前为边属性创建合适的索引，如unique或non_unique索引，并根据索引类型限制属性长度。"}
{"id": "TEST1-235", "output_field": "```json\n{\n  \"job\": {\n    \"setting\": {\n      \"speed\": {\n        \"channel\": 1\n      }\n    },\n    \"content\": [\n      {\n        \"reader\": {\n          \"name\": \"txtfilereader\",\n          \"parameter\": {\n            \"path\": [\"actors.csv\"],\n            \"encoding\": \"UTF-8\",\n            \"column\": [\n              {\n                \"index\": 0,\n                \"type\": \"string\"\n              },\n              {\n                \"index\": 1,\n                \"type\": \"string\"\n              }\n            ],\n            \"fieldDelimiter\": \",\"\n          }\n        },\n        \"writer\": {\n          \"name\": \"tugraphwriter\",\n          \"parameter\": {\n            \"url\": \"bolt://127.0.0.1:27687\",\n            \"username\": \"admin\",\n            \"password\": \"73@TuGraph\",\n            \"graphName\": \"default\",\n            \"labelType\": \"VERTEX\",\n            \"labelName\": \"actor\",\n            \"batchNum\": 1000,\n            \"properties\": [\"aid\", \"name\"]\n          }\n        }\n      }\n    ]\n  }\n}\n```"}
{"id": "TEST1-236", "output_field": "创建新子图时需要提供子图名称作为参数。例如，使用命令 `CALL dbms.graph.createGraph('graph1')` 时，`'graph1'` 是必需的参数。"}
{"id": "TEST1-237", "output_field": "通过比较导出后再导入的数据与原始数据的查询结果是否一致来验证。具体步骤为：先查询原始数据库，记录结果；然后导出数据，再导入到新目录；最后在新数据库中执行相同的查询，比较两次查询结果是否相同。"}
{"id": "TEST1-238", "output_field": "返回值代表节点vi的出度。"}
{"id": "TEST1-239", "output_field": "TuGraph Explorer 的功能已经合并到 TuGraph Browser 中。可以在 TuGraph Browser 部分找到相关功能。具体文档路径为 \"../4.user-guide/1.tugraph-browser.md\"。"}
{"id": "TEST1-240", "output_field": "返回代码 200 和新增加的点的 vid 列表。"}
{"id": "TEST1-241", "output_field": "TuGraph支持混合检索vector+知识图谱，通过Graph RAG框架兼容向量数据库和图数据库基座，实现高效的数据查询和分析。"}
{"id": "TEST1-242", "output_field": "改善服务器刚开启时因频繁IO操作导致的系统性能下降。"}
{"id": "TEST1-243", "output_field": "源顶点ID"}
{"id": "TEST1-244", "output_field": "`OPTIONAL MATCH`子句用于在查询中寻找可能不存在的匹配模式，允许查询结果中包含部分缺失的数据，而不影响整个查询的执行。它使得查询更加灵活，能够处理图中不完全连接的情况。"}
{"id": "TEST1-245", "output_field": "GraphDB实例无法使用的情况可能包括：配置文件路径错误或无读取权限、命令行参数无法识别、许可证文件路径错误或无法访问等。"}
{"id": "TEST1-246", "output_field": "liblgraph.so"}
{"id": "TEST1-247", "output_field": "当GetNumOutEdges函数达到限制时，它会返回当前已达到的边数或一个特定错误码，具体行为取决于函数的实现细节。通常，它会停止进一步处理并通知调用者已达到限制。如果未明确说明，可能需要查阅函数文档以了解确切行为。"}
{"id": "TEST1-248", "output_field": "文本中未提及BFS算法及其更新活跃顶点数量的具体方式。"}
{"id": "TEST1-249", "output_field": "64"}
{"id": "TEST1-250", "output_field": "PUT, POST"}
