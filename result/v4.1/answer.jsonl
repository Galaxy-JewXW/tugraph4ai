{"id": "TEST1-1", "output_field": "会抛出异常或错误提示，指出该值不在value_dict中。"}
{"id": "TEST1-2", "output_field": "Christopher Nolan, Corin Redgrave"}
{"id": "TEST1-3", "output_field": "使用GET方法访问`/role/`接口，并携带有效的管理员授权信息。例如请求：`GET http://localhost:7070/role`，响应中将包含所有角色及其信息。"}
{"id": "TEST1-4", "output_field": "每个图项目存储最多2^(40)个点数据。每个点或边类型的属性数量是1024。"}
{"id": "TEST1-5", "output_field": "没有，可能是镜像版本问题或路径错误。检查当前路径或确认镜像版本是否包含该脚本。"}
{"id": "TEST1-6", "output_field": "是的，使用lgraph_server -d start方式启动会在pwd路径下生成pid文件。目前没有参数可以直接控制pid文件的路径。"}
{"id": "TEST1-7", "output_field": "在ARM机器（如M1芯片的Mac）编译TuGraph时，需要在cmake命令中加上 `-DENABLE_BUILD_ON_AARCH64=ON`。"}
{"id": "TEST1-8", "output_field": "cleanup_dir指定的目录用于在函数执行完成后进行清理操作。"}
{"id": "TEST1-9", "output_field": "启动 TuGraph 的命令是 `./lgraph_server -d start -c lgraph.json`。"}
{"id": "TEST1-10", "output_field": "TuGraph团队为了提高解析速度所进行的优化主要手段包括：改变关键数据的ownership，减少对锁的依赖；通过“只调用一次”（`call_once`）手段将关键数据结构的初始化构建成本均摊。"}
{"id": "TEST1-11", "output_field": "DELETE"}
{"id": "TEST1-12", "output_field": "AllocVertexSubset函数用于分配一个ParallelBitset集合，这个集合用来表示所有点的状态是否激活。"}
{"id": "TEST1-13", "output_field": "检查内存和服务器配置，分批次导入数据，确认数据格式无误。"}
{"id": "TEST1-14", "output_field": "TuGraph支持的导出格式有csv和json。"}
{"id": "TEST1-15", "output_field": "还有其他方式，比如调整索引策略、优化查询逻辑、配置系统参数等。"}
{"id": "TEST1-16", "output_field": "url、user、password"}
{"id": "TEST1-17", "output_field": "通过`from cython.cimports.olap_base import *`导入Olap相关模块，图数据库模块导入方式未提及。"}
{"id": "TEST1-18", "output_field": "'unique'参数指定索引是否唯一，即该字段值在所有边中不可重复；'pair_unique'参数指定索引是否为成对唯一，即该字段值在同一对顶点间不可重复。"}
{"id": "TEST1-19", "output_field": "图数据库相比于关系型数据库的优势主要体现在性能、兼容性和直观性三个方面。"}
{"id": "TEST1-20", "output_field": "是的，报错是因为属性值长度超出了唯一索引的限制。需要缩短属性值或调整索引限制。"}
{"id": "TEST1-21", "output_field": "400"}
{"id": "TEST1-22", "output_field": "编译环境、运行环境和精简运行环境。"}
{"id": "TEST1-23", "output_field": "TuGraph-DB新增支持的空间数据类型有：POINT、LINESTRING、POLYGON。"}
{"id": "TEST1-24", "output_field": "extra"}
{"id": "TEST1-25", "output_field": "leader"}
{"id": "TEST1-26", "output_field": "WriteNotAllowed"}
{"id": "TEST1-27", "output_field": "VertexIndexIterator"}
{"id": "TEST1-28", "output_field": "可以指定错误继续执行和线程数。"}
{"id": "TEST1-29", "output_field": "get_vertex"}
{"id": "TEST1-30", "output_field": "Unauthorized"}
{"id": "TEST1-31", "output_field": "当节点的出度大于0时，pagerank值初始化为1除以节点总数，然后除以节点的出度。"}
{"id": "TEST1-32", "output_field": "csv和json"}
{"id": "TEST1-33", "output_field": "该错误表明在读取数组时超出了实际大小，所需大小为4字节，但实际只有2字节。可能是因为数据损坏或读取逻辑错误。建议检查数据源和读取代码，确保数据完整性和正确性。"}
{"id": "TEST1-34", "output_field": "只读"}
{"id": "TEST1-35", "output_field": "CSV文件中的栏位名称需与配置文件中的columns字段名称相匹配，以确保数据正确导入。具体对应方式可通过配置文件中的映射规则定义。若栏位名称不一致，需在配置文件中设置相应的映射关系。"}
{"id": "TEST1-36", "output_field": "在创建一个顶点标签时，需要指定以下参数：\n1. `label_type`（标签类型）：字符串，值为 'vertex'。\n2. `label_name`（标签名称）：字符串，指定顶点标签的名称。\n3. `extra`（额外信息）：字符串，对于顶点标签，表示主属性。\n4. `field_spec`（字段规格）：列表，包含每个字段的规格，每个字段规格是一个字符串列表，形式为 [字段名称, 字段类型, 是否可选]。"}
{"id": "TEST1-37", "output_field": "TuGraph Browser 的默认端口号是 7070。"}
{"id": "TEST1-38", "output_field": "平均值计算法"}
{"id": "TEST1-39", "output_field": "蚂蚁集团"}
{"id": "TEST1-40", "output_field": "图学习系统是解决图学习问题的。"}
{"id": "TEST1-41", "output_field": "label_name, field_name, field_value"}
{"id": "TEST1-42", "output_field": "通过配置文件或命令行设置 `rpc_port` 参数。在配置文件中，添加或修改 `\"rpc_port\": <端口号>`；在命令行中，使用 `--rpc_port <端口号>` 选项。默认端口为 9090。"}
{"id": "TEST1-43", "output_field": "在处理关联关系时，图数据库比关系型数据库有更高的性能，因为图数据库可以直接访问关联数据，而无需像关系型数据库那样使用JOIN操作，从而显著提高了查询效率。"}
{"id": "TEST1-44", "output_field": "默认的登录密码是：73@TuGraph。"}
{"id": "TEST1-45", "output_field": "field_value_strings参数的数据类型是std::vector<std::string>。"}
{"id": "TEST1-46", "output_field": "是独立运行的。"}
{"id": "TEST1-47", "output_field": "url, user, password"}
{"id": "TEST1-48", "output_field": "使用`lgraph_cypher.py`工具，可以通过命令行参数`-s`指定单行Cypher查询命令，并通过重定向输出到文件来保存结果。例如，运行以下命令将查询结果保存到`results.txt`文件中：\n\n```powershell\n$ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" > results.txt\n```"}
{"id": "TEST1-49", "output_field": "数据和日志目录的持久化位置在宿主机的`/root/tugraph/`目录下。"}
{"id": "TEST1-50", "output_field": "通过点 ID 直接指定单个起始点（`SetFrontier(size_t root_vid)`）、通过点 ID 列表指定多个起始点（`SetFrontier(ParallelVector & root_vids)`）、通过过滤函数指定满足条件的起始点（`SetFrontier(std::function root_vertex_filter)`）。"}
{"id": "TEST1-51", "output_field": "设置字段的值。"}
{"id": "TEST1-52", "output_field": "TuGraph-DB图数据库是由蚂蚁集团与清华大学联合研发的。"}
{"id": "TEST1-53", "output_field": "精简运行环境不需要额外的系统库。"}
{"id": "TEST1-54", "output_field": "该函数通过 root_vertex_filter 参数指定的过滤函数来设置初始的遍历前沿。每个顶点都会被检查，只有当 root_vertex_filter 返回 true 时，该顶点才会被包含在初始前沿中。"}
{"id": "TEST1-55", "output_field": "包含。"}
{"id": "TEST1-56", "output_field": "镜像 tugraph-runtime-centos7 启动所需资源取决于具体配置，但建议配置为 CPU Xeon E5 2670 v4、内存 256GB、硬盘 1TB NVMe SSD。"}
{"id": "TEST1-57", "output_field": "属性个数（2-16个）、属性长度之和（唯一索引不超过480-2*(属性个数-1)字节，非唯一索引不超过475-2*(属性个数-1)字节）"}
{"id": "TEST1-58", "output_field": "`InvalidTxn`"}
{"id": "TEST1-59", "output_field": "TuGraphClient 是 TuGraph 的 Python 客户端，它允许用户通过 Python 代码与 TuGraph 图数据库进行交互。"}
{"id": "TEST1-60", "output_field": "TuGraph 支持 X86_64 和 ARM64 架构的硬件平台。"}
{"id": "TEST1-61", "output_field": "是的，前两个参数`personDesc`和`person`的格式与执行导入脚本时的格式相同。`personDesc`是数据格式描述，`person`是要导入的数据内容。"}
{"id": "TEST1-62", "output_field": "类中的集合映射为边，类的属性映射为图对象的属性。"}
{"id": "TEST1-63", "output_field": "当前DateTime对象不会被修改。"}
{"id": "TEST1-64", "output_field": "标签存在且添加的字段不重复且默认值类型兼容。"}
{"id": "TEST1-65", "output_field": "EdgeData"}
{"id": "TEST1-66", "output_field": "RPC 是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-67", "output_field": "在TuGraph中，主键是用户自定义的点数据主键，默认为唯一索引，在对应的点类型中唯一。"}
{"id": "TEST1-68", "output_field": "RpcException是一种与RPC请求处理相关的异常。"}
{"id": "TEST1-69", "output_field": "不支持。"}
{"id": "TEST1-70", "output_field": "TuGraph团队针对Antlr4 C++ target的并发性能进行了优化，成功将其提升了超过10倍。"}
{"id": "TEST1-71", "output_field": "TuGraph要求每个节点和关系必须有一个且仅有一个标签，如果没有标签则会报错，如果有多个标签则会选择第一个标签。OpenCypher允许节点和关系有0到多个标签。"}
{"id": "TEST1-72", "output_field": "true"}
{"id": "TEST1-73", "output_field": "不支持"}
{"id": "TEST1-74", "output_field": "字符串格式"}
{"id": "TEST1-75", "output_field": "SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)"}
{"id": "TEST1-76", "output_field": "无法从提供的信息中确定GeaBase的主要部署方式所需时间。"}
{"id": "TEST1-77", "output_field": "点和边"}
{"id": "TEST1-78", "output_field": "Java、Python、C++"}
{"id": "TEST1-79", "output_field": "存储过程的响应列表可以通过向 `/db/{graph_name}/cpp_plugin|python_plugin` 发送 GET 请求来获取。"}
{"id": "TEST1-80", "output_field": "RPC接口是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-81", "output_field": "acted_in, directed"}
{"id": "TEST1-82", "output_field": "使用 `lgraph_server -d start -c lgraph.json` 命令启动 TuGraph 服务器。"}
{"id": "TEST1-83", "output_field": "会抛出异常。"}
{"id": "TEST1-84", "output_field": "TuGraph 支持 X86_64 和 ARM64 架构的硬件平台。"}
{"id": "TEST1-85", "output_field": "TuGraph-OGM通过将JAVA对象（POJO）映射到TuGraph数据库中，使得JAVA中的类可以映射为图中的节点、类中的集合映射为边、类的属性映射为图对象的属性，并提供了对应的函数操作图数据库。"}
{"id": "TEST1-86", "output_field": "`OPTIONAL MATCH` 在 GQL 中用于执行可选的匹配操作，允许查询结果中包含不满足匹配条件的部分，避免因不匹配而导致整个查询失败。"}
{"id": "TEST1-87", "output_field": "通过`read_only`参数控制存储过程是否为只读。如果`read_only`为`true`，则存储过程为只读；如果为`false`，则不是只读。"}
{"id": "TEST1-88", "output_field": "RpcStatusException"}
{"id": "TEST1-89", "output_field": "交换Transform操作中的两个元素的ID。"}
{"id": "TEST1-90", "output_field": "MATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name, r.role"}
{"id": "TEST1-91", "output_field": "TuGraph-DB图数据库社区版内置了6种基础算法。"}
{"id": "TEST1-92", "output_field": "TuGraph-DB支持的三种空间数据类型是：点（Point）、折线（Linestring）和多边形（Polygon）。"}
{"id": "TEST1-93", "output_field": "否，社区版也支持麒麟操作系统。"}
{"id": "TEST1-94", "output_field": "TuGraph-DB中存储Point类型数据的格式是EWKB格式。"}
{"id": "TEST1-95", "output_field": "创建、查询和修改图。"}
{"id": "TEST1-96", "output_field": "1970/1/1"}
{"id": "TEST1-97", "output_field": "在调用 `bool DeleteVertexIndex` 函数时，如果给定的 `vertex_label` 或 `field` 不存在，将会抛出 `InputError` 异常。"}
{"id": "TEST1-98", "output_field": "在单命令模式下，使用 lgraph_cypher 通过命令行参数来执行一条 Cypher 查询并将结果显示为表格格式，可以使用 `-s` 参数指定查询语句，并使用 `-format` 参数指定输出格式为 `table`。例如：\n\n```powershell\n$ ./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" -format table\n```"}
{"id": "TEST1-99", "output_field": "reduce_plus函数将两个参数相加。"}
{"id": "TEST1-100", "output_field": "不支持无向边，但可以通过创建两个方向相反的有向边来模拟无向边。"}
{"id": "TEST1-101", "output_field": "FieldData类提供以下构造函数：FieldData(int data)、FieldData(double data)、FieldData(String data)。"}
{"id": "TEST1-102", "output_field": "TuGraph-DB通过基于部分公开历史航班数据，帮助用户设计多个城市的最优航班规划，返回满足前后航班间隔要求下的费用最低和飞行时间最短的路径规划，从而解决旅行时选择路线的烦恼。"}
{"id": "TEST1-103", "output_field": "判断顶点或边是否具有某个字段。"}
{"id": "TEST1-104", "output_field": "最低配置是4个核心，建议配置是64个核心。"}
{"id": "TEST1-105", "output_field": "用于将视频数据映射到特定结构或格式。"}
{"id": "TEST1-106", "output_field": "抛出异常"}
{"id": "TEST1-107", "output_field": "不是。批量在线导入通常使用`LOAD CSV`或`UNWIND`等Cypher语句，而不是简单的`CREATE (n), (m)`。后者仅用于创建单个节点。"}
{"id": "TEST1-108", "output_field": "`lgraph_backup` 工具的主要功能是将一个 TuGraph 数据库中的数据备份到另一个目录下。"}
{"id": "TEST1-109", "output_field": "通过GET方法，使用URI `/db/{graph_name}/node/{vertex_id}/property` 可以获取某个节点的所有属性。"}
{"id": "TEST1-110", "output_field": "点、边、属性"}
{"id": "TEST1-111", "output_field": "TuGraph-DB支持存储过程，支持C++、Python和Rust语言编写存储过程。"}
{"id": "TEST1-112", "output_field": "获取边缘属性\n\n（注：假设\"GetEdgeProp\"是一个操作或函数，通常用于获取边缘属性，如权重、标签等。由于具体上下文未提供，此为常见目的。）"}
{"id": "TEST1-113", "output_field": "TuGraph-DB的主要功能是管理和分析复杂关联数据。"}
{"id": "TEST1-114", "output_field": "RpcStatusException"}
{"id": "TEST1-115", "output_field": "2024年第三季度"}
{"id": "TEST1-116", "output_field": "C++17"}
{"id": "TEST1-117", "output_field": "Cython.cimports.libcpp.unordered_map是Cython中用于导入C++标准库中的unordered_map的模块。它允许在Cython代码中使用C++的unordered_map容器。"}
{"id": "TEST1-118", "output_field": "TuGraph 数据预热命令需要指定 `-d {db_dir}` 和 `-g {graph_list}` 这两个选项。"}
{"id": "TEST1-119", "output_field": "支持，但未完全支持所有GQL语法。"}
{"id": "TEST1-120", "output_field": "log4j-core版本号：2.14.1，guava版本号：30.1-jre"}
{"id": "TEST1-121", "output_field": "SetUserGraphAccess方法用于设置指定用户在图上的访问级别。"}
{"id": "TEST1-122", "output_field": "在TuGraph-DB中运行单元测试时，可以使用日志宏来输出日志信息。开发者需要在代码中包含 \"tools/lgraph_log.h\" 头文件，并直接调用相应的宏，如 LOG_DEBUG()、LOG_INFO()、LOG_WARN()、LOG_ERROR() 和 LOG_FATAL()，来输出不同级别的日志信息。"}
{"id": "TEST1-123", "output_field": "在GeaBase查询中，使用\"Nav\"语句的一种情况是进行图数据库中的节点遍历。"}
{"id": "TEST1-124", "output_field": "有，可以使用 `CALL db.findEdgeByPairUniqueIndex('edge_label', 'index_name', 'src_vertex_id', 'dst_vertex_id', 'unique_value')` 接口查找，然后根据返回的边数据更新属性。"}
{"id": "TEST1-125", "output_field": "TuGraph Browser"}
{"id": "TEST1-126", "output_field": "SybilRank算法在执行过程中主要采用基于网络结构的信任传播方式进行计算。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中用于存储实体的具体信息和关系的详细信息，增强图谱的表达能力，支持更精确的查询和分析。例如，节点的属性可以表示员工的工号、姓名等，边的属性可以表示雇佣关系的起始时间等，从而实现对复杂关系的细致描述和高效检索。"}
{"id": "TEST1-128", "output_field": "在提交代码前先提交一个issue，可以避免与其他开发者或项目计划产生冲突，减少重复工作。同时，TuGraph的维护人员会对您提出的bug或新增功能进行讨论，确定修改的必要性及是否有更好的方法。这样可以减少双方沟通成本，也减少pull request被拒绝的情况。"}
{"id": "TEST1-129", "output_field": "社区版是开源的单机版，提供了基础的图数据库功能和成熟的产品设计，支持TB级别的数据规模，适用于单实例部署。企业版则提供了更完善的商业化功能，包括分布式集群架构、一站式图平台、在线/近线/离线的图计算引擎、流式/大数据类数据源支持、多地多中心的部署形态以及专家支持服务等。"}
{"id": "TEST1-130", "output_field": "bfs_standalone程序的输出结果包括：prepare_cost, core_cost, found_vertices, output_cost, total_cost, 和DONE。"}
{"id": "TEST1-131", "output_field": "当key_start和key_end等于v时，VertexIndexIterator将指向所有具有字段值v的顶点。"}
{"id": "TEST1-132", "output_field": "将顶点数据以键值对形式存储，使用图数据库的API或查询语言创建顶点，并指定顶点的属性和值。例如，在Neo4j中使用`CREATE (n:Vertex {name: 'Vertex1', property: 'value'})`。确保数据符合图数据库的schema要求。"}
{"id": "TEST1-133", "output_field": "TuGraph的操作发生在事务中。事务是在GraphDB上以原子方式执行的操作序列。TuGraph事务提供完整的ACID保证。"}
{"id": "TEST1-134", "output_field": "std::runtime_error"}
{"id": "TEST1-135", "output_field": "如果指定json_format参数为false，返回结果的格式是二进制格式。"}
{"id": "TEST1-136", "output_field": "localhost:9111"}
{"id": "TEST1-137", "output_field": "全图/全量数据分析类的任务。"}
{"id": "TEST1-138", "output_field": "将node_id字段重命名为与id不冲突的名称，例如node_id改为nodeIdentifier。在XML配置中，确保所有字段名唯一，避免重复。如果无法更改字段名，考虑使用别名或映射机制处理。"}
{"id": "TEST1-139", "output_field": "session.query(\"CALL db.createEdgeLabel('DIRECT', '[]')\", emptyMap());"}
{"id": "TEST1-140", "output_field": "可以统一返回字典或元组结构，例如：`return {'name': p.name, 'age': p.age}` 或 `return (p.name, p.age)`，然后在可视化页面进行相应处理。"}
{"id": "TEST1-141", "output_field": "在ARM机器上编译TuGraph时，需要在CMake命令中添加 `-DENABLE_BUILD_ON_AARCH64=ON` 参数。"}
{"id": "TEST1-142", "output_field": "CPU: Intel Core i7 或 AMD Ryzen 7，内存: 16GB DDR4，显卡: NVIDIA GeForce RTX 3060 或 AMD Radeon RX 6600 XT，存储: 512GB SSD。"}
{"id": "TEST1-143", "output_field": "使用 `algo.shortestPath(startNode::NODE, endNode::NODE, config::MAP)` 查询两点间的最短路径。"}
{"id": "TEST1-144", "output_field": "TuGraph支持通过Cypher修改schema。"}
{"id": "TEST1-145", "output_field": "TuGraph Restful Server 使用 brpc 框架支持其 HTTP 协议，主要提供了文件上传、数据导入、导入进度查询、Cypher 查询和文件删除等功能。"}
{"id": "TEST1-146", "output_field": "禁用角色后，具有该角色的用户将不再从该角色中获得任何权限。"}
{"id": "TEST1-147", "output_field": "您需要保证您依法有权授予上述许可，并保证下文附表A所指定的任意公司员工均有权以公司名义提交贡献内容。"}
{"id": "TEST1-148", "output_field": "CALL db.dropAllVertex()"}
{"id": "TEST1-149", "output_field": "OGM与MyBatis在以下方面类似：都用于简化数据库操作，提供对象关系映射功能，以及支持动态SQL查询。"}
{"id": "TEST1-150", "output_field": "没有。"}
{"id": "TEST1-151", "output_field": "TuGraph-DB有数据导入工具，名为lgraph_import。相关代码未在提供的文档中明确指出。"}
{"id": "TEST1-152", "output_field": "图数据库相比关系型数据库的独特优势体现在性能、兼容性和直观性三个方面。在处理关联关系时，图数据库的性能比关系型数据库高2到4个数量级；图数据库可以灵活地添加新的点、边和属性，而无需像关系型数据库那样修改表结构；使用图的方式表达现实世界的关系更直接和自然，便于理解和查询。"}
{"id": "TEST1-153", "output_field": "客户端 SDK 支持Java、Python、C++等多种语言。"}
{"id": "TEST1-154", "output_field": "WKT与WKB格式"}
{"id": "TEST1-155", "output_field": "导入点或边数据"}
{"id": "TEST1-156", "output_field": "TuGraph企业版是一个商业化解决方案，提供了分布式集群架构，覆盖探索、研发、服务、运维管理全生命周期的一站式图平台，支持在线、近线、离线的图计算引擎，以及流式、大数据类数据源，多地多中心的部署形态和专家支持服务。"}
{"id": "TEST1-157", "output_field": "GET"}
{"id": "TEST1-158", "output_field": "TuGraph基础算法包包含以下算法：广度优先搜索（bfs）、网页排序（pagerank）、单源最短路径（sssp）、弱连通分量（wcc）、平均集聚系数（lcc）和标签传播（lpa）。"}
{"id": "TEST1-159", "output_field": "7070"}
{"id": "TEST1-160", "output_field": "调用 `DisableRole` 函数来禁用角色。当禁用角色操作成功时，该函数返回 `true`。"}
{"id": "TEST1-161", "output_field": "不会丢失。TuGraph更新后，通过数据迁移方案（兼容迁移、升级迁移、在线迁移）可以确保原库数据安全迁移到新环境。"}
{"id": "TEST1-162", "output_field": "如果节点中未包含属性\"belt\"，应该返回`null`。"}
{"id": "TEST1-163", "output_field": "磁盘IO警报在磁盘IO超过10MB/S时触发。"}
{"id": "TEST1-164", "output_field": "调用 Close() 函数后，InEdgeIterator 变为无效状态。"}
{"id": "TEST1-165", "output_field": "DUAL_DIRECTION表示输入文件为非对称图，加载图为非对称图。"}
{"id": "TEST1-166", "output_field": "当指定的顶点ID不存在，并且nearest参数为true时，Goto函数会尝试获取排序在指定顶点之后的下一个边。如果不存在这样的边，迭代器将变为无效。"}
{"id": "TEST1-167", "output_field": "found_vertices = 3829"}
{"id": "TEST1-168", "output_field": "24小时"}
{"id": "TEST1-169", "output_field": "使用`GetEdgeProp`命令时，通过在请求参数中添加`timestamp`字段并指定所需的时间戳值来查找特定时间戳的边属性。例如，可以在请求体中加入`\"timestamp\": \"指定的时间戳\"`。这样，命令将返回该时间戳对应的边属性信息。"}
{"id": "TEST1-170", "output_field": "默认的端口号是7070。"}
{"id": "TEST1-171", "output_field": "TuGraph-DB支持运行图算法。社区版内置了6个算法，商业版内置了25种算法。例如，可以运行PageRank、LPA、WCC等迭代式图算法。"}
{"id": "TEST1-172", "output_field": "Python存储过程接口包含以下重要组件和功能：AccessLevel类用于定义用户对图的访问级别；EdgeUid类用于表示边的唯一标识符，包含源顶点ID、目标顶点ID等属性；FieldData类用于表示字段值的数据类型，提供了一系列方法来获取不同类型的数据。此外，接口还支持加载、列举和删除存储过程等功能。"}
{"id": "TEST1-173", "output_field": "成功返回True，失败返回False。"}
{"id": "TEST1-174", "output_field": "复杂图分析操作需要先导出快照，然后在快照上执行。"}
{"id": "TEST1-175", "output_field": "过滤并输出默认结果。"}
{"id": "TEST1-176", "output_field": "在Java运行时，MyBatis Generator的XML配置文件中，`targetProject`应配置为生成文件的绝对路径或相对于当前工作目录的相对路径。例如，若生成文件位于`src/main/java`，则可配置为`targetProject=\"src/main/java\"`。确保路径正确且项目结构符合Maven或Gradle标准。"}
{"id": "TEST1-177", "output_field": "class"}
{"id": "TEST1-178", "output_field": "不能。"}
{"id": "TEST1-179", "output_field": "在默认情况下，第一次快照的时间设置为在0到ha_snapshot_interval_s内的任一时刻随机打第一次snapshot。"}
{"id": "TEST1-180", "output_field": "来源完整信息、个人所知许可或限制（包括专利、商标、许可协议）、显著标明“以第三方名义提交：【姓名】”。"}
{"id": "TEST1-181", "output_field": "可能是查询逻辑不一致或数据索引问题。检查查询条件和数据存储方式。确保查询逻辑和数据索引统一。"}
{"id": "TEST1-182", "output_field": "对象图映射（OGM）支持将JAVA对象（POJO）映射到TuGraph中，将JAVA中的类映射为图中的节点、类中的集合映射为边、类的属性映射为图对象的属性，并提供了对应的函数操作图数据库。"}
{"id": "TEST1-183", "output_field": "在单节点模式下，可以通过以下代码实例化liblgraph_client_python.client对象：\n\n```python\nclient = liblgraph_client_python.client(\"127.0.0.1:19099\", \"admin\", \"73@TuGraph\")\n```"}
{"id": "TEST1-184", "output_field": "InputError"}
{"id": "TEST1-185", "output_field": "云部署、Docker部署、本地部署。"}
{"id": "TEST1-186", "output_field": "Liam Neeson"}
{"id": "TEST1-187", "output_field": "可以继续导入，但需先解决导致失败的问题。"}
{"id": "TEST1-188", "output_field": "使用 `set_headers` 方法为表设置表头。"}
{"id": "TEST1-189", "output_field": "厘清个人贡献者向蚂蚁集团项目提交文档和软件代码的知识产权许可，确保贡献者同意相关许可条件。"}
{"id": "TEST1-190", "output_field": "不包含Java、Python相关功能，无C++ plugin编译运行，仅支持so上传。"}
{"id": "TEST1-191", "output_field": "OlapOnDB类。"}
{"id": "TEST1-192", "output_field": "InvalidGalaxy, Unauthorized"}
{"id": "TEST1-193", "output_field": "使用 `liblgraph_python_api.Galaxy` 类的 `CreateUser` 方法创建一个新的用户账户。需要提供用户名、密码和描述。"}
{"id": "TEST1-194", "output_field": "DeleteVertexLabel"}
{"id": "TEST1-195", "output_field": "无任何权限。"}
{"id": "TEST1-196", "output_field": "TuGraph Monitor, Prometheus, Grafana"}
{"id": "TEST1-197", "output_field": "TuGraph 服务在名为 `config.yaml` 的配置文件中读取其配置。"}
{"id": "TEST1-198", "output_field": "无法从提供的信息中找到`StudentMapper`接口中`selectVertex`方法的超时设置。请提供更多相关代码或配置信息。"}
{"id": "TEST1-199", "output_field": "出边过滤函数、入边过滤函数、出邻居点过滤函数、入邻居点过滤函数"}
{"id": "TEST1-200", "output_field": "WriteNotAllowed"}
{"id": "TEST1-201", "output_field": "`/usr/lib/pythonX.Y/dist-packages/` 或 `/usr/local/lib/pythonX.Y/dist-packages/`"}
{"id": "TEST1-202", "output_field": "graph_used"}
{"id": "TEST1-203", "output_field": "在图库应用中，长按要删除的图片，选择“删除”选项即可。部分设备可能需要进入图片详情页进行删除。具体操作可能因设备和操作系统版本而异。"}
{"id": "TEST1-204", "output_field": "新建立的边的 euid 列表。"}
{"id": "TEST1-205", "output_field": "TuGraph选择使用B+树作为其底层存储数据结构，是因为B+树具有较好的顺序读写性能，能够平衡读写操作，且在读操作更为频繁的情况下表现优异，减少了性能波动和设计复杂性。"}
{"id": "TEST1-206", "output_field": "接口 \"CallProcedureToLeader\" 支持通过参数 \"json_format\" 来改变返回结果的格式。"}
{"id": "TEST1-207", "output_field": "优化查询语句，使用索引，减少数据返回量。"}
{"id": "TEST1-208", "output_field": "当 FieldData 不是 INT8, INT16, INT32, 或 INT64 类型时，integer() 方法会抛出 std::bad_cast 异常。"}
{"id": "TEST1-209", "output_field": "TuGraph-DB 的存储引擎使用了 KV 数据库，基于 LMDB 构建。"}
{"id": "TEST1-210", "output_field": "'browser-resource'未找到新版可能是因为未更新或路径错误。新旧版本Web切换通常通过修改配置文件或使用版本控制工具实现。具体操作需参考项目文档或咨询开发团队。"}
{"id": "TEST1-211", "output_field": "否"}
{"id": "TEST1-212", "output_field": "TuGraph选择使用B+树作为其存储数据结构。主要原因是因为B+树具有较好的顺序读写性能，适合读操作频繁的场景，且性能波动较小，整体设计成本较低。"}
{"id": "TEST1-213", "output_field": "无法从提供的资料中找到TuGraph-DB使用的boost库版本。"}
{"id": "TEST1-214", "output_field": "新手、系统开发者、生产运维人员、研究人员"}
{"id": "TEST1-215", "output_field": "创建实体，提交 Cypher，以及加载和调用存储过程。"}
{"id": "TEST1-216", "output_field": "外存最低配置为100GB，建议配置为2TB NVMe SSD。"}
{"id": "TEST1-217", "output_field": "如果指定的目录不存在，构造函数会根据`create_if_not_exist`参数的值进行处理。如果`create_if_not_exist`为`true`，则会自动创建该目录；如果为`false`，则会抛出`DBNotExist`异常。"}
{"id": "TEST1-218", "output_field": "18446744073709551615"}
{"id": "TEST1-219", "output_field": "10"}
{"id": "TEST1-220", "output_field": "在生成Mapper接口时，XMLMAPPER类型通过XML配置文件中的SQL语句来实现接口方法。接口方法与XML文件中的`<select>`、`<insert>`、`<update>`、`<delete>`等标签对应，MyBatis框架会根据这些配置自动执行相应的SQL操作。"}
{"id": "TEST1-221", "output_field": "卷积层、池化层、全连接层"}
{"id": "TEST1-222", "output_field": "gtest框架"}
{"id": "TEST1-223", "output_field": "Yes, you can use Cypher to find a subgraph in tugraph-db and then run graph analysis algorithms like PageRank and K-Core on it."}
{"id": "TEST1-224", "output_field": "文档中未提及HA集群的snapshot删除时间。"}
{"id": "TEST1-225", "output_field": "TuGraph-DB目前支持Cypher图查询语言，并计划在将来支持ISO GQL查询语言。"}
{"id": "TEST1-226", "output_field": "没有"}
{"id": "TEST1-227", "output_field": "使用 POST 方法向 `/role` URI 发送请求，并在请求体中包含角色名和描述信息。例如：\n\n```\nPOST http://localhost:7070/role\nAccept: application/json; charset=UTF-8\nContent-Type: application/json; charset=UTF-8\nAuthorization: Bearer <your_token>\nInput:\n{\n    \"role\": \"new_role\",\n    \"description\": \"This is a new role.\"\n}\n```"}
{"id": "TEST1-228", "output_field": "不支持任意长度路径。"}
{"id": "TEST1-229", "output_field": "在Java运行时，targetProject在xml配置文件中应配置为项目的绝对路径或相对于某个基准目录的相对路径。例如：\n\n```xml\n<configuration>\n    <targetProject>/path/to/your/project</targetProject>\n</configuration>\n```\n\n或\n\n```xml\n<configuration>\n    <targetProject>../relative/path/to/project</targetProject>\n</configuration>\n```"}
{"id": "TEST1-230", "output_field": "Witness角色和管理工具"}
{"id": "TEST1-231", "output_field": "在调用 \"CallGql\" 接口时，通过在请求参数中指定 \"graphName\" 字段来设置要查询的图的名称。例如，{\"graphName\": \"your_graph_name\"}。"}
{"id": "TEST1-232", "output_field": "可以。"}
{"id": "TEST1-233", "output_field": "TuGraph-DB可以通过兼容Neo4j的Bolt协议与Neo4j驱动连接。"}
{"id": "TEST1-234", "output_field": "可能是因为在数据导入过程中，边数据的属性映射设置有误，导致属性信息没有被正确导入。请检查数据映射设置，确保属性列和目标边类型属性正确对应。"}
{"id": "TEST1-235", "output_field": "通过创建一个DataX的job配置文件，例如`job_actors.json`，然后在其中指定读取`actors.csv`文件的`txtfilereader`和写入TuGraph的`tugraphwriter`。配置`tugraphwriter`的参数，包括TuGraph的连接信息、图名称、顶点标签、属性等，最后使用DataX执行该job配置文件即可将`actors.csv`导入到TuGraph。"}
{"id": "TEST1-236", "output_field": "graph, schema"}
{"id": "TEST1-237", "output_field": "通过比较原始数据库中的数据和导出后再导入的数据是否相同来验证一致性。具体方法是在test_export_default函数中执行查询，对比两次导入后的数据结果。"}
{"id": "TEST1-238", "output_field": "Work函数在处理节点vi时，返回值代表节点vi的出度邻居数量。"}
{"id": "TEST1-239", "output_field": "TuGraph Browser"}
{"id": "TEST1-240", "output_field": "在批量创建点的操作中，如果请求成功，TuGraph 会返回新增加的点的 vid 列表。"}
{"id": "TEST1-241", "output_field": "TuGraph支持混合检索，可以同时使用向量数据库和图数据库进行查询。"}
{"id": "TEST1-242", "output_field": "TuGraph 数据预热的主要目的是改善服务器刚开启后由于频繁的 IO 操作而导致的系统性能变差的问题。"}
{"id": "TEST1-243", "output_field": "InEdgeIterator 类的 GetSrc 方法返回边的源顶点 ID。"}
{"id": "TEST1-244", "output_field": "`OPTIONAL MATCH`子句用于在查询中寻找可能不存在的匹配模式，允许查询结果中包含缺失的部分，而不影响整个查询的执行。当匹配模式无法找到对应的数据时，相关部分会在结果中以`null`表示。"}
{"id": "TEST1-245", "output_field": "GraphDB实例无法使用的情况包括：已调用Close()方法关闭图、当前GraphDB无效（如抛出InvalidGraphDB异常）。"}
{"id": "TEST1-246", "output_field": "TuGraph 运行需要保证库文件 `liblgraph.so` 的文件位置在环境变量 `LD_LIBRARY_PATH` 中。"}
{"id": "TEST1-247", "output_field": "当GetNumOutEdges函数达到限制时，返回n_limit值，并将limit_exceeded设置为true。"}
{"id": "TEST1-248", "output_field": "在每次迭代中，BFS算法通过将当前层的顶点标记为已访问，并将它们的未访问邻居加入下一层，从而更新活跃顶点数量。活跃顶点数量即为当前层中未处理的顶点数。随着迭代的进行，活跃顶点数量会动态减少。"}
{"id": "TEST1-249", "output_field": "64"}
{"id": "TEST1-250", "output_field": "POST"}
