{"id": "TEST1-1", "output_field": "如果添加边时指定的值不包含在value_dict中，这些字段将被视为null。"}
{"id": "TEST1-2", "output_field": "Christopher Nolan, Corin Redgrave"}
{"id": "TEST1-3", "output_field": "使用GET方法访问`/role/`接口，并携带有效的管理员授权信息，即可查询数据库中所有角色及其相关信息。"}
{"id": "TEST1-4", "output_field": "每个图项目存储最多2^(40)个点数据，两个点数据之间存储最多2^(32)条边数据，每个点或边类型的属性数量最多1024个。"}
{"id": "TEST1-5", "output_field": "可能是镜像中的目录结构发生了变化，导致 setup.sh 脚本不在当前目录下。可以尝试查找脚本所在位置，使用 `find` 或 `ls -a` 命令。如果确实找不到，可能需要参考镜像的官方文档或更新镜像版本。"}
{"id": "TEST1-6", "output_field": "lgraph_server -d start 命令启动 TuGraph 服务器时，确实会在当前工作目录下生成一个 .pid 文件，用于记录守护进程的进程 ID。目前没有参数可以直接控制 .pid 文件的生成路径。如果需要改变 .pid 文件的存放位置，可以通过改变工作目录的方式来实现。"}
{"id": "TEST1-7", "output_field": "如果在使用ARM机器（如M1芯片的Mac）编译TuGraph，应该在cmake命令中加上`-DENABLE_BUILD_ON_AARCH64=ON`。"}
{"id": "TEST1-8", "output_field": "cleanup_dir指定的目录用于在函数执行完成后进行清理操作。"}
{"id": "TEST1-9", "output_field": "使用`lgraph_server -d start -c lgraph_daemon.json`命令来启动 TuGraph。"}
{"id": "TEST1-10", "output_field": "TuGraph团队主要通过以下手段提高解析速度：1. 采用高效的数据结构和算法；2. 实现并行处理和多线程优化；3. 优化内存管理和缓存策略。"}
{"id": "TEST1-11", "output_field": "中止一个正在执行的任务时，应该使用 DELETE HTTP 请求方法。"}
{"id": "TEST1-12", "output_field": "`AllocVertexSubset`函数用于分配一个`ParallelBitset`集合，该集合用于表示图中所有顶点的激活状态。"}
{"id": "TEST1-13", "output_field": "检查网络连接和数据格式，确保服务器配置支持大文件上传，必要时联系技术支持。"}
{"id": "TEST1-14", "output_field": "TuGraph支持csv和json两种导出格式。"}
{"id": "TEST1-15", "output_field": "除了在语句前加EXPLAIN和PROFILE，还可以通过优化索引、调整内存和缓存配置、使用更高效的查询算法等方式来调优TuGraph。"}
{"id": "TEST1-16", "output_field": "url、user、password"}
{"id": "TEST1-17", "output_field": "在Cython中，通过`from cython.cimports.olap_base import *`的方式导入与Olap相关的模块，而图数据库模块的导入方式未在文档中明确说明，需参考具体模块的文档或代码示例。"}
{"id": "TEST1-18", "output_field": "'unique'参数指定索引是否唯一，即该字段值在所有边中不可重复；'pair_unique'参数指定索引是否为成对唯一，即该字段值在相同起点和终点类型的边中不可重复。"}
{"id": "TEST1-19", "output_field": "图数据库相比于关系型数据库的优势主要体现在性能、兼容性和直观性三个方面。在处理关联关系时，图数据库无需使用表的JOIN操作，能直接跳转访问类指针，操作效率更高，性能提升2到4个数量级。在兼容性方面，图数据库可以灵活地添加新的点、边和属性，适应数据的变化，而无需像关系型数据库那样修改表结构。直观性方面，图数据库以图的方式表达现实世界的关系，更直接自然，便于分析和查询。"}
{"id": "TEST1-20", "output_field": "是的，错误信息表明属性值 [xxx] 过长，超出了顶点唯一索引的长度限制。需要缩短该属性值以满足索引要求。"}
{"id": "TEST1-21", "output_field": "400"}
{"id": "TEST1-22", "output_field": "TuGraph针对不同用户的需求提供了编译环境、运行环境和精简运行环境。编译环境适用于开发人员，用于从源码编译TuGraph；运行环境适用于大部分用户，可以运行TuGraph安装包；精简运行环境对系统依赖较小，仅能运行TuGraph的基础功能。"}
{"id": "TEST1-23", "output_field": "TuGraph-DB新增支持的空间数据类型包括：POINT、LINESTRING、POLYGON。"}
{"id": "TEST1-24", "output_field": "extra"}
{"id": "TEST1-25", "output_field": "leader"}
{"id": "TEST1-26", "output_field": "WriteNotAllowed"}
{"id": "TEST1-27", "output_field": "GetVertexIndexIterator函数在liblgraph_python_api.Transaction中用于获取索引迭代器。"}
{"id": "TEST1-28", "output_field": "是的，db.importor.dataImportor 函数可以指定错误继续执行和线程数。通过设置相关参数，如 `ignore_errors=True` 和 `thread_count=n`，可以实现这些功能。具体参数设置请参考官方文档。"}
{"id": "TEST1-29", "output_field": "get_vertex()"}
{"id": "TEST1-30", "output_field": "WriteNotAllowed"}
{"id": "TEST1-31", "output_field": "当节点的出度大于0时，其pagerank值初始化为其初始值除以其出度。"}
{"id": "TEST1-32", "output_field": "TuGraph 支持将数据导出为 CSV 或 JSON 格式。"}
{"id": "TEST1-33", "output_field": "该错误表明在读取数据时超出了数组的实际大小，所需大小为4字节，但实际只有2字节。可能是数据文件损坏或格式不正确。建议检查数据文件完整性，并确保导入数据符合预期格式。如果问题依旧，可尝试重新生成或修复数据文件。"}
{"id": "TEST1-34", "output_field": "只读的"}
{"id": "TEST1-35", "output_field": "CSV文件中的栏位名称应与配置文件中的columns字段中的名称相匹配，以确保数据正确导入。可以通过编辑配置文件中的columns字段来指定对应关系。若栏位名称不一致，需在配置文件中明确映射关系。"}
{"id": "TEST1-36", "output_field": "顶点标签、文件头行数、列映射（包括字段名称、数据类型、是否为ID或可选）"}
{"id": "TEST1-37", "output_field": "TuGraph Browser 的默认端口号是 7070。"}
{"id": "TEST1-38", "output_field": "计算图表中显示的值的方法通常取决于具体的配置设置，可能包括聚合函数（如求和、平均值等）或自定义的计算公式。具体方法需参考配置文件或相关文档。如果未提供具体配置信息，无法确定具体计算方法。"}
{"id": "TEST1-39", "output_field": "TuGraph是由蚂蚁集团与清华大学联合研发的。"}
{"id": "TEST1-40", "output_field": "图学习系统是解决图学习问题的。"}
{"id": "TEST1-41", "output_field": "该函数需要三个参数：标签名（label_name）、字段名列表（field_name）以及字段值列表（field_value_string）。"}
{"id": "TEST1-42", "output_field": "通过配置文件或命令行设置 `rpc_port` 参数。在配置文件中，添加 `\"rpc_port\": <端口号>`；在命令行中，使用 `--rpc_port <端口号>`。默认端口为 9090。"}
{"id": "TEST1-43", "output_field": "图数据库在处理关联关系时相比关系型数据库的优势主要表现在性能、兼容性和直观性三个方面。性能方面，图数据库通过直接访问关联数据，避免了关系型数据库中表JOIN操作带来的性能损耗，提高了2到4个数量级的效率。兼容性方面，图数据库能够灵活应对数据内容和格式的变化，只需添加新的点、边和属性，而无需像关系型数据库那样修改表结构。直观性方面，图数据库通过点边连接的拓扑结构，直观地表达了现实世界的关系，使得分析和查询更加直接和自然。"}
{"id": "TEST1-44", "output_field": "默认的登录密码是：73@TuGraph。"}
{"id": "TEST1-45", "output_field": "field_value_strings参数的数据类型是`const std::vector<std::string>&`。"}
{"id": "TEST1-46", "output_field": "TuGraph-DB和TuGraph Analytics是独立运行的两个系统。TuGraph-DB主要负责图数据的存储和管理，而TuGraph Analytics则专注于图数据的分析和计算。两者可以协同工作，但各自独立运行。"}
{"id": "TEST1-47", "output_field": "\"urls\": \"tugraph host list\", \"user\": \"login user name\", \"password\": \"login password\""}
{"id": "TEST1-48", "output_field": "可以使用`-s`参数提交单条Cypher查询，使用`-f`参数指定结果的保存文件路径。例如：`./lgraph_cypher.py -c /home/usr/lgraph_standalone.json -u user -P password -s \"MATCH (n) RETURN n\" -f /home/usr/query_result.txt`。"}
{"id": "TEST1-49", "output_field": "数据和日志目录的持久化位置在宿主机的`/root/tugraph/`目录下。"}
{"id": "TEST1-50", "output_field": "通过点 ID 直接指定单个起始点（SetFrontier(size_t root_vid)）、通过点 ID 列表指定多个起始点（SetFrontier(ParallelVector & root_vids)）、通过用户自定义过滤函数指定起始点（SetFrontier(std::function root_vertex_filter)）。"}
{"id": "TEST1-51", "output_field": "设置特定字段的值。"}
{"id": "TEST1-52", "output_field": "蚂蚁集团图计算团队"}
{"id": "TEST1-53", "output_field": "精简运行环境不需要额外的系统库。"}
{"id": "TEST1-54", "output_field": "该函数通过参数 `root_vertex_filter`（一个过滤函数）来设置初始的遍历前沿。它会遍历所有顶点，并对每个顶点调用 `root_vertex_filter`。如果 `root_vertex_filter` 返回 true，则将该顶点添加到初始前沿集合中。"}
{"id": "TEST1-55", "output_field": "包含。rpm包通常包含应用程序的所有必要组件，包括新版前端页面资源。具体内容需查看rpm包的文件列表确认。"}
{"id": "TEST1-56", "output_field": "启动 `tugraph-runtime-centos7` 镜像的资源需求取决于实际应用场景，但通常建议至少配置 4GB 内存和 100GB 硬盘空间，以保证基本运行。对于更高性能需求，建议使用 256GB 内存和 1TB NVMe SSD。"}
{"id": "TEST1-57", "output_field": "属性个数（2到16个之间）、索引类型（唯一或非唯一）、属性长度之和（唯一索引不超过480-2*(属性个数-1)字节，非唯一索引不超过475-2*(属性个数-1)字节）"}
{"id": "TEST1-58", "output_field": "`InvalidTxn`"}
{"id": "TEST1-59", "output_field": "TuGraphClient是TuGraph数据库的Python客户端库，用于通过RESTful或RPC方式与TuGraph服务器进行交互，支持调用Cypher查询和存储过程等功能。"}
{"id": "TEST1-60", "output_field": "TuGraph 支持 X86_64 和 ARM64 架构的硬件平台。"}
{"id": "TEST1-61", "output_field": "是的，前两个参数`personDesc`和`person`的格式与执行导入脚本的格式相同。`personDesc`是数据格式描述，`person`是要导入的数据内容。"}
{"id": "TEST1-62", "output_field": "类中的集合映射为边，类的属性映射为图对象的属性。"}
{"id": "TEST1-63", "output_field": "如果在对 DateTime 对象使用 operator+= 或 operator-= 运算时发生溢出，当前 DateTime 对象不会被修改。"}
{"id": "TEST1-64", "output_field": "标签存在，添加的字段不存在，且默认值类型兼容。"}
{"id": "TEST1-65", "output_field": "EdgeData类型的数值"}
{"id": "TEST1-66", "output_field": "RPC（远程过程调用）是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-67", "output_field": "TuGraph中主键用于唯一标识点数据，默认为唯一索引，在对应点类型中唯一。"}
{"id": "TEST1-68", "output_field": "RpcException是用于处理RPC相关错误的异常类型。"}
{"id": "TEST1-69", "output_field": "不支持。match语句通常用于精确匹配单个属性值。若需匹配多个属性，需使用多个match语句或组合查询条件。"}
{"id": "TEST1-70", "output_field": "抱歉，提供的文档中未包含关于TuGraph DB对Antlr4性能改进的具体内容。"}
{"id": "TEST1-71", "output_field": "TuGraph要求每个节点或关系有且只有一个标签，如果没有标签会报错，如果有多个标签则取第一个作为标签。OpenCypher允许节点或关系有0个或多个标签。"}
{"id": "TEST1-72", "output_field": "true"}
{"id": "TEST1-73", "output_field": "目前文档中没有提及tugraph-analytics支持窗口函数的信息，因此无法确定其是否支持窗口函数。建议查阅官方文档或相关技术支持以获取确切信息。"}
{"id": "TEST1-74", "output_field": "字符串格式"}
{"id": "TEST1-75", "output_field": "SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)"}
{"id": "TEST1-76", "output_field": "无法从提供的上下文中找到关于GeaBase主要部署方式所需时间的信息。请提供更多相关资料以便准确回答。"}
{"id": "TEST1-77", "output_field": "点和边"}
{"id": "TEST1-78", "output_field": "TuGraph支持C++、Java、Python和Rust编程语言。"}
{"id": "TEST1-79", "output_field": "通过 `res.mutable_plugin_response()->mutable_list_plugin_response()->reply()` 获取。"}
{"id": "TEST1-80", "output_field": "RPC接口是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。"}
{"id": "TEST1-81", "output_field": "acted_in, directed, TYPE WITH SPACE"}
{"id": "TEST1-82", "output_field": "启动 TuGraph 服务器的命令是 `lgraph_server -d start -c lgraph_daemon.json`。"}
{"id": "TEST1-83", "output_field": "会抛出异常。"}
{"id": "TEST1-84", "output_field": "TuGraph 支持 X86_64 和 ARM64 架构的硬件平台。"}
{"id": "TEST1-85", "output_field": "TuGraph-OGM 是一个面向 TuGraph 的图对象映射工具，它支持将 JAVA 对象（POJO）映射到 TuGraph 数据库中。JAVA 中的类会被映射为图中的节点，类中的集合映射为边，类的属性映射为图对象的属性。同时，TuGraph-OGM 提供了一系列函数操作图数据库，使得 JAVA 开发人员能够在熟悉的生态中轻松地使用 TuGraph 数据库。"}
{"id": "TEST1-86", "output_field": "`OPTIONAL MATCH`在GQL中用于执行可选的匹配操作，当无法找到匹配的数据时，不会导致整个查询失败，而是返回`null`。它允许查询在部分数据缺失的情况下仍能继续执行，常用于处理图中的不完整数据或存在与否不确定的关系。"}
{"id": "TEST1-87", "output_field": "在`loadProcedure`方法中，通过`readOnly`参数控制存储过程是否为只读。"}
{"id": "TEST1-88", "output_field": "RpcStatusException"}
{"id": "TEST1-89", "output_field": "swap_id函数在Transform操作中用于交换两个元素的ID。它通常用于数据重组或优化数据处理流程。通过该函数，可以实现特定ID的快速替换或更新。"}
{"id": "TEST1-90", "output_field": "MATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name, r.role"}
{"id": "TEST1-91", "output_field": "TuGraph-DB图数据库社区版内置了6种基础算法。"}
{"id": "TEST1-92", "output_field": "TuGraph-DB支持的三种空间数据类型是：点（Point）、折线（Linestring）和多边形（Polygon）。"}
{"id": "TEST1-93", "output_field": "产品是否支持麒麟操作系统？只有企业版支持么？\n---\n支持麒麟操作系统，但具体支持版本（如是否仅限企业版）需查看产品官方说明。"}
{"id": "TEST1-94", "output_field": "TuGraph-DB中存储Point类型数据的格式是EWKB格式。"}
{"id": "TEST1-95", "output_field": "TuGraph嵌入模式的API允许用户打开或创建数据库，然后查询或修改数据库。"}
{"id": "TEST1-96", "output_field": "1970/1/1"}
{"id": "TEST1-97", "output_field": "如果给定的 vertex_label 或 field 不存在，会抛出 InputError 异常。"}
{"id": "TEST1-98", "output_field": "使用 `-s` 参数指定单行 Cypher 查询命令，使用 `-format` 参数指定显示格式为 `table`。"}
{"id": "TEST1-99", "output_field": "`reduce_plus`函数是一个累加函数，它接受两个相同类型的参数并返回它们的和。"}
{"id": "TEST1-100", "output_field": "不支持无向边，但可以通过创建两个方向相反的有向边来模拟无向边。"}
{"id": "TEST1-101", "output_field": "FieldData类中提供了多种构造函数，包括用于初始化基本数据类型的构造函数、用于初始化复杂数据结构的构造函数，以及用于从其他数据源转换数据的构造函数。具体类型和数量可能因具体实现而异。请参考相关文档或源代码以获取详细信息。"}
{"id": "TEST1-102", "output_field": "TuGraph-DB通过基于部分公开历史航班数据和\"80天环游世界\"的虚拟背景，帮助用户设计多个城市的最优航班规划。用户可在自定义网站服务中选择不超过8个城市，系统在满足前后航班间隔2-6小时的要求下，返回费用最低和飞行时间最短的10条路径规划。数据来源于国外某开源网站，航班价格为模拟数据。"}
{"id": "TEST1-103", "output_field": "判断一个顶点或边是否具有某个字段。"}
{"id": "TEST1-104", "output_field": "最低配置是4个核心，建议配置是64个核心。"}
{"id": "TEST1-105", "output_field": "MappedVid 函数用于将视频文件映射到内存中，以便快速访问和处理视频数据。它通常用于视频处理和图像分析领域，提高数据读取效率。具体应用包括视频编辑、视频分析等。"}
{"id": "TEST1-106", "output_field": "抛出异常"}
{"id": "TEST1-107", "output_field": "不是，批量在线导入通常使用`LOAD CSV`或`UNWIND`等Cypher语句，而不是简单的`CREATE (n), (m)`语法。`CREATE (n), (m)`仅用于创建单个或少量节点，不适合批量导入。"}
{"id": "TEST1-108", "output_field": "`lgraph_backup` 工具的主要功能是将一个 TuGraph 数据库中的数据备份到另一个目录下。"}
{"id": "TEST1-109", "output_field": "通过 GET 方法访问 URI `/db/{graph_name}/node/{vertex_id}/property` 可以获取某个节点的所有属性。"}
{"id": "TEST1-110", "output_field": "点、边、属性"}
{"id": "TEST1-111", "output_field": "TuGraph-DB支持存储过程，支持的编程语言包括C++、Python和Rust。"}
{"id": "TEST1-112", "output_field": "获取图的边属性信息"}
{"id": "TEST1-113", "output_field": "TuGraph-DB是一款高性能图数据库，其主要功能包括支持大数据量、低延迟查找和快速图分析。它提供了属性图模型、实时增删查改、多重图、多图、ACID事务处理、点边索引、混合事务和分析处理（HTAP）、主流图查询语言、OLAP API、内置图分析算法、基于C++/Python的存储过程、图可视化工具等。"}
{"id": "TEST1-114", "output_field": "RpcStatusException"}
{"id": "TEST1-115", "output_field": "预计2024年度的功能更新将在年中推出HA支持Witness角色和管理工具。具体时间可能根据开发进度有所调整。建议关注官方公告获取最新信息。"}
{"id": "TEST1-116", "output_field": "TuGraph-DB 使用 CMake 作为编译工具，支持的 C++ 标准为 C++17。"}
{"id": "TEST1-117", "output_field": "Cython.cimports.libcpp.unordered_map是Cython中用于导入C++标准库中的unordered_map容器的语法，它允许在Cython代码中使用C++的哈希表实现。通过这种方式，可以在Python扩展模块中高效地处理键值对数据。它常用于需要高性能映射的场景。"}
{"id": "TEST1-118", "output_field": "TuGraph数据预热命令需要指定`-d {db_dir}`和`-g {graph_list}`两个选项。"}
{"id": "TEST1-119", "output_field": "支持GQL语句。TuGraph基于ISO GQL (ISO/IEC 39075) Antlr4语法文件实现了GQL，并进行了一些扩展与改造，但目前并未完全支持所有GQL语法，未来会逐步完善。"}
{"id": "TEST1-120", "output_field": "\"2.14.1\" 和 \"31.0-jre\""}
{"id": "TEST1-121", "output_field": "SetUserGraphAccess方法用于设置指定用户在图上的访问级别。"}
{"id": "TEST1-122", "output_field": "在TuGraph-DB运行单元测试时，可以通过在代码中包含 \"tools/lgraph_log.h\" 头文件并使用 LOG_XXX() 宏来输出日志信息。其中 XXX 代表日志等级，例如 LOG_DEBUG()、LOG_INFO()、LOG_WARN()、LOG_ERROR() 和 LOG_FATAL()。"}
{"id": "TEST1-123", "output_field": "在GeaBase查询中，使用\"Nav\"语句的一种情况是从一个实体导航到与其关联的另一个实体，以便获取相关数据。例如，通过\"Nav\"语句可以从客户实体导航到其订单实体。这常用于关联数据的查询和检索。"}
{"id": "TEST1-124", "output_field": "可以使用`db.findEdgeByIndex`接口通过pair unique索引快速定位到两个顶点间的特定关系边，并根据pair unique的值更新对应的边数据。具体操作是先通过该接口查找到边，然后使用`db.updateEdge`接口进行更新。"}
{"id": "TEST1-125", "output_field": "TuGraph Explorer 的功能已合并到 TuGraph Browser 中，可以在 TuGraph Browser 的用户指南中找到相关信息。"}
{"id": "TEST1-126", "output_field": "SybilRank算法主要通过信任传播和邻居节点信息聚合的方式进行计算。它利用网络中的信任关系，对节点的可信度进行迭代更新。最终根据节点的综合评分来识别和排除恶意节点。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中用于存储实体的具体信息和关系特征，增强图谱的表达能力，支持更精确的查询和分析。例如，员工节点的工号属性可用于唯一标识，雇佣关系的时长属性可帮助分析员工稳定性。这些属性使知识图谱能更细致地描述现实世界，提升应用价值。"}
{"id": "TEST1-128", "output_field": "在TuGraph项目中，提交代码前先提交一个issue的目的是为了避免与其他开发者的工作发生冲突，减少重复劳动，同时让维护人员对提出的问题或新增功能进行讨论，确保修改的必要性和最佳方案，以减少沟通成本和pull request被拒绝的可能性。"}
{"id": "TEST1-129", "output_field": "社区版适用于单实例部署，支持TB级数据规模，提供图数据库基础功能和成熟产品设计，适合学习和小型项目。企业版提供分布式集群架构、全生命周期一站式图平台、多种图计算引擎、支持大数据源和多地多中心部署，以及专家支持服务，适合商业化解决方案。"}
{"id": "TEST1-130", "output_field": "bfs_standalone程序的输出结果包括准备时间（prepare_cost）、核心计算时间（core_cost）、找到的顶点数（found_vertices）、输出时间（output_cost）和总时间（total_cost）。"}
{"id": "TEST1-131", "output_field": "当`key_start`和`key_end`相等且等于`v`时，`VertexIndexIterator`会返回一个指向所有字段值为`v`的顶点的迭代器。该迭代器遍历的顶点都满足字段值等于`v`的条件。"}
{"id": "TEST1-132", "output_field": "首先，在配置文件中指定顶点数据文件的路径，如[actors.csv]。其次，描述顶点标签和文件头行数，如LABEL=actor, HEADER=2。最后，定义列映射，如aid:STRING:ID, name:STRING，将数据文件中的列映射到顶点属性。"}
{"id": "TEST1-133", "output_field": "lgraph_api::Transaction用于在TuGraph图数据库中执行一系列原子操作，提供完整的ACID保证。它支持读写事务，确保数据一致性和隔离性，适用于并发环境中的图操作。"}
{"id": "TEST1-134", "output_field": "运行`ProcessVertexActive`函数时出现错误会引发`VertexProcessingException`异常。该异常用于指示顶点处理过程中的错误。具体异常类型可能根据实际错误情况有所不同。"}
{"id": "TEST1-135", "output_field": "字符串格式"}
{"id": "TEST1-136", "output_field": "localhost:9111"}
{"id": "TEST1-137", "output_field": "TuGraph的图分析引擎主要面向全图/全量数据分析类的任务。"}
{"id": "TEST1-138", "output_field": "将node_id字段重命名为与id不同的名称，例如node_id改为nodeIdentifier，或在XML配置中明确区分id和node_id的使用范围，确保两者不冲突。"}
{"id": "TEST1-139", "output_field": "session.query(\"CALL db.createEdgeLabel('DIRECT', '[]')\", emptyMap());"}
{"id": "TEST1-140", "output_field": "可以统一返回字典或元组结构，例如 `{ 'name': p.name, 'age': p.age }` 或 `(p.name, p.age)`，然后在可视化页面进行相应的解析和展示。这样可以保持数据结构的一致性，便于前端处理。具体实现取决于前端页面的需求和技术栈。"}
{"id": "TEST1-141", "output_field": "在ARM机器上编译TuGraph时，需要在CMake命令中添加`-DENABLE_BUILD_ON_AARCH64=ON`参数。"}
{"id": "TEST1-142", "output_field": "CPU至少四核，内存8GB起步，显卡根据需求选择，硬盘建议使用SSD。具体配置还需根据实际应用场景和预算调整。例如，游戏玩家可能需要更高性能的显卡，而办公用户则更注重CPU和内存的均衡配置。"}
{"id": "TEST1-143", "output_field": "可以使用图论中的搜索算法，如深度优先搜索（DFS）或广度优先搜索（BFS），来查询两点间的通路。具体步骤包括：构建图的邻接表，选择起点和终点，然后应用相应算法进行搜索。若存在通路，算法将返回一条路径。"}
{"id": "TEST1-144", "output_field": "TuGraph 支持通过 Cypher 语句修改 schema。"}
{"id": "TEST1-145", "output_field": "TuGraph Restful Server 使用 brpc 框架支持其 HTTP 协议，并提供了文件上传、数据导入、导入进度查询、Cypher 查询和文件删除等功能。"}
{"id": "TEST1-146", "output_field": "禁用角色后，具有该角色的用户将不再从该角色中获得任何权限。"}
{"id": "TEST1-147", "output_field": "您需要保证您依法有权授予上述许可，并进一步保证附表A（或其后续书面修改）所指定的任意公司员工均有权以公司名义提交贡献内容。"}
{"id": "TEST1-148", "output_field": "使用命令 `CALL db.dropAllVertex()` 可以只删除所有点边数据，保留图schema。"}
{"id": "TEST1-149", "output_field": "OGM与MyBatis在数据映射和对象关系管理方面类似，都提供了一种将对象模型与数据库表进行映射的方法，简化了数据库操作。此外，它们都支持动态SQL生成，提高了代码的灵活性和可维护性。两者都广泛应用于Java开发中，用于优化数据访问层的设计。"}
{"id": "TEST1-150", "output_field": "BROWSER可以使用Docker进行部署。具体的Docker镜像和部署步骤通常可以在其官方文档或GitHub仓库中找到。如果没有明确信息，建议查阅相关社区讨论或直接联系项目维护者。"}
{"id": "TEST1-151", "output_field": "TuGraph-DB有数据导入工具，名为`lgraph_import`。相关代码在TuGraph的源代码库中。"}
{"id": "TEST1-152", "output_field": "图数据库相较于关系型数据库，其独特优势主要体现在性能、兼容性和直观性三个方面。性能上，图数据库通过直接访问关联数据，避免了关系型数据库中JOIN操作带来的性能损耗，能显著提高关联关系处理的效率。兼容性方面，图数据库能够灵活地适应数据内容和格式的变化，只需添加新的点、边和属性即可，而无需像关系型数据库那样改变表结构。直观性方面，图数据库通过点和边的连接，直观地表达了现实世界中的关系，使得数据的查询和分析更加直观和自然。"}
{"id": "TEST1-153", "output_field": "TuGraph 客户端 SDK 支持Java、Python、C++等多种语言。"}
{"id": "TEST1-154", "output_field": "WKT和WKB格式"}
{"id": "TEST1-155", "output_field": "导入点或边数据。"}
{"id": "TEST1-156", "output_field": "TuGraph企业版是TuGraph图数据库的商业化版本，它提供了分布式集群架构，覆盖探索、研发、服务、运维管理全生命周期的一站式图平台，支持在线、近线、离线的图计算引擎，能够处理流式和大数据类数据源，支持多地多中心的部署形态，并提供专家支持服务。"}
{"id": "TEST1-157", "output_field": "使用GET方法，URI为`/db/{graph_name}/cpp_plugin|python_plugin`。"}
{"id": "TEST1-158", "output_field": "TuGraph的基础算法包包含以下算法：广度优先搜索（bfs）、网页排序（pagerank）、单源最短路径（sssp）、弱连通分量（wcc）、平均集聚系数（lcc）和标签传播（lpa）。"}
{"id": "TEST1-159", "output_field": "REST 服务器的默认端口号是 7070。"}
{"id": "TEST1-160", "output_field": "调用 `POST /role/{role_name}/disable` 函数，当操作成功且返回代码为 200 时，返回 true。"}
{"id": "TEST1-161", "output_field": "不会丢失。通过兼容迁移、升级迁移或在线迁移方案，可以确保原库数据安全迁移到新环境。"}
{"id": "TEST1-162", "output_field": "false"}
{"id": "TEST1-163", "output_field": "磁盘IO警报通常在磁盘读写操作延迟过高、IOPS（每秒输入输出操作次数）超出阈值或磁盘故障时触发。这些情况可能影响系统性能和数据完整性。具体触发条件取决于系统设定和监控工具配置。"}
{"id": "TEST1-164", "output_field": "调用 Close() 函数后，InEdgeIterator 变为无效状态。"}
{"id": "TEST1-165", "output_field": "DUAL_DIRECTION表示输入文件为非对称图，加载后得到的图也是非对称的。"}
{"id": "TEST1-166", "output_field": "当指定的顶点ID不存在，并且nearest参数为true时，Goto函数将尝试获取在指定顶点ID排序之后的下一个边。如果不存在从该顶点出发的任何出边，则迭代器将变为无效。"}
{"id": "TEST1-167", "output_field": "在BFS算法中，最终返回的结果包括：\n- prepare_cost：数据准备时间\n- core_cost：核心算法运行时间\n- found_vertices：找到的顶点数量\n- output_cost：结果输出时间\n- total_cost：总运行时间"}
{"id": "TEST1-168", "output_field": "24小时"}
{"id": "TEST1-169", "output_field": "在GetEdgeProp命令中，要查找特定时间戳的边属性，可以在WHERE子句中使用timestamp字段进行过滤，例如：WHERE timestamp = '指定的时间戳值'。"}
{"id": "TEST1-170", "output_field": "TuGraph Browser的默认端口号是7070。"}
{"id": "TEST1-171", "output_field": "TuGraph-DB支持运行图算法，内置了多种算法，如PageRank、LPA、WCC等。社区也期望共同研发更多算法。"}
{"id": "TEST1-172", "output_field": "Python存储过程接口包含以下重要组件和功能：\n\n1. **AccessLevel**：定义用户在图上的访问级别，包括无访问权限(NONE)、读权限(READ)、写权限(WRITE)和完全访问权限(FULL)。\n\n2. **EdgeUid**：表示边的唯一标识符，包含源顶点ID(src)、目标顶点ID(dst)、边ID(eid)、边的标签ID(lid)和时间戳ID(tid)。\n\n3. **FieldData**：表示字段值的类型，支持多种数据类型的转换，如布尔值(AsBool)、浮点数(AsFloat)、整数(AsInt32)和日期时间(AsDateTime)等。\n\n4. **存储过程加载与调用**：支持加载和调用存储过程，例如`LoadProcedure`用于加载存储过程，`callProcedureToLeader`用于向集群的leader节点调用存储过程。\n\n5. **存储过程管理**：支持存储过程的管理操作，如`listProcedures`列举存储过程，`deleteProcedure`删除存储过程。\n\n6. **模式导入**：支持从字节流中导入模式，例如`importSchemaFromContent`函数。\n\n这些组件和功能共同构成了TuGraph Python存储过程接口的核心，使得用户能够通过Python编写和执行图数据库的存储过程。"}
{"id": "TEST1-173", "output_field": "成功返回True，失败返回False。"}
{"id": "TEST1-174", "output_field": "TuGraph中的复杂图分析操作需要先导出图数据的快照，然后在快照上执行。这些操作通常涉及全图的多轮数据迭代，例如PageRank和Louvain算法。由于这些操作需要更高的计算资源，它们会使用OLAP API来执行，并且通常是串行执行的，每个操作都会用满CPU资源。"}
{"id": "TEST1-175", "output_field": "`filter_output_default`函数的主要作用是过滤输出数据，确保其符合默认设置或预定条件，常用于数据清洗和格式化。"}
{"id": "TEST1-176", "output_field": "在Java运行时，MyBatis Generator的XML配置文件中，`targetProject`应配置为生成文件的绝对路径或相对于当前工作目录的相对路径。确保路径正确指向目标项目目录。例如，`<targetProject>/src/main/java</targetProject>`。"}
{"id": "TEST1-177", "output_field": "`@Property(\"class\")`注解指定了数据库字段名为\"class\"。"}
{"id": "TEST1-178", "output_field": "在TuGraph中，目前不支持直接通过Cypher语句删除图中的重复关系。需要通过编写特定的算法或使用其他工具来识别并删除重复关系。建议查阅官方文档或联系技术支持获取更详细的解决方案。"}
{"id": "TEST1-179", "output_field": "在默认情况下，第一次快照的时间设置为在0到ha_snapshot_interval_s内的任一时刻随机打第一次snapshot。"}
{"id": "TEST1-180", "output_field": "需要标注作品的完整来源信息、您所知悉的任何许可或其他限制（包括相关专利、商标和许可协议），并以显著方式标明“以第三方名义提交：【填写姓名】”。"}
{"id": "TEST1-181", "output_field": "Web端导入点数据后，查询结果不同可能是由于查询条件、数据索引或数据处理逻辑不一致导致。建议检查查询语句、数据结构和后端处理逻辑，确保一致性。必要时，可联系技术支持进一步排查。"}
{"id": "TEST1-182", "output_field": "对象图映射（OGM）支持将JAVA对象（POJO）映射到TuGraph中，其中JAVA中的类映射为图中的节点、类中的集合映射为边、类的属性映射为图对象的属性，并提供了对应的函数操作图数据库。"}
{"id": "TEST1-183", "output_field": "在单节点模式下，实例化`liblgraph_client_python.client`对象的方法如下：\n\n```python\nclient = liblgraph_client_python.client(\"127.0.0.1:19099\", \"admin\", \"73@TuGraph\")\n```\n\n其中，`\"127.0.0.1:19099\"`是TuGraph服务的地址和端口，`\"admin\"`是登录用户名，`\"73@TuGraph\"`是登录密码。"}
{"id": "TEST1-184", "output_field": "非法参数异常（IllegalArgumentException）"}
{"id": "TEST1-185", "output_field": "TuGraph提供了三种部署方式：云部署、Docker部署和本地部署。云部署适用于新手，通过阿里云计算巢一键部署，免费试用。Docker部署适用于对硬件有要求的用户，比如性能测试，通过预先准备的Docker镜像跨平台部署。本地部署适用于指定生产环境，在现有系统紧耦合部署。"}
{"id": "TEST1-186", "output_field": "Corin Redgrave"}
{"id": "TEST1-187", "output_field": "可以继续导入。如果设置了`continueOnError`为true，遇到错误时会跳过错误数据并继续导入。"}
{"id": "TEST1-188", "output_field": "ResetHeader"}
{"id": "TEST1-189", "output_field": "蚂蚁集团的个人贡献者许可协议主要目的是明确个人贡献者向蚂蚁集团项目提交文档和软件代码时所授予的知识产权许可，确保贡献者同意相关许可条款，并保留其对贡献内容的权利。"}
{"id": "TEST1-190", "output_field": "不包含Java、Python相关功能，无C++ plugin编译运行，仅支持so上传。"}
{"id": "TEST1-191", "output_field": "Procedure及Embed主要使用了OlapOnDB类中的辅助函数。"}
{"id": "TEST1-192", "output_field": "密码太短、密码不符合复杂性要求、用户不存在、权限不足、系统错误。"}
{"id": "TEST1-193", "output_field": "使用 `liblgraph_python_api.Galaxy` 类的 `CreateUser` 方法可以创建一个新的用户账户。需要提供用户名、密码和描述。"}
{"id": "TEST1-194", "output_field": "DeleteVertexLabel(self: liblgraph_python_api.GraphDB, label_name: str) → int"}
{"id": "TEST1-195", "output_field": "无任何权限"}
{"id": "TEST1-196", "output_field": "TuGraph的可视化监控主要使用了TuGraph Monitor、Prometheus和Grafana这三个软件。"}
{"id": "TEST1-197", "output_field": "TuGraph 服务从配置文件中读取其配置，配置文件通常以 JSON 格式存储。"}
{"id": "TEST1-198", "output_field": "5000毫秒"}
{"id": "TEST1-199", "output_field": "PathTraversal 类中展开当前前沿的操作可以使用以下类型的过滤函数：出边过滤函数、入边过滤函数、出边邻居点过滤函数和入边邻居点过滤函数。"}
{"id": "TEST1-200", "output_field": "WriteNotAllowed"}
{"id": "TEST1-201", "output_field": "在UDF支持中，如果开发的函数语言是Python，模块通常放在Hive的`auxlib`目录下。也可以通过配置`hive.aux.jars.path`来指定其他位置。确保Hive能够访问到这些模块以正确执行UDF。"}
{"id": "TEST1-202", "output_field": "“light-orange”对应的资源名称是“Warning”。"}
{"id": "TEST1-203", "output_field": "删除导入图库的数据通常需要进入图库管理界面，选择要删除的图片或数据，然后执行删除操作。具体步骤可能因图库软件或平台的不同而有所差异。建议查阅相关图库的使用手册或帮助文档以获取详细指导。"}
{"id": "TEST1-204", "output_field": "当使用 TuGraph 批量创建边时，如果请求成功，响应中将返回新建立的边的 euid 列表。"}
{"id": "TEST1-205", "output_field": "TuGraph选择使用B+树作为其底层存储数据结构，是因为B+树具有较好的顺序读写性能，能够均衡处理硬盘的顺序操作和随机操作，且读性能在大数据场景中更为重要。相比之下，LSM树虽然在随机写方面占优，但其后台合并方式导致性能波动难以预期，增加了设计成本。因此，TuGraph优先考虑读性能，选择了B+树。"}
{"id": "TEST1-206", "output_field": "接口 \"CallProcedureToLeader\" 支持通过设置参数 \"json_format\" 来改变返回结果的格式。"}
{"id": "TEST1-207", "output_field": "采用紧凑编码优化边遍历操作，利用自适应映射技术减少单边更新开销，优先保证读性能。"}
{"id": "TEST1-208", "output_field": "当 FieldData 类型的数据不是 INT8、INT16、INT32 或 INT64 类型时，integer() 方法会抛出 std::bad_cast 异常。"}
{"id": "TEST1-209", "output_field": "TuGraph-DB的存储引擎使用了KV数据库，基于LMDB构建。"}
{"id": "TEST1-210", "output_field": "新版的browser-resource可能尚未发布或未更新到您的系统中。请检查更新或联系技术支持获取最新版本。若需切换新旧版本，可在浏览器设置或开发者工具中查找相关选项进行切换。"}
{"id": "TEST1-211", "output_field": "在提供的资料中，未提及TuGraph在进行大规模数据查询时是否对图数据进行了压缩。因此，无法确定TuGraph是否采用了数据压缩技术。"}
{"id": "TEST1-212", "output_field": "TuGraph选择使用B+树作为其存储数据结构。主要原因在于B+树具有较好的顺序读写性能，且读性能在整体性能中占比更高，适合TuGraph读性能优先的设计需求。相比之下，LSM树虽然随机写性能占优，但性能波动难以预期，增加了设计成本。"}
{"id": "TEST1-213", "output_field": "文档中未提及TuGraph-DB使用的boost库的具体版本。"}
{"id": "TEST1-214", "output_field": "TuGraph适合新手、系统开发者、生产运维人员、研究人员等不同需求的用户。"}
{"id": "TEST1-215", "output_field": "POST请求主要用于创建实体、提交Cypher查询以及加载和调用存储过程。"}
{"id": "TEST1-216", "output_field": "外存配置的最低要求是100GB，建议配置是2TB NVMe SSD。"}
{"id": "TEST1-217", "output_field": "自动创建目录"}
{"id": "TEST1-218", "output_field": "VertexIterator 的 GetNumOutEdges 方法默认的 n_limit 参数值是 18446744073709551615。"}
{"id": "TEST1-219", "output_field": "10"}
{"id": "TEST1-220", "output_field": "在生成Mapper接口时，XMLMAPPER类型通过XML配置文件实现接口方法。XML文件定义了SQL语句及其映射关系，MyBatis框架根据这些配置生成接口的实现。开发者只需编写接口和XML文件，无需手动实现接口方法。"}
{"id": "TEST1-221", "output_field": "卷积层、池化层、全连接层。"}
{"id": "TEST1-222", "output_field": "gtest框架"}
{"id": "TEST1-223", "output_field": "TuGraph 支持在 Cypher 查询结果上运行图分析算法。"}
{"id": "TEST1-224", "output_field": "文档中未提及HA集群的snapshot删除时机。"}
{"id": "TEST1-225", "output_field": "TuGraph-DB 目前支持 Cypher 图查询语言，遵循 OpenCypher 标准。计划在将来支持 ISO GQL 国际标准查询语言。"}
{"id": "TEST1-226", "output_field": "有，开启事务的关键字是“BEGIN TRANSACTION”，结束事务的关键字是“COMMIT”或“ROLLBACK”。"}
{"id": "TEST1-227", "output_field": "使用POST方法访问`/role`接口，在请求体中提供角色名和描述信息。例如，发送以下请求可创建名为`new_role`的角色，并描述为`This is a new role.`：\n\n```\nPOST http://localhost:7070/role\nAccept: application/json; charset=UTF-8\nContent-Type: application/json; charset=UTF-8\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\nInput:\n{\n    \"role\": \"new_role\",\n    \"description\": \"This is a new role.\"\n}\n```"}
{"id": "TEST1-228", "output_field": "TuGraph的Cypher查询语言目前不支持任意长度路径的查询。您可以通过其他方式组合查询来实现类似功能。如果需要更详细的解决方案，建议查阅官方文档或社区讨论。"}
{"id": "TEST1-229", "output_field": "在Java运行时，若要配置`targetProject`，应在xml配置文件中的相应标签内添加`targetProject`属性，并指定其值为项目的路径。例如，在MyBatis的generator配置文件中，可以在`<context>`标签内设置`targetProject=\"src/main/java\"`。确保路径正确，以避免运行时错误。"}
{"id": "TEST1-230", "output_field": "Witness角色和管理工具"}
{"id": "TEST1-231", "output_field": "在调用 \"CallGql\" 接口时，通常在请求参数中指定图的名称，具体可以通过设置 \"graphName\" 参数来实现。例如，请求体中可以包含 \"graphName\": \"your_graph_name\"。具体实现方式需参考接口文档。"}
{"id": "TEST1-232", "output_field": "图中可以展示属性值。在画布区域选中一个节点或边数据后，在右边栏会展示对应的属性信息。"}
{"id": "TEST1-233", "output_field": "TuGraph-DB兼容Neo4j的通讯协议，因此可以使用Neo4j的驱动连接TuGraph-DB的server。"}
{"id": "TEST1-234", "output_field": "如果图模型中某些边设置了属性，但在导入数据之后进行查询时发现查不到这些边数据，可能的原因有：1. 数据导入时没有正确映射属性，导致属性数据没有正确导入；2. 查询语句没有正确指定边的属性条件，导致查询结果不包含这些边数据。建议检查数据映射和查询语句，确保属性数据正确导入并正确指定查询条件。"}
{"id": "TEST1-235", "output_field": "在 \"TuGraph-DataX\" 项目中，通过创建一个名为 `job_actors.json` 的 job 配置文件，并使用 DataX 工具执行该配置文件，可以将 \"actors.csv\" 导入到 TuGraph。在配置文件中，需要指定读取器（reader）为 \"txtfilereader\"，并设置路径、编码、字段分隔符等参数，同时指定写入器（writer）为 \"tugraphwriter\"，并设置 TuGraph 的连接信息、图名称、标签类型、属性等参数。完成配置后，使用命令 `python3 datax/bin/datax.py job_actors.json` 执行导入操作。"}
{"id": "TEST1-236", "output_field": "需要指定子图数量、排列方式（如行数和列数）以及当前子图的索引。例如，在Matplotlib中常用`plt.subplot(nrows, ncols, index)`。还可以设置子图的宽高比和其他布局参数。"}
{"id": "TEST1-237", "output_field": "通过比较原始数据库中的数据与新导入数据库中的数据是否相同来验证一致性。具体操作包括：先从原始数据库中导出数据，然后将导出的数据导入到新的数据库中，最后通过查询两个数据库中的数据并进行对比，确保数据内容和结构完全一致。"}
{"id": "TEST1-238", "output_field": "Work函数在处理节点vi时，返回值代表节点vi的出度，即节点vi的所有出度邻居的数量。"}
{"id": "TEST1-239", "output_field": "TuGraph Explorer 的功能已合并到 TuGraph Browser 中。您可以在 TuGraph Browser 的用户指南中找到相关信息。具体请参考[TuGraph Browser](../4.user-guide/1.tugraph-browser.md)。"}
{"id": "TEST1-240", "output_field": "在批量创建点的操作中，如果请求成功，TuGraph 会返回新增加的点的 vid 列表。"}
{"id": "TEST1-241", "output_field": "TuGraph可以通过其强大的图数据库和图分析引擎支持混合检索，结合向量数据库和知识图谱技术，实现高效的vector+知识图谱混合检索。具体实现可能需要借助其多种语言SDK和图算法支持，进行定制化开发。"}
{"id": "TEST1-242", "output_field": "TuGraph 数据预热的主要目的是为了改善服务器刚开启后由于频繁的IO操作而导致的系统性能变差的问题。"}
{"id": "TEST1-243", "output_field": "源顶点 ID"}
{"id": "TEST1-244", "output_field": "`OPTIONAL MATCH`子句用于在查询中指定可选的匹配模式，允许查询结果包含不满足匹配条件的部分，避免因部分匹配失败而导致整个查询失败。它常用于处理图中可能不存在的关联关系，确保查询结果的完整性。"}
{"id": "TEST1-245", "output_field": "GraphDB实例无法使用可能是由于服务器宕机、网络连接问题、配置错误或资源耗尽等原因导致的。"}
{"id": "TEST1-246", "output_field": "TuGraph 运行需要保证库文件 liblgraph.so 的文件位置在环境变量 LD_LIBRARY_PATH 中。"}
{"id": "TEST1-247", "output_field": "当GetNumOutEdges函数达到限制时，它会返回n_limit参数的值，并将more_to_go参数设置为true，以指示超出限制。"}
{"id": "TEST1-248", "output_field": "在每次迭代中，BFS算法通过将当前层的顶点标记为已访问，并将其邻接的未访问顶点加入下一层，从而更新活跃顶点数量。活跃顶点数量即为当前层中未处理的顶点数。随着迭代的进行，活跃顶点数量会动态变化，直到所有顶点都被访问。"}
{"id": "TEST1-249", "output_field": "64"}
{"id": "TEST1-250", "output_field": "PUT 和 POST"}
