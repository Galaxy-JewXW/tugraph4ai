{"id": "TEST1-1", "output_field": "在添加边时，若指定值不在value_dict中，必填属性将导致系统抛出错误，提示缺少必要值；可选属性则会被设为默认值或null。"}
{"id": "TEST1-2", "output_field": "Christopher Nolan, Corin Redgrave"}
{"id": "TEST1-3", "output_field": "使用 REST API 发送 GET 请求到 `/role/`，需携带管理员权限的 Authorization 头部。请求示例：`GET http://localhost:7070/role`。响应将包含所有角色及其信息，如是否禁用、描述和权限等。"}
{"id": "TEST1-4", "output_field": "每个图项目最多可存储2^(40)个点，两个点数据之间最多可存储2^(32)条边，每个点或边类型最多可创建1024个属性。"}
{"id": "TEST1-5", "output_field": "可能是镜像中没有包含 setup.sh 脚本，或者脚本位于其他目录。你可以使用 `find` 或 `ls -a` 命令查找。如果确实找不到，可能需要检查镜像的版本或来源。"}
{"id": "TEST1-6", "output_field": "是的，使用 lgraph_server -d start 命令启动 TuGraph 服务器时会在当前工作目录（pwd）下生成一个 .pid 文件，该文件包含了服务器进程的进程标识符（PID）。目前提供的文档中没有明确说明可以通过参数控制 .pid 文件的生成路径。"}
{"id": "TEST1-7", "output_field": "在使用ARM机器（如M1芯片的Mac）编译TuGraph时，应在cmake命令中添加`-DENABLE_BUILD_ON_AARCH64=ON`参数。例如，使用`cmake .. -DOURSYSTEM=centos -DENABLE_BUILD_ON_AARCH64=ON`。"}
{"id": "TEST1-8", "output_field": "清理操作，用于在函数执行完成后删除指定目录中的数据。"}
{"id": "TEST1-9", "output_field": "`lgraph_server -d start -c lgraph.json`"}
{"id": "TEST1-10", "output_field": "TuGraph团队通过优化Antlr4 C++ target，成功提升了其并发性能超过10倍，显著提高了解析速度。此外，他们还提供了多种服务端接口，如Cypher、Procedure API、OLAP API和GNN PI，以支持高效的图查询和计算。这些接口中，编译执行的特性进一步优化了执行效率。"}
{"id": "TEST1-11", "output_field": "DELETE"}
{"id": "TEST1-12", "output_field": "`AllocVertexSubset`函数用于分配一个表示顶点子集的对象，其大小与图的顶点数|V|相同。该函数返回一个顶点子集，可以用于后续的图算法处理。在`Process`函数中，它被用来创建一个包含所有顶点的子集。"}
{"id": "TEST1-13", "output_field": "请检查网络连接稳定性，确认服务器是否有足够存储空间，并验证数据格式是否符合导入要求。如问题依旧，建议查看系统错误日志获取更详细信息。必要时，联系技术支持协助解决。"}
{"id": "TEST1-14", "output_field": "CSV和JSON"}
{"id": "TEST1-15", "output_field": "除了在语句前加EXPLAIN和PROFILE，还可以通过调整数据库配置参数、优化查询逻辑、使用索引和分区技术等方式进行TuGraph的调优。"}
{"id": "TEST1-16", "output_field": "url, user, password"}
{"id": "TEST1-17", "output_field": "在Cython中，导入与Olap相关的模块需要使用`from cython.cimports.olap_base import *`，而导入图数据库模块也需使用相同的语法`from cython.cimports.olap_base import *`，然后通过Cython编译py文件后才能运行。"}
{"id": "TEST1-18", "output_field": "'unique'参数指定索引是否唯一，即该字段值在所有边中不重复；'pair_unique'参数指定索引是否为成对唯一，即该字段值在每对顶点间不重复。"}
{"id": "TEST1-19", "output_field": "图数据库的优势包括：1. 支持更灵活的“图结构”，适合处理复杂关联关系；2. 在图数据操作上效率更高，尤其擅长多跳关联查询；3. 提供对关联数据的直接表达方式，对异构数据有天然包容性。"}
{"id": "TEST1-20", "output_field": "是的，错误信息表明属性值[xxx]超出了唯一索引的长度限制，需要缩短该属性值以符合索引要求。"}
{"id": "TEST1-21", "output_field": "`AttributeError`"}
{"id": "TEST1-22", "output_field": "编译环境、运行环境、精简运行环境"}
{"id": "TEST1-23", "output_field": "POINT、LINESTRING、POLYGON"}
{"id": "TEST1-24", "output_field": "vertex_label"}
{"id": "TEST1-25", "output_field": "在HA模式下，client只能向leader发送导入点边数据请求。"}
{"id": "TEST1-26", "output_field": "WriteNotAllowed"}
{"id": "TEST1-27", "output_field": "顶点索引迭代器"}
{"id": "TEST1-28", "output_field": "可以。`db.importor.dataImportor` 函数通常支持设置错误处理策略和线程数，具体可通过参数配置实现。请查阅官方文档确认具体参数用法。"}
{"id": "TEST1-29", "output_field": "get_vertex"}
{"id": "TEST1-30", "output_field": "WriteNotAllowed"}
{"id": "TEST1-31", "output_field": "当节点的出度大于0时，节点的pagerank值计算公式为：初始pagerank值（即1/节点总数）除以该节点的出度。具体代码实现为 `curr[vi] = one_over_n / olapondb.OutDegree(vi)`。"}
{"id": "TEST1-32", "output_field": "CSV和JSON"}
{"id": "TEST1-33", "output_field": "该错误表明在读取数组时超出了实际大小，所需大小为4，但实际大小为2。建议检查数据导入或处理过程中是否存在数据不一致或格式错误，并确保数据符合预期格式。如果问题持续，可在[Discussions](https://github.com/TuGraph-family/tugraph-db/discussions)发帖详细描述问题，寻求进一步帮助。"}
{"id": "TEST1-34", "output_field": "只读"}
{"id": "TEST1-35", "output_field": "CSV文件中的栏位名称需与配置文件中的columns字段名称相匹配，以确保数据正确导入。可以通过编辑配置文件中的columns列表，使其顺序和名称与CSV文件一致。若栏位名称不同，需在配置文件中进行相应修改或映射。"}
{"id": "TEST1-36", "output_field": "顶点标签创建时通常需要指定标签名称和顶点类型。某些情况下还可能需要定义属性和约束条件。具体参数取决于使用的图数据库或框架。"}
{"id": "TEST1-37", "output_field": "7070"}
{"id": "TEST1-38", "output_field": "聚合函数，如SUM、AVG等，用于计算图表中显示的值。这些函数根据所选维度和度量进行数据汇总。具体方法取决于配置中的设定。"}
{"id": "TEST1-39", "output_field": "蚂蚁集团"}
{"id": "TEST1-40", "output_field": "图学习系统解决图学习问题。"}
{"id": "TEST1-41", "output_field": "`GetVertexByUniqueCompositeIndex` 函数需要以下参数：\n1. `label_name` - 标签名称\n2. `field_name` - 字段名称的向量\n3. `field_value_string` - 字段值字符串的向量"}
{"id": "TEST1-42", "output_field": "通过配置文件或命令行设置`rpc_port`参数。在配置文件中指定`rpc_port`的值，或在启动命令中添加`--rpc_port=端口号`。确保设置的端口号未被其他服务占用。"}
{"id": "TEST1-43", "output_field": "图数据库在处理关联关系时，通过直接跳转访问类指针，避免了关系型数据库中的表JOIN操作，从而提高2到4个数量级的性能。图结构更灵活，适合复杂关联数据的建模和操作。"}
{"id": "TEST1-44", "output_field": "73@TuGraph"}
{"id": "TEST1-45", "output_field": "std::vector<std::string>"}
{"id": "TEST1-46", "output_field": "是独立运行的。TuGraph Analytics是蚂蚁集团的开源分布式实时图计算引擎，与传统的数据库系统（DB）在功能和架构上有所不同，通常需要独立部署和运行。两者可以通过接口或数据集成方式进行交互。"}
{"id": "TEST1-47", "output_field": "url, user, password"}
{"id": "TEST1-48", "output_field": "在命令行中使用`lgraph_cypher`工具以单命令模式提交Cypher查询并保存结果，可以使用以下格式：\n```\nlgraph_cypher -f {文件路径} \"match (n) return n limit 1000\"\n```\n例如，将查询结果保存到`/home/usr/saved.txt`文件：\n```\nlgraph_cypher -f /home/usr/saved.txt \"match (n) return n limit 1000\"\n```"}
{"id": "TEST1-49", "output_field": "/root/tugraph/data 和 /root/tugraph/log"}
{"id": "TEST1-50", "output_field": "TuGraph 的 Traversal API 中设置遍历起始点有三种方式：通过点 ID 直接指定、通过点 ID 集合指定、通过过滤函数指定。"}
{"id": "TEST1-51", "output_field": "设置字段的值。"}
{"id": "TEST1-52", "output_field": "TuGraph-DB图数据库由蚂蚁集团与清华大学联合研发。"}
{"id": "TEST1-53", "output_field": "无"}
{"id": "TEST1-54", "output_field": "函数 SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter) 通过使用参数 root_vertex_filter 来设置初始边界。该参数是一个函数，它接受一个 VertexIterator 类型的参数，并返回一个布尔值。在设置边界时，每个顶点都会被检查，以确定是否应该包含在初始边界中。如果 root_vertex_filter 函数返回 true，则该顶点会被包含在边界中。"}
{"id": "TEST1-55", "output_field": "包含。RPM包通常会包含软件的所有必要组件，包括新版前端页面资源。具体内容需查看RPM包的说明或内容列表。"}
{"id": "TEST1-56", "output_field": "大约需要 2GB 内存和 2CPU 核心，具体资源消耗可能因实际使用情况而异。"}
{"id": "TEST1-57", "output_field": "属性个数（2到16个）、索引类型（唯一或非唯一）、属性长度之和（唯一索引不超过480-2*(属性个数-1)字节，非唯一索引不超过475-2*(属性个数-1)字节）"}
{"id": "TEST1-58", "output_field": "InvalidTxn"}
{"id": "TEST1-59", "output_field": "TuGraphClient是用于与TuGraph图数据库交互的Python客户端，分为RESTful和RPC两种类型，分别通过HTTP请求和RPC方法调用服务器端服务。RESTful客户端使用简单但功能有限，RPC客户端功能强大但使用复杂。"}
{"id": "TEST1-60", "output_field": "TuGraph 支持X86_64和ARM64架构的硬件平台，包括Intel、AMD、Kunpeng、Hygon、飞腾等。"}
{"id": "TEST1-61", "output_field": "是的，前两个参数`personDesc`和`person`的格式与执行导入脚本时的格式相同，分别用于描述数据格式和提供要导入的数据内容。"}
{"id": "TEST1-62", "output_field": "类中的集合映射为边类型，集合中的元素属性用于表示边的属性。"}
{"id": "TEST1-63", "output_field": "在 DateTime 对象使用 operator+= 或 operator-= 时发生溢出，通常会抛出异常，如 std::out_of_range，以通知程序处理溢出情况。具体行为取决于所使用的编程语言和库的实现。建议查阅相关文档以了解确切处理方式。"}
{"id": "TEST1-64", "output_field": "标签存在且添加的字段不重复，默认值类型兼容。"}
{"id": "TEST1-65", "output_field": "带权图的边权重通常是实数值，可以是正数、负数或零。具体类型取决于应用场景，如整数或浮点数。在某些情况下，权重也可以是复数或其他数学对象。"}
{"id": "TEST1-66", "output_field": "RPC（远程过程调用）是一种通过网络从远程计算机程序上请求服务的协议，用户无需了解底层网络技术，通过调用本地方法的形式实现远程服务调用，适用于复杂通信需求且性能较高。"}
{"id": "TEST1-67", "output_field": "TuGraph中主键的作用是确保数据的唯一性，通过为主键创建索引，可以快速定位到特定的节点，适用于频繁访问固定节点的场景。"}
{"id": "TEST1-68", "output_field": "RpcException是RPC通信过程中发生的异常，通常用于表示远程调用失败或连接问题。在上述代码中，RpcConnectionException和RpcStatusException都是RpcException的具体子类，分别处理连接错误和请求状态错误。"}
{"id": "TEST1-69", "output_field": "不支持。match语句通常用于模式匹配，一次只能设置一个属性进行匹配。若需匹配多个属性，需使用多个matchCondition或结合其他逻辑操作。"}
{"id": "TEST1-70", "output_field": "TuGraph团队针对Antlr4 C++ target的并发性能进行了优化，成功提升了超过10倍。"}
{"id": "TEST1-71", "output_field": "TuGraph要求每个节点或关系有且只有一个标签，如果没有标签会报错，如果有多个标签则取第一个。OpenCypher允许节点或关系有0到多个标签。"}
{"id": "TEST1-72", "output_field": "true"}
{"id": "TEST1-73", "output_field": "不支持"}
{"id": "TEST1-74", "output_field": "字符串格式"}
{"id": "TEST1-75", "output_field": "SetFrontier(std::function<bool(VertexIterator&)> root_vertex_filter)"}
{"id": "TEST1-76", "output_field": "很抱歉，根据提供的上下文信息，无法确定GeaBase的主要部署方式所需的具体时间。如果您提供更多细节，我可以尝试给出更准确的答案。"}
{"id": "TEST1-77", "output_field": "点和边"}
{"id": "TEST1-78", "output_field": "TuGraph 支持 C++、Python 和 Rust 编写存储过程，客户端SDK支持 Java、Python、C++，以及示例代码中的 Golang、JavaScript。"}
{"id": "TEST1-79", "output_field": "通过发送GET请求到`http://127.0.0.1:7071/db/school/cpp_plugin`，然后解析返回的JSON文本中的`plugins`字段，即可获取存储过程响应的列表。"}
{"id": "TEST1-80", "output_field": "RPC接口是一种通过网络从远程计算机程序上请求服务的协议，允许开发者通过远程过程调用实现函数方法的调用，无需了解底层网络技术。相比REST，RPC面向方法，适用于更复杂的通信需求，性能更高。TuGraph基于brpc框架提供了丰富的RPC API，用于远程调用其服务。"}
{"id": "TEST1-81", "output_field": "在文本中，The Matrix参与了以下几种类型的关系：商业合作、技术支持、数据共享。"}
{"id": "TEST1-82", "output_field": "`./lgraph_server -d start -c lgraph.json`"}
{"id": "TEST1-83", "output_field": "如果添加顶点时存在相同的unique_id，系统可能会报错或覆盖原有顶点数据，具体取决于系统设计。这可能导致数据不一致或丢失。建议在添加前检查unique_id的唯一性。"}
{"id": "TEST1-84", "output_field": "X86_64 和 ARM64"}
{"id": "TEST1-85", "output_field": "TuGraph-OGM通过将JAVA对象（POJO）映射到TuGraph中，实现类映射为节点、集合映射为边、属性映射为图对象属性，并提供操作图数据库的函数，使JAVA开发人员能在熟悉环境中使用TuGraph数据库。"}
{"id": "TEST1-86", "output_field": "`OPTIONAL MATCH`在GQL中用于在图中搜索可能存在的匹配模式，即使部分模式不满足条件也不会导致整个查询失败，常用于查找不完整或不一定存在的数据关系。"}
{"id": "TEST1-87", "output_field": "通过`readOnly`参数控制存储过程是否为只读。在`loadProcedure`方法中，`readOnly`是一个布尔值参数，当设置为`true`时，存储过程为只读；当设置为`false`时，存储过程为可写。"}
{"id": "TEST1-88", "output_field": "远程过程调用（RPC）中，如果回应的错误码不是成功，通常抛出的异常类型是 `RpcException`。具体类型可能因使用的RPC框架而异，如gRPC中为 `StatusRuntimeException`。"}
{"id": "TEST1-89", "output_field": "swap_id函数用于在Transform操作中交换两个元素的ID，常用于数据重组或调整元素位置。它通过改变元素的标识符来实现元素的替换或排序。具体应用取决于数据结构和操作需求。"}
{"id": "TEST1-90", "output_field": "在影视场景Demo中，通过Cypher语言查询影片'Forrest Gump'的所有演员及其扮演的角色，可以使用以下查询语句：`MATCH (m:movie {title: 'Forrest Gump'})<-[r:acted_in]-(a:person) RETURN a.name, r.role`。这条语句会返回所有参演'Forrest Gump'的演员姓名和他们各自的角色。"}
{"id": "TEST1-91", "output_field": "6种"}
{"id": "TEST1-92", "output_field": "点、线、面(多边形)"}
{"id": "TEST1-93", "output_field": "只有企业版支持麒麟操作系统。"}
{"id": "TEST1-94", "output_field": "EWKB格式数据，表示点"}
{"id": "TEST1-95", "output_field": "在TuGraph的嵌入模式下，用户可以执行以下操作：\n1. 调用Procedure API进行事务操作和图分析操作。\n2. 调试OLAP API的代码，进行复杂图分析。\n3. 直接使用接口调用数据库中的数据，无需启动图数据库服务。"}
{"id": "TEST1-96", "output_field": "1970年1月1日"}
{"id": "TEST1-97", "output_field": "会抛出 InputError 异常。"}
{"id": "TEST1-98", "output_field": "在单命令模式下，使用 `lgraph_cypher` 执行 Cypher 查询并将结果显示为表格格式，可以通过以下命令行参数实现：`lgraph_cypher -f {查询文件} -format table`。其中，`{查询文件}` 包含要执行的 Cypher 查询语句。"}
{"id": "TEST1-99", "output_field": "`reduce_plus`函数将其两个参数进行累加操作，返回它们的和。具体来说，如果传入的两个参数分别是`a`和`b`，则`reduce_plus`函数返回`a + b`。这个函数通常用于在并行处理中对多个节点的返回值进行聚合。"}
{"id": "TEST1-100", "output_field": "不支持无向边"}
{"id": "TEST1-101", "output_field": "FieldData类提供了多种构造函数，包括用于初始化基本数据类型的构造函数、用于初始化复杂数据结构的构造函数，以及用于从其他数据源（如文件或数据库）加载数据的构造函数。具体构造函数取决于类的实现细节和设计需求。"}
{"id": "TEST1-102", "output_field": "TuGraph-DB通过高效处理大规模图数据，快速计算最优路径，减少旅行规划时间。其强大的图算法支持多条件路径搜索，提升路线选择的准确性。此外，实时数据更新功能确保路线信息的时效性，减少因信息滞后导致的行程困扰。"}
{"id": "TEST1-103", "output_field": "exists()函数用于检查一个顶点或边是否具有某个字段。"}
{"id": "TEST1-104", "output_field": "4 Cores, 64 Cores"}
{"id": "TEST1-105", "output_field": "MappedVid 函数用于将视频数据映射到特定格式或结构，以便进行处理或分析。它通常用于视频处理库或框架中，以优化视频数据的操作效率。具体用途可能因不同应用场景而异。"}
{"id": "TEST1-106", "output_field": "当尝试更新一个存在的边但标签与指定的不符时，系统通常会拒绝更新并返回错误信息，指出标签不匹配。这种行为有助于维护数据的一致性和准确性。具体响应取决于所使用的数据库或图数据库的管理规则。"}
{"id": "TEST1-107", "output_field": "不是。批量在线导入通常使用`LOAD CSV`或`UNWIND`等Cypher语句，而非简单的`CREATE (n), (m)`。后者仅创建单个节点，不适用于批量操作。"}
{"id": "TEST1-108", "output_field": "`lgraph_backup` 工具的主要功能是将 TuGraph 数据库中的数据备份到另一个目录下，支持在备份过程中进行 compaction 以使备份文件更紧凑。"}
{"id": "TEST1-109", "output_field": "通过GET方法访问URI `/db/{graph_name}/node/{vertex_id}/property` 可以获取某个节点的所有属性。"}
{"id": "TEST1-110", "output_field": "点、边、属性"}
{"id": "TEST1-111", "output_field": "TuGraph-DB支持存储过程，支持C++、Python和Rust语言编写的存储过程。"}
{"id": "TEST1-112", "output_field": "获取边缘属性信息"}
{"id": "TEST1-113", "output_field": "图数据库引擎和图分析引擎，支持大数据量存储和计算、高吞吐率、灵活API，以及高效的在线事务处理（OLTP）和在线分析处理（OLAP）。主要功能特征包括标签属性图模型、多图支持、ACID事务处理、内置图分析算法、图可视化工具等。"}
{"id": "TEST1-114", "output_field": "RpcStatusException"}
{"id": "TEST1-115", "output_field": "2024年3月"}
{"id": "TEST1-116", "output_field": "TuGraph-DB使用CMake作为编译工具，支持的C++标准为C++17。"}
{"id": "TEST1-117", "output_field": "`cython.cimports.libcpp.unordered_map` 是 Cython 中用于导入 C++ 标准库中的 `unordered_map` 容器的指令。它允许在 Cython 代码中使用 C++ 的无序映射（哈希表），以实现高效的键值对存储和查找。"}
{"id": "TEST1-118", "output_field": "-d {db_dir}, -g {graph_list}"}
{"id": "TEST1-119", "output_field": "支持部分GQL语句，TuGraph基于ISO GQL标准实现并做了一些扩展与改造，但尚未完全支持所有GQL语法。"}
{"id": "TEST1-120", "output_field": "“log4j-core”的版本号是2.14.1，“guava”的版本号是30.1-jre。"}
{"id": "TEST1-121", "output_field": "设置用户对图的访问权限。该方法允许指定用户对特定图进行访问控制，包括读、写等权限。常用于图数据库或图计算框架中的权限管理。"}
{"id": "TEST1-122", "output_field": "使用 `lgraph_log.h` 中的日志宏（如 `LOG_DEBUG`, `LOG_INFO` 等）在单元测试代码中输出日志。通过配置 `verbose` 级别和 `log_file` 选项来控制日志的详细程度和存储位置。在单元测试执行过程中，日志将按照配置输出到指定文件或控制台。"}
{"id": "TEST1-123", "output_field": "在GeaBase查询中，使用\"Nav\"语句的一种情况是通过指定导航路径来访问复杂对象中的嵌套属性。例如，使用\"Nav\"语句可以从一个实体导航到与其关联的另一个实体，从而获取关联实体的属性值。这常用于处理具有多级关联关系的数据库模型。"}
{"id": "TEST1-124", "output_field": "可以使用`db.upsertEdge`接口，通过指定`pair unique`索引的字段来快速定位并更新两个顶点间的特定关系边。例如，使用`score`字段作为`pair unique`索引，调用`CALL db.upsertEdge('edge1',{type:'node1',key:'node1_id'}, {type:'node2',key:'node2_id'}, [{node1_id:1,node2_id:2,score:10}], 'score')`即可根据`score`值更新对应的边数据。需要先为该字段创建`pair unique`索引。"}
{"id": "TEST1-125", "output_field": "TuGraph Explorer 的功能现在可以在 TuGraph Browser 中找到。"}
{"id": "TEST1-126", "output_field": "SybilRank算法主要采用基于信任传播的方式来进行计算，通过迭代更新节点的信任值，最终识别出可信节点和恶意节点。该方法利用网络结构中的信任关系，逐步扩散信任值，以区分正常用户和Sybil攻击者。"}
{"id": "TEST1-127", "output_field": "节点和边的属性在知识图谱中用于更精确地描述实体和关系，增强数据的表达力和丰富性，支持复杂查询和推理。例如，员工工号和雇佣时间等属性能详细刻画实体特征，提升图谱在应用中的实用性和准确性。"}
{"id": "TEST1-128", "output_field": "在TuGraph项目中，提交代码前先提交一个issue的原因是：避免与其他开发者或项目计划冲突，减少重复工作；让维护人员讨论并确定修改的必要性和改进空间；达成一致后再开发，减少沟通成本和PR被拒绝的情况。"}
{"id": "TEST1-129", "output_field": "社区版本通常免费，功能有限，适用于个人或小型项目；企业版本收费，提供更多高级功能和支持，适合大型企业使用。具体差异包括性能、安全性、定制化服务和技术支持等方面。"}
{"id": "TEST1-130", "output_field": "```\nprepare_cost = 0.10(s)\ncore_cost = 0.02(s)\nfound_vertices = 3829\noutput_cost = 0.00(s)\ntotal_cost = 0.11(s)\nDONE.\n```"}
{"id": "TEST1-131", "output_field": "当`key_start`和`key_end`都等于`v`时，`VertexIndexIterator`会返回一个指向所有字段值为`v`的顶点的迭代器。这个迭代器可以遍历所有符合条件的顶点，每次调用`Next()`函数会移动到下一个顶点，直到迭代器失效。通过`GetVid()`函数可以获取当前顶点的ID。"}
{"id": "TEST1-132", "output_field": "将顶点数据以键值对形式存储，使用图数据库的API或查询语言创建顶点，并指定顶点属性。例如，在Neo4j中使用`CREATE (n:Label {key1: 'value1', key2: 'value2'})`语句。确保数据模型设计合理，以支持高效查询和更新。"}
{"id": "TEST1-133", "output_field": "lgraph_api::Transaction用于管理存储过程所处的事务，确保数据操作的原子性和一致性，通常与调用该存储过程的Cypher语句处于同一事务中。"}
{"id": "TEST1-134", "output_field": "运行`ProcessVertexActive`函数时出现错误，通常会引发`RuntimeError`异常。具体异常类型可能取决于错误的具体情况。如果文档中有特定说明，则以文档为准。"}
{"id": "TEST1-135", "output_field": "字符串格式"}
{"id": "TEST1-136", "output_field": "Prometheus的地址通常是指其监控系统的访问URL，具体地址取决于部署环境，例如可能是 http://localhost:9090。如果需要确切的地址，请查看您的Prometheus配置文件或询问系统管理员。"}
{"id": "TEST1-137", "output_field": "全图/全量数据分析类任务"}
{"id": "TEST1-138", "output_field": "在给定的XML配置中，如果表内属性字段名为id时，可以将node_id字段重命名为其他不冲突的名称，例如node_id改为node_identifier，或者在处理XML时使用命名空间区分id字段，以避免报错。"}
{"id": "TEST1-139", "output_field": "```java\nsession.query(\"CALL db.createEdgeLabel('DIRECT', '[]')\", emptyMap());\n```"}
{"id": "TEST1-140", "output_field": "可以统一返回字典或对象形式，例如：`return {'name': p.name, 'age': p.age}`，然后在可视化页面进行解析展示。这样无论返回单个值还是多个值，前端处理方式一致。具体实现需根据后端框架和前端需求调整。"}
{"id": "TEST1-141", "output_field": "在基于ARM的机器（如Mac M1）上编译TuGraph时，配置CMake需执行命令`cmake .. -DOURSYSTEM=centos -DENABLE_BUILD_ON_AARCH64=ON`或`cmake .. -DOURSYSTEM=ubuntu -DENABLE_BUILD_ON_AARCH64=ON`。"}
{"id": "TEST1-142", "output_field": "CPU至少i5-9400F，内存16GB，显卡GTX 1660 Super，存储256GB SSD加1TB HDD。具体配置还需根据使用需求调整。"}
{"id": "TEST1-143", "output_field": "在TuGraph中，可以使用内置的图算法如Dijkstra算法查询两点间的最短路径。通过定义起点和终点，并调用`shortestPath`函数，限制路径长度，即可找到两点间的通路。例如，使用以下代码查询用户A和用户B之间的路径：`MATCH (p1:Person {id: 'userA'}), (p2:Person {id: 'userB'}), p = shortestPath((p1)-[*..6]-(p2)) RETURN p`。"}
{"id": "TEST1-144", "output_field": "不支持通过 Cypher 或 Python 直接修改 Schema。Schema 修改通常需要通过特定的管理工具或接口进行。"}
{"id": "TEST1-145", "output_field": "brpc框架，提供文件上传、数据导入、导入进度查询、Cypher查询、文件删除等功能。"}
{"id": "TEST1-146", "output_field": "禁用角色后，具有该角色的用户将不再从该角色中获得任何权限，但若用户拥有其他角色权限，则其他角色权限仍然有效。"}
{"id": "TEST1-147", "output_field": "为了合法授权公司员工提交贡献内容，公司应签署公司贡献者许可协议（CLA），并在协议中指定有权提交贡献内容的员工名单。同时，员工在提交贡献内容时，应保证其贡献内容为原创作品，并披露任何相关的第三方许可或其他限制。"}
{"id": "TEST1-148", "output_field": "使用`CALL db.dropAllVertex()`命令可以只删除所有点和边数据，保留图schema。"}
{"id": "TEST1-149", "output_field": "OGM和MyBatis都用于简化数据库操作，提供对象关系映射功能，并允许通过配置文件管理SQL语句。它们都支持动态SQL和参数化查询，提高了代码的可维护性和灵活性。此外，两者都旨在减少直接编写JDBC代码的需要，提升开发效率。"}
{"id": "TEST1-150", "output_field": "BROWSER 可以通过 Docker 部署。具体步骤包括下载 Docker 镜像、运行容器等。详细指南请参考官方文档。"}
{"id": "TEST1-151", "output_field": "TuGraph-DB有数据导入工具`lgraph_import`，支持从CSV和JSON文件导入数据。相关代码和详细描述在文档的[配置文件](1.data-import.md)部分。"}
{"id": "TEST1-152", "output_field": "图数据库的独特优势包括：1. 支持灵活的“图结构”，更适合表达复杂关联关系；2. 在图数据操作上采用基于点的视角，提高关联数据处理的效率；3. 在处理海量关联数据时，性能比关系型数据库高2到4个数量级。"}
{"id": "TEST1-153", "output_field": "Java、Python、C++"}
{"id": "TEST1-154", "output_field": "WKT和WKB格式"}
{"id": "TEST1-155", "output_field": "导入数据到数据库中"}
{"id": "TEST1-156", "output_field": "TuGraph企业版是蚂蚁集团提供的高性能图数据库的商业化版本，支持分布式集群架构、全生命周期一站式图平台、多模式图计算引擎、多地多中心部署及专家支持服务，适合商业化解决方案。"}
{"id": "TEST1-157", "output_field": "GET方法，URI格式为`http://{host}:{port}/db/{graph_name}/cpp_plugin|python_plugin`。"}
{"id": "TEST1-158", "output_field": "TuGraph基础算法包包含6个基础算法，具体算法名称未在提供的文本中明确列出。"}
{"id": "TEST1-159", "output_field": "7070"}
{"id": "TEST1-160", "output_field": "调用`POST /role/{role_name}/disable`函数，当操作成功并返回200状态码时表示true。"}
{"id": "TEST1-161", "output_field": "不会丢失。在系统环境不变且TuGraph版本兼容的情况下，原服务的数据和存储过程可以直接迁移到新服务中使用。用户只需使用`lgraph_backup`工具备份数据，然后传输到新机器并重启服务即可。"}
{"id": "TEST1-162", "output_field": "null"}
{"id": "TEST1-163", "output_field": "磁盘IO警报通常在磁盘读写操作频繁、响应时间过长或I/O利用率超过预设阈值时触发。这可能是由于系统负载过高、磁盘故障或资源争用等原因引起的。具体触发条件取决于监控系统配置的阈值和规则。"}
{"id": "TEST1-164", "output_field": "调用 Close() 函数后，InEdgeIterator 变为无效状态。"}
{"id": "TEST1-165", "output_field": "DUAL_DIRECTION表示输入文件为非对称图，加载的图也为非对称图。"}
{"id": "TEST1-166", "output_field": "当指定的顶点ID不存在，并且nearest参数为true时，Goto函数会尝试获取排序在指定顶点之后的下一个顶点。如果不存在这样的顶点，迭代器将变为无效。"}
{"id": "TEST1-167", "output_field": "遍历点个数"}
{"id": "TEST1-168", "output_field": "TuGraph的“refresh_time”默认设置是0。这意味着在没有特别配置的情况下，系统不会自动刷新。需要手动设置刷新时间。"}
{"id": "TEST1-169", "output_field": "在GetEdgeProp命令中，要查找特定时间戳的边属性，可以使用`timestamp`参数并指定相应的时间戳值。例如：`GetEdgeProp -e edge_type -v vertex_id -t timestamp_value`。这样即可获取该时间戳对应的边属性。"}
{"id": "TEST1-170", "output_field": "7070"}
{"id": "TEST1-171", "output_field": "TuGraph-DB支持运行图算法。示例图算法包括bfs（广度优先搜索），在tugraph-db/procedures目录下编译.so文件后，可通过tugraph-web前端以插件形式加载并执行。具体参数和结果示例已在文档中提供。"}
{"id": "TEST1-172", "output_field": "Python存储过程接口包含Procedure API和Traversal API。Procedure API提供灵活性和高效性，支持C++ Procedure API的跨语言封装，但会有性能损失；Traversal API支持并行执行，描述上接近集合操作，如扩展点集合所有出度邻居。"}
{"id": "TEST1-173", "output_field": "操作成功返回 True，操作失败返回 False。"}
{"id": "TEST1-174", "output_field": "在TuGraph中，复杂图分析操作（如PageRank、社区发现）通过OLAP API执行。首先，需将图数据导出为内存中的快照，该快照采用CSR格式以提高读取效率。然后，在该快照上运行多轮迭代的图计算过程。OLAP API仅支持串行执行，每次操作会充分利用CPU资源。需要注意的是，点的ID需为连续自然数，可能需进行ID映射。"}
{"id": "TEST1-175", "output_field": "`filter_output_default`函数的主要作用是定义默认的数据写入规则，用于筛选满足特定条件的数据进行写入。当未指定其他规则函数时，该函数确保只有符合默认条件的数据被写入文件。"}
{"id": "TEST1-176", "output_field": "在Java运行时，MyBatis Generator的XML配置文件中，`targetProject`应配置为生成文件的绝对路径或相对于运行目录的相对路径。确保路径正确指向期望的输出目录。例如：`<targetProject>/src/main/java</targetProject>`。"}
{"id": "TEST1-177", "output_field": "`@Property(\"class\")`注解指定了数据库字段名为\"class\"。"}
{"id": "TEST1-178", "output_field": "在TuGraph中，可以通过Cypher语句删除图中的重复关系，但需要编写特定的Cypher查询来实现这一功能。例如，可以使用`MATCH`和`WITH`子句结合`DELETE`操作来识别并删除重复关系。具体实现取决于关系的定义和重复的标准。"}
{"id": "TEST1-179", "output_field": "默认情况下，第一次快照的时间为在0-ha_snapshot_interval_s内的任一时刻随机打第一次snapshot。"}
{"id": "TEST1-180", "output_field": "来源的完整信息、个人所知悉的任何许可或其他限制（包括相关专利、商标和许可协议）、显著标明“以第三方名义提交：【填写姓名】”。"}
{"id": "TEST1-181", "output_field": "可能是由于查询逻辑、数据索引或缓存不一致导致。建议检查查询代码、数据库索引和缓存更新机制。确保数据同步和查询条件一致。"}
{"id": "TEST1-182", "output_field": "对象图映射（OGM）支持将JAVA对象（POJO）映射到TuGraph中，包括类映射为节点、集合映射为边、属性映射为图对象属性，并提供操作图数据库的函数，兼容Neo4j-OGM。"}
{"id": "TEST1-183", "output_field": "在单节点模式下，实例化`liblgraph_client_python.client`对象的方法是使用以下格式：\n```python\nclient = liblgraph_client_python.client(\"127.0.0.1:19099\", \"admin\", \"73@TuGraph\")\n```\n其中，`url`为服务器地址（如`127.0.0.1:19099`），`user`为用户名（如`admin`），`password`为密码（如`73@TuGraph`）。"}
{"id": "TEST1-184", "output_field": "非法角色名会抛出 `InvalidRoleNameException` 异常。"}
{"id": "TEST1-185", "output_field": "TuGraph 提供三种部署方式：云部署、Docker部署和安装包部署。用户可根据实际需求和资源情况选择适合的部署方式。云部署适合新手，Docker部署适合对硬件有要求的用户，安装包部署适用于指定生产环境。"}
{"id": "TEST1-186", "output_field": "Corin Redgrave"}
{"id": "TEST1-187", "output_field": "可以继续导入。如果指定了`--continue_on_error true`，则会忽略数据完整性错误并继续导入；否则，导入将在第一个错误包处停止，用户需修改数据后使用`--skip_packages N`重做导入。"}
{"id": "TEST1-188", "output_field": "ResetHeader"}
{"id": "TEST1-189", "output_field": "明确个人或实体贡献内容所授予的知识产权许可。"}
{"id": "TEST1-190", "output_field": "不包含TuGraph中的Java、Python相关功能，无C++ plugin编译运行。"}
{"id": "TEST1-191", "output_field": "OlapOnDB类中的辅助函数，以及其他一些高频使用的函数。"}
{"id": "TEST1-192", "output_field": "密码强度不足、密码格式错误、用户不存在、系统错误等异常可能会被抛出。"}
{"id": "TEST1-193", "output_field": "使用`liblgraph_python_api.Galaxy`类创建新用户账户的方法如下：\n1. 实例化`Galaxy`对象，传入数据库路径。\n2. 调用`SetCurrentUser`方法，传入用户名和密码。\n\n例如：\n```python\ngalaxy = liblgraph_python_api.Galaxy(dir_path)\ngalaxy.SetCurrentUser(user, password)\n```"}
{"id": "TEST1-194", "output_field": "`remove_vertex_label`"}
{"id": "TEST1-195", "output_field": "角色被禁用后，用户将不再从该角色中获得任何权限。"}
{"id": "TEST1-196", "output_field": "TuGraph的可视化监控主要使用了TuGraph Monitor、Prometheus和Grafana。"}
{"id": "TEST1-197", "output_field": "TuGraph 服务器从配置文件和命令行选项加载配置，配置文件通常位于 `/usr/local/etc/lgraph.json`。如果在配置文件和命令行中同一选项指定了不同的值，将优先使用命令行中指定的值。"}
{"id": "TEST1-198", "output_field": "无法从提供的上下文中找到`StudentMapper`接口中`selectVertex`方法的超时设置信息。请提供更多相关代码或配置文件内容以确定超时时间。"}
{"id": "TEST1-199", "output_field": "PathTraversal 类中展开当前前沿的操作可以使用以下类型的过滤函数：\n\n1. `out_edge_filter`：这是一个可选的过滤函数，用于筛选出边。\n2. `out_neighbour_filter`：这是一个可选的过滤函数，用于筛选目标顶点。\n3. `in_edge_filter`：这是一个可选的过滤函数，用于筛选入边。\n4. `in_neighbour_filter`：这是一个可选的过滤函数，用于筛选源顶点。"}
{"id": "TEST1-200", "output_field": "WriteNotAllowed"}
{"id": "TEST1-201", "output_field": "Python编写的UDF模块通常放在Hive的`auxlib`目录下或通过`--auxpath`参数指定的路径中。这样可以确保Hive能够正确加载和使用这些自定义函数。具体位置可能因Hive配置而异。"}
{"id": "TEST1-202", "output_field": "“light-orange”对应的资源名称是“资源A”。"}
{"id": "TEST1-203", "output_field": "在图库应用中，通常可以通过选中要删除的图片，然后点击删除按钮或选择删除选项来移除数据。部分系统可能需要进入设置或管理界面进行批量删除。具体步骤可能因设备和操作系统而异，建议参考相应设备的用户手册。"}
{"id": "TEST1-204", "output_field": "返回代码 200，同时返回新建立的边的 euid 列表。"}
{"id": "TEST1-205", "output_field": "TuGraph选择使用B+树作为其底层存储数据结构，是因为B+树具有较好的顺序读写性能，能够均衡处理读写操作，且避免了LSM树在后台合并过程中性能波动难以预期的问题，从而优化了整体读性能。"}
{"id": "TEST1-206", "output_field": "接口 \"CallProcedureToLeader\" 支持通过设置 `json_format` 参数来改变返回结果的格式。当 `json_format` 为 `true` 时，返回结果为 JSON 格式；当 `json_format` 为 `false` 时，返回结果为字符串格式。"}
{"id": "TEST1-207", "output_field": "合理配置和优化索引，选择适合的属性编码方式（如紧凑编码），并针对具体查询需求选择合适的索引类型（如B树索引或哈希索引）。"}
{"id": "TEST1-208", "output_field": "当 FieldData 类中的 integer() 方法尝试将非 int 类型的数据转换为 int 类型时，会抛出 std::bad_cast 异常。"}
{"id": "TEST1-209", "output_field": "TuGraph-DB的存储引擎使用了KV数据库，基于LMDB构建。"}
{"id": "TEST1-210", "output_field": "找不到\"browser-resource\"时，请确认是否正确安装了新版本资源。修改\"/usr/local/etc/lgraph.json\"中的\"web\"参数后，若仍无效，需检查路径是否正确并确保容器已重启。执行`docker restart tugraph`后，更改应生效。"}
{"id": "TEST1-211", "output_field": "TuGraph在处理大规模数据查询时，并未明确提及对图数据进行压缩的具体措施。其核心优势在于分布式架构、标签属性图模型和多种索引机制，以提升查询效率和响应速度。因此，关于图数据压缩的细节，文中未提供相关信息。"}
{"id": "TEST1-212", "output_field": "TuGraph选择使用B+树作为其存储数据结构。主要原因在于B+树具有较好的顺序读写性能，能够均衡处理读写操作，且其结构特点使得读性能更优，适合TuGraph对读性能优先的需求。相比之下，LSM树虽然在随机写方面占优，但其后台合并方式导致性能波动难以预期，增加了设计成本。"}
{"id": "TEST1-213", "output_field": "TuGraph-DB使用的boost库版本信息未在提供的文档中明确指出。请查阅TuGraph-DB官方文档或相关配置文件以获取具体版本信息。"}
{"id": "TEST1-214", "output_field": "TuGraph适合新手、系统开发者、生产运维人员、研究人员等不同类型的用户。"}
{"id": "TEST1-215", "output_field": "创建实体、提交Cypher、加载和调用存储过程"}
{"id": "TEST1-216", "output_field": "最低：SATA接口的SSD或云上网盘；建议：NVMe SSD，外存大小为实际数据大小的4倍。"}
{"id": "TEST1-217", "output_field": "如果指定的目录不存在，TuGraph数据库的构造函数会自动创建该目录。这样可以确保数据库能够正常初始化和使用。无需手动提前创建目录。"}
{"id": "TEST1-218", "output_field": "std::numeric_limits<size_t>::max()"}
{"id": "TEST1-219", "output_field": "30秒"}
{"id": "TEST1-220", "output_field": "在生成Mapper接口时，XMLMAPPER类型通过XML配置文件实现接口方法。具体来说，XML文件中定义了SQL语句和映射规则，MyBatis框架根据这些配置执行相应的数据库操作。这样，接口方法无需显式编写实现代码，而是由MyBatis在运行时动态调用XML中定义的SQL。"}
{"id": "TEST1-221", "output_field": "GCN模型的主要组成部分包括图卷积层、激活函数和池化层。图卷积层用于提取节点特征，激活函数引入非线性，池化层用于降维和提取图的全局特征。这些组件协同工作，实现图数据的有效学习和分类。"}
{"id": "TEST1-222", "output_field": "gtest框架"}
{"id": "TEST1-223", "output_field": "可以。TuGraph支持先用Cypher查询语言找到一个子图，然后在该子图上运行图分析算法，如PageRank、K-Core等。通过OLAP API，用户可以将子图导出并在内存中进行高效的分析计算。"}
{"id": "TEST1-224", "output_field": "'output_field': '文档未提供具体删除snapshot的时间信息'"}
{"id": "TEST1-225", "output_field": "TuGraph-DB目前支持Cypher查询语言，并计划在将来支持ISO GQL查询语言。"}
{"id": "TEST1-226", "output_field": "有，开启事务的关键字是“BEGIN TRANSACTION”或“START TRANSACTION”，结束事务的关键字是“COMMIT”或“ROLLBACK”。"}
{"id": "TEST1-227", "output_field": "使用 POST 方法向 `/role` URI 发送请求，并在请求体中包含角色名和描述信息。请求头需包含 `Authorization` 以验证管理员权限。示例请求如下：\n```\nPOST http://localhost:7070/role\nAccept: application/json; charset=UTF-8\nContent-Type: application/json; charset=UTF-8\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwiaXNzIjoiZm1hLmFpIiwidXNlcl9pZCI6ImFkbWluIn0.SHaqrjKLaI4byjbEYVAH4D88dOTD_zYQ_uAvdizTMek\nInput:\n{\n\"role\": \"new_role\",\n\"description\": \"This is a new role.\"\n}\n```"}
{"id": "TEST1-228", "output_field": "不支持任意长度路径查询。"}
{"id": "TEST1-229", "output_field": "在Java运行时，若需配置`targetProject`，应在xml配置文件的相应标签内添加`targetProject`属性，并赋予其正确的项目路径值，例如：`<configuration targetProject=\"path/to/your/project\" />`。确保路径与实际项目位置一致，以避免运行错误。"}
{"id": "TEST1-230", "output_field": "HA支持Witness角色和管理工具"}
{"id": "TEST1-231", "output_field": "在调用 \"callGql\" 接口时，通过第二个参数 \"graph\" 指定要查询的图的名称。例如，在 Java 中使用 `client.callGql(\"CALL db.edgeLabels()\", \"default\", 10)`，其中 \"default\" 即为图的名称。在 Python 中同理，通过 `client.callGql(\"CALL db.edgeLabels()\", \"default\", 10)` 中的 \"default\" 指定图名。"}
{"id": "TEST1-232", "output_field": "可以展示属性值。具体取决于图的类型和所使用的软件或工具。例如，在数据可视化工具中，通常可以通过标签、图例或鼠标悬停等方式显示属性值。"}
{"id": "TEST1-233", "output_field": "tugraph-db兼容neo4j的通讯协议，因此可以使用neo4j的驱动连接tugraph-db的server。具体使用方法可参考[bolt driver 使用介绍](./7.client-tools/5.bolt-client.md)和[bolt driver 使用例子](https://github.com/TuGraph-family/tugraph-db/tree/master/demo/Bolt)。"}
{"id": "TEST1-234", "output_field": "可能是因为属性编码方式导致查询效率低下或数据未正确索引。检查是否采用了适合边查询的编码方式（如离散编码），并确认数据导入和索引建立是否正确。若使用紧凑编码，单边查询可能需要优化以提高性能。"}
{"id": "TEST1-235", "output_field": "在\"TuGraph-DataX\"项目中，通过创建一个名为`job_actors.json`的job配置文件，配置文件中指定了读取`actors.csv`文件的路径、编码、字段分隔符等参数，并定义了写入TuGraph的参数，包括图数据库的连接信息、图名称、标签类型、标签名称、批次大小以及属性列表。使用DataX工具执行该job配置文件，即可将`actors.csv`中的数据导入到TuGraph图数据库中。"}
{"id": "TEST1-236", "output_field": "graph, schema"}
{"id": "TEST1-237", "output_field": "在`test_export_default`函数中，通过执行Cypher查询`\"MATCH (n) RETURN n LIMIT 100\"`获取导入后的数据，并将其结果与预期数量（21条记录）进行比较，以验证导出后再次导入的数据是否与原始数据一致。"}
{"id": "TEST1-238", "output_field": "Work函数在处理节点vi时，返回值通常代表从该节点开始到某个特定目标或终点的最小代价或最短路径。具体含义取决于函数的设计和应用场景。如果未明确指定，可能需要查看函数的具体实现细节。"}
{"id": "TEST1-239", "output_field": "TuGraph Explorer 的功能现在可以在 TuGraph Browser 中找到。"}
{"id": "TEST1-240", "output_field": "返回代码 200，并在 JSON 内容中返回新增加的点的 vid 列表。"}
{"id": "TEST1-241", "output_field": "TuGraph可以支持混合检索，结合向量数据库和知识图谱，通过其高性能图数据库和图分析引擎，实现向量与图数据的联合查询和分析。"}
{"id": "TEST1-242", "output_field": "改善服务器刚开启时因频繁IO操作导致的性能下降问题"}
{"id": "TEST1-243", "output_field": "返回边的起点节点信息。"}
{"id": "TEST1-244", "output_field": "`OPTIONAL MATCH`子句用于在图中进行可选匹配，即使匹配模式不满足条件，查询也不会失败，而是返回`null`。它允许查询结果包含不存在的数据，确保查询的完整性。在示例中，即使没有找到名为'Michael Redgrave'的人，查询仍会返回结果，但`n.birthyear`将为`null`。"}
{"id": "TEST1-245", "output_field": "GraphDB实例无法使用可能是由于数据库配置错误、服务器问题、资源耗尽或网络连接故障等原因导致。需要检查相关日志和配置文件以确定具体问题。有时也可能是因为软件版本不兼容或数据损坏。"}
{"id": "TEST1-246", "output_field": "liblgraph.so"}
{"id": "TEST1-247", "output_field": "达到限制时，GetNumOutEdges函数返回n_limit值，并将limit_exceeded设置为true。如果提供了more_to_go参数，会返回是否超出限制。"}
{"id": "TEST1-248", "output_field": "在每次迭代中，BFS算法通过将当前层的顶点标记为已访问，并将它们的未访问邻接顶点加入下一层队列，从而更新活跃顶点数量。每次迭代结束时，当前层的顶点不再被视为活跃顶点。活跃顶点数量更新为下一层队列中的顶点数。"}
{"id": "TEST1-249", "output_field": "64"}
{"id": "TEST1-250", "output_field": "PUT 和 POST\n\n（注：PUT 用于修改资源，POST 用于创建或启用资源，具体取决于API设计）"}
